
registers:	file format elf32-littlearm

Disassembly of section .text:

08000194 <Reset>:
; pub unsafe extern "C" fn Reset() -> ! {
 8000194:      	push	{r7, lr}
 8000196:      	mov	r7, sp
;     __pre_init();
 8000198:      	bl	0x80015a8 <__pre_init>  @ imm = #0x140c
 800019c:      	b	0x800019e <Reset+0xa>   @ imm = #-0x2
;     r0::zero_bss(&mut __sbss, &mut __ebss);
 800019e:      	movw	r0, #0x0
 80001a2:      	movt	r0, #0x2000
 80001a6:      	movw	r1, #0x4
 80001aa:      	movt	r1, #0x2000
 80001ae:      	bl	0x80016b2 <r0::zero_bss::he0c3dc46d6d157a5> @ imm = #0x1500
 80001b2:      	b	0x80001b4 <Reset+0x20>  @ imm = #-0x2
;     r0::init_data(&mut __sdata, &mut __edata, &__sidata);
 80001b4:      	movw	r0, #0x0
 80001b8:      	movt	r0, #0x2000
 80001bc:      	movw	r1, #0x0
 80001c0:      	movt	r1, #0x2000
 80001c4:      	movw	r2, #0x3f20
 80001c8:      	movt	r2, #0x800
 80001cc:      	bl	0x8001702 <r0::init_data::hfad7f874e227c251> @ imm = #0x1532
 80001d0:      	b	0x80001d2 <Reset+0x3e>  @ imm = #-0x2
 80001d2:      	movw	r0, #0xed88
 80001d6:      	movt	r0, #0xe000
;                 *SCB_CPACR | SCB_CPACR_FPU_ENABLE | SCB_CPACR_FPU_USER,
 80001da:      	ldr	r1, [r0]
 80001dc:      	orr	r1, r1, #0xf00000
;             core::ptr::write_volatile(
 80001e0:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0x1358
 80001e4:      	b	0x80001e6 <Reset+0x52>  @ imm = #-0x2
;             trampoline()
 80001e6:      	bl	0x8001586 <ResetTrampoline> @ imm = #0x139c
 80001ea:      	trap

080001ec <main>:
; #[entry]
 80001ec:      	push	{r7, lr}
 80001ee:      	mov	r7, sp
 80001f0:      	bl	0x80001f6 <registers::__cortex_m_rt_main::he763cdae1a66d7d0> @ imm = #0x2
 80001f4:      	trap

080001f6 <registers::__cortex_m_rt_main::he763cdae1a66d7d0>:
; fn main() -> ! {
 80001f6:      	push	{r7, lr}
 80001f8:      	mov	r7, sp
;     aux7::init();
 80001fa:      	bl	0x800023c <aux7::init::h5bd816e01e4fcb17> @ imm = #0x3e
 80001fe:      	b	0x8000200 <registers::__cortex_m_rt_main::he763cdae1a66d7d0+0xa> @ imm = #-0x2
;         *(GPIOE_BSRR as *mut u32) = 1 << 9;
 8000200:      	movw	r0, #0x3814
 8000204:      	movt	r0, #0x800
 8000208:      	ldr	r0, [r0]
 800020a:      	movw	r1, #0x1018
 800020e:      	movt	r1, #0x4800
 8000212:      	str	r0, [r1]
;         *(GPIOE_BSRR as *mut u32) = 1 << 11;
 8000214:      	movw	r0, #0x381c
 8000218:      	movt	r0, #0x800
 800021c:      	ldr	r0, [r0]
 800021e:      	str	r0, [r1]
;         *(GPIOE_BSRR as *mut u32) = 1 << (9 + 16);
 8000220:      	movw	r0, #0x3824
 8000224:      	movt	r0, #0x800
 8000228:      	ldr	r0, [r0]
 800022a:      	str	r0, [r1]
;         *(GPIOE_BSRR as *mut u32) = 1 << (11 + 16);
 800022c:      	movw	r0, #0x380c
 8000230:      	movt	r0, #0x800
 8000234:      	ldr	r0, [r0]
 8000236:      	str	r0, [r1]
;     loop {}
 8000238:      	b	0x800023a <registers::__cortex_m_rt_main::he763cdae1a66d7d0+0x44> @ imm = #-0x2
 800023a:      	b	0x800023a <registers::__cortex_m_rt_main::he763cdae1a66d7d0+0x44> @ imm = #-0x4

0800023c <aux7::init::h5bd816e01e4fcb17>:
; pub fn init() -> (ITM, &'static RegisterBlock) {
 800023c:      	push	{r7, lr}
 800023e:      	mov	r7, sp
 8000240:      	sub	sp, #0x50
;     let device_periphs = stm32::Peripherals::take().unwrap();
 8000242:      	bl	0x80002a8 <stm32f3::stm32f303::Peripherals::take::h5577544c6e270fc5> @ imm = #0x62
 8000246:      	str	r0, [sp, #0x8]
 8000248:      	b	0x800024a <aux7::init::h5bd816e01e4fcb17+0xe> @ imm = #-0x2
 800024a:      	ldr	r0, [sp, #0x8]
 800024c:      	and	r0, r0, #0x1
 8000250:      	movw	r1, #0x3854
 8000254:      	movt	r1, #0x800
 8000258:      	bl	0x80004ea <core::option::Option<T>::unwrap::h58e22e9326cc982c> @ imm = #0x28e
 800025c:      	b	0x800025e <aux7::init::h5bd816e01e4fcb17+0x22> @ imm = #-0x2
 800025e:      	add	r0, sp, #0x10
;     let mut reset_and_clock_control = device_periphs.RCC.constrain();
 8000260:      	bl	0x80012b6 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::h473e39f9c0bdee49> @ imm = #0x1052
 8000264:      	b	0x8000266 <aux7::init::h5bd816e01e4fcb17+0x2a> @ imm = #-0x2
 8000266:      	add	r0, sp, #0x10
;     let mut gpioe = device_periphs.GPIOE.split(&mut reset_and_clock_control.ahb);
 8000268:      	bl	0x80012de <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hcacba82973983466E> @ imm = #0x1072
 800026c:      	b	0x800026e <aux7::init::h5bd816e01e4fcb17+0x32> @ imm = #-0x2
 800026e:      	add	r0, sp, #0x40
 8000270:      	add	r2, sp, #0x3c
;     let _leds = Leds::new(
 8000272:      	mov	r1, r2
 8000274:      	bl	0x800054a <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9> @ imm = #0x2d2
 8000278:      	b	0x800027a <aux7::init::h5bd816e01e4fcb17+0x3e> @ imm = #-0x2
;     let core_periphs = cortex_m::Peripherals::take().unwrap();
 800027a:      	bl	0x8000468 <cortex_m::peripheral::Peripherals::take::h9b2839bc06904a98> @ imm = #0x1ea
 800027e:      	str	r0, [sp, #0x4]
 8000280:      	b	0x8000282 <aux7::init::h5bd816e01e4fcb17+0x46> @ imm = #-0x2
 8000282:      	ldr	r0, [sp, #0x4]
 8000284:      	and	r0, r0, #0x1
 8000288:      	movw	r1, #0x3864
 800028c:      	movt	r1, #0x800
 8000290:      	bl	0x800051a <core::option::Option<T>::unwrap::hd299abc6d1b78e10> @ imm = #0x286
 8000294:      	b	0x8000296 <aux7::init::h5bd816e01e4fcb17+0x5a> @ imm = #-0x2
;     (core_periphs.ITM, unsafe { &*stm32f303::GPIOE::ptr() })
 8000296:      	b	0x8000298 <aux7::init::h5bd816e01e4fcb17+0x5c> @ imm = #-0x2
 8000298:      	movw	r0, #0x1000
 800029c:      	movt	r0, #0x4800
;     (core_periphs.ITM, unsafe { &*stm32f303::GPIOE::ptr() })
 80002a0:      	str	r0, [sp, #0xc]
; }
 80002a2:      	ldr	r0, [sp, #0xc]
 80002a4:      	add	sp, #0x50
 80002a6:      	pop	{r7, pc}

080002a8 <stm32f3::stm32f303::Peripherals::take::h5577544c6e270fc5>:
;     pub fn take() -> Option<Self> {
 80002a8:      	push	{r7, lr}
 80002aa:      	mov	r7, sp
 80002ac:      	sub	sp, #0x8
;         cortex_m::interrupt::free(|_| {
 80002ae:      	bl	0x8000328 <cortex_m::interrupt::free::h52fc97292cd5f555> @ imm = #0x76
 80002b2:      	str	r0, [sp, #0x4]
 80002b4:      	b	0x80002b6 <stm32f3::stm32f303::Peripherals::take::h5577544c6e270fc5+0xe> @ imm = #-0x2
;     }
 80002b6:      	ldr	r0, [sp, #0x4]
 80002b8:      	and	r0, r0, #0x1
 80002bc:      	add	sp, #0x8
 80002be:      	pop	{r7, pc}

080002c0 <stm32f3::stm32f303::Peripherals::steal::h4d6abfda10d2dced>:
;         DEVICE_PERIPHERALS = true;
 80002c0:      	movw	r1, #0x0
 80002c4:      	movt	r1, #0x2000
 80002c8:      	movs	r0, #0x1
 80002ca:      	strb	r0, [r1]
;     }
 80002cc:      	bx	lr

080002ce <cortex_m::interrupt::free::h41ef0c556e6c3a8d>:
; pub fn free<F, R>(f: F) -> R
 80002ce:      	push	{r7, lr}
 80002d0:      	mov	r7, sp
 80002d2:      	sub	sp, #0x18
;     let primask = crate::register::primask::read();
 80002d4:      	bl	0x8000754 <cortex_m::register::primask::read::h883d9b7a9f297328> @ imm = #0x47c
 80002d8:      	mov	r1, r0
 80002da:      	str	r1, [sp, #0x8]
 80002dc:      	strb	r0, [r7, #-2]
 80002e0:      	b	0x80002e2 <cortex_m::interrupt::free::h41ef0c556e6c3a8d+0x14> @ imm = #-0x2
;     disable();
 80002e2:      	bl	0x80003e8 <cortex_m::interrupt::disable::h8433c89f5709d851> @ imm = #0x102
 80002e6:      	b	0x80002e8 <cortex_m::interrupt::free::h41ef0c556e6c3a8d+0x1a> @ imm = #-0x2
;     let r = f(unsafe { &CriticalSection::new() });
 80002e8:      	bl	0x8001952 <bare_metal::CriticalSection::new::hf0487a4381cff786> @ imm = #0x1666
 80002ec:      	b	0x80002ee <cortex_m::interrupt::free::h41ef0c556e6c3a8d+0x20> @ imm = #-0x2
 80002ee:      	add	r0, sp, #0x10
;     let r = f(unsafe { &CriticalSection::new() });
 80002f0:      	str	r0, [sp, #0xc]
 80002f2:      	ldr	r0, [sp, #0xc]
 80002f4:      	bl	0x8000432 <cortex_m::peripheral::Peripherals::take::{{closure}}::h962b7c3d52f19d0d> @ imm = #0x13a
 80002f8:      	mov	r1, r0
 80002fa:      	str	r1, [sp, #0x4]
 80002fc:      	strb	r0, [r7, #-1]
 8000300:      	b	0x8000302 <cortex_m::interrupt::free::h41ef0c556e6c3a8d+0x34> @ imm = #-0x2
;     if primask.is_active() {
 8000302:      	ldr	r0, [sp, #0x8]
 8000304:      	and	r0, r0, #0x1
 8000308:      	bl	0x8000786 <cortex_m::register::primask::Primask::is_active::h565f19b27e765733> @ imm = #0x47a
 800030c:      	str	r0, [sp]
 800030e:      	b	0x8000310 <cortex_m::interrupt::free::h41ef0c556e6c3a8d+0x42> @ imm = #-0x2
 8000310:      	ldr	r0, [sp]
 8000312:      	lsls	r0, r0, #0x1f
 8000314:      	cbnz	r0, 0x8000322 <cortex_m::interrupt::free::h41ef0c556e6c3a8d+0x54> @ imm = #0xa
 8000316:      	b	0x8000318 <cortex_m::interrupt::free::h41ef0c556e6c3a8d+0x4a> @ imm = #-0x2
; }
 8000318:      	ldr	r0, [sp, #0x4]
 800031a:      	and	r0, r0, #0x1
 800031e:      	add	sp, #0x18
 8000320:      	pop	{r7, pc}
;         unsafe { enable() }
 8000322:      	bl	0x80003dc <cortex_m::interrupt::enable::h393192dc511c5f6f> @ imm = #0xb6
 8000326:      	b	0x8000318 <cortex_m::interrupt::free::h41ef0c556e6c3a8d+0x4a> @ imm = #-0x12

08000328 <cortex_m::interrupt::free::h52fc97292cd5f555>:
; pub fn free<F, R>(f: F) -> R
 8000328:      	push	{r7, lr}
 800032a:      	mov	r7, sp
 800032c:      	sub	sp, #0x18
;     let primask = crate::register::primask::read();
 800032e:      	bl	0x8000754 <cortex_m::register::primask::read::h883d9b7a9f297328> @ imm = #0x422
 8000332:      	mov	r1, r0
 8000334:      	str	r1, [sp, #0x8]
 8000336:      	strb	r0, [r7, #-2]
 800033a:      	b	0x800033c <cortex_m::interrupt::free::h52fc97292cd5f555+0x14> @ imm = #-0x2
;     disable();
 800033c:      	bl	0x80003e8 <cortex_m::interrupt::disable::h8433c89f5709d851> @ imm = #0xa8
 8000340:      	b	0x8000342 <cortex_m::interrupt::free::h52fc97292cd5f555+0x1a> @ imm = #-0x2
;     let r = f(unsafe { &CriticalSection::new() });
 8000342:      	bl	0x8001952 <bare_metal::CriticalSection::new::hf0487a4381cff786> @ imm = #0x160c
 8000346:      	b	0x8000348 <cortex_m::interrupt::free::h52fc97292cd5f555+0x20> @ imm = #-0x2
 8000348:      	add	r0, sp, #0x10
;     let r = f(unsafe { &CriticalSection::new() });
 800034a:      	str	r0, [sp, #0xc]
 800034c:      	ldr	r0, [sp, #0xc]
 800034e:      	bl	0x80004b4 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h8f38ef515d6d551b> @ imm = #0x162
 8000352:      	mov	r1, r0
 8000354:      	str	r1, [sp, #0x4]
 8000356:      	strb	r0, [r7, #-1]
 800035a:      	b	0x800035c <cortex_m::interrupt::free::h52fc97292cd5f555+0x34> @ imm = #-0x2
;     if primask.is_active() {
 800035c:      	ldr	r0, [sp, #0x8]
 800035e:      	and	r0, r0, #0x1
 8000362:      	bl	0x8000786 <cortex_m::register::primask::Primask::is_active::h565f19b27e765733> @ imm = #0x420
 8000366:      	str	r0, [sp]
 8000368:      	b	0x800036a <cortex_m::interrupt::free::h52fc97292cd5f555+0x42> @ imm = #-0x2
 800036a:      	ldr	r0, [sp]
 800036c:      	lsls	r0, r0, #0x1f
 800036e:      	cbnz	r0, 0x800037c <cortex_m::interrupt::free::h52fc97292cd5f555+0x54> @ imm = #0xa
 8000370:      	b	0x8000372 <cortex_m::interrupt::free::h52fc97292cd5f555+0x4a> @ imm = #-0x2
; }
 8000372:      	ldr	r0, [sp, #0x4]
 8000374:      	and	r0, r0, #0x1
 8000378:      	add	sp, #0x18
 800037a:      	pop	{r7, pc}
;         unsafe { enable() }
 800037c:      	bl	0x80003dc <cortex_m::interrupt::enable::h393192dc511c5f6f> @ imm = #0x5c
 8000380:      	b	0x8000372 <cortex_m::interrupt::free::h52fc97292cd5f555+0x4a> @ imm = #-0x12

08000382 <cortex_m::interrupt::free::hff863d3c9aaaa8e5>:
; pub fn free<F, R>(f: F) -> R
 8000382:      	push	{r7, lr}
 8000384:      	mov	r7, sp
 8000386:      	sub	sp, #0x18
;     let primask = crate::register::primask::read();
 8000388:      	bl	0x8000754 <cortex_m::register::primask::read::h883d9b7a9f297328> @ imm = #0x3c8
 800038c:      	mov	r1, r0
 800038e:      	str	r1, [sp, #0x8]
 8000390:      	strb	r0, [r7, #-2]
 8000394:      	b	0x8000396 <cortex_m::interrupt::free::hff863d3c9aaaa8e5+0x14> @ imm = #-0x2
;     disable();
 8000396:      	bl	0x80003e8 <cortex_m::interrupt::disable::h8433c89f5709d851> @ imm = #0x4e
 800039a:      	b	0x800039c <cortex_m::interrupt::free::hff863d3c9aaaa8e5+0x1a> @ imm = #-0x2
;     let r = f(unsafe { &CriticalSection::new() });
 800039c:      	bl	0x8001952 <bare_metal::CriticalSection::new::hf0487a4381cff786> @ imm = #0x15b2
 80003a0:      	b	0x80003a2 <cortex_m::interrupt::free::hff863d3c9aaaa8e5+0x20> @ imm = #-0x2
 80003a2:      	add	r0, sp, #0x10
;     let r = f(unsafe { &CriticalSection::new() });
 80003a4:      	str	r0, [sp, #0xc]
 80003a6:      	ldr	r0, [sp, #0xc]
 80003a8:      	bl	0x80003f4 <cortex_m::peripheral::Peripherals::take::{{closure}}::h3f80581fdd8c94bd> @ imm = #0x48
 80003ac:      	mov	r1, r0
 80003ae:      	str	r1, [sp, #0x4]
 80003b0:      	strb	r0, [r7, #-1]
 80003b4:      	b	0x80003b6 <cortex_m::interrupt::free::hff863d3c9aaaa8e5+0x34> @ imm = #-0x2
;     if primask.is_active() {
 80003b6:      	ldr	r0, [sp, #0x8]
 80003b8:      	and	r0, r0, #0x1
 80003bc:      	bl	0x8000786 <cortex_m::register::primask::Primask::is_active::h565f19b27e765733> @ imm = #0x3c6
 80003c0:      	str	r0, [sp]
 80003c2:      	b	0x80003c4 <cortex_m::interrupt::free::hff863d3c9aaaa8e5+0x42> @ imm = #-0x2
 80003c4:      	ldr	r0, [sp]
 80003c6:      	lsls	r0, r0, #0x1f
 80003c8:      	cbnz	r0, 0x80003d6 <cortex_m::interrupt::free::hff863d3c9aaaa8e5+0x54> @ imm = #0xa
 80003ca:      	b	0x80003cc <cortex_m::interrupt::free::hff863d3c9aaaa8e5+0x4a> @ imm = #-0x2
; }
 80003cc:      	ldr	r0, [sp, #0x4]
 80003ce:      	and	r0, r0, #0x1
 80003d2:      	add	sp, #0x18
 80003d4:      	pop	{r7, pc}
;         unsafe { enable() }
 80003d6:      	bl	0x80003dc <cortex_m::interrupt::enable::h393192dc511c5f6f> @ imm = #0x2
 80003da:      	b	0x80003cc <cortex_m::interrupt::free::hff863d3c9aaaa8e5+0x4a> @ imm = #-0x12

080003dc <cortex_m::interrupt::enable::h393192dc511c5f6f>:
; pub unsafe fn enable() {
 80003dc:      	push	{r7, lr}
 80003de:      	mov	r7, sp
;     call_asm!(__cpsie());
 80003e0:      	bl	0x8001948 <__cpsie>     @ imm = #0x1564
 80003e4:      	b	0x80003e6 <cortex_m::interrupt::enable::h393192dc511c5f6f+0xa> @ imm = #-0x2
; }
 80003e6:      	pop	{r7, pc}

080003e8 <cortex_m::interrupt::disable::h8433c89f5709d851>:
; pub fn disable() {
 80003e8:      	push	{r7, lr}
 80003ea:      	mov	r7, sp
;     call_asm!(__cpsid());
 80003ec:      	bl	0x8001944 <__cpsid>     @ imm = #0x1554
 80003f0:      	b	0x80003f2 <cortex_m::interrupt::disable::h8433c89f5709d851+0xa> @ imm = #-0x2
; }
 80003f2:      	pop	{r7, pc}

080003f4 <cortex_m::peripheral::Peripherals::take::{{closure}}::h3f80581fdd8c94bd>:
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 80003f4:      	push	{r7, lr}
 80003f6:      	mov	r7, sp
 80003f8:      	sub	sp, #0x10
 80003fa:      	str	r0, [sp, #0xc]
 80003fc:      	bl	0x8000480 <cortex_m::peripheral::Peripherals::take::hdab330a91a507ad0> @ imm = #0x80
 8000400:      	strb	r0, [r7, #-9]
 8000404:      	b	0x8000406 <cortex_m::peripheral::Peripherals::take::{{closure}}::h3f80581fdd8c94bd+0x12> @ imm = #-0x2
 8000406:      	ldrb	r1, [r7, #-9]
 800040a:      	lsls	r0, r1, #0x1f
 800040c:      	cbz	r0, 0x8000414 <cortex_m::peripheral::Peripherals::take::{{closure}}::h3f80581fdd8c94bd+0x20> @ imm = #0x4
 800040e:      	b	0x8000410 <cortex_m::peripheral::Peripherals::take::{{closure}}::h3f80581fdd8c94bd+0x1c> @ imm = #-0x2
 8000410:      	b	0x800041c <cortex_m::peripheral::Peripherals::take::{{closure}}::h3f80581fdd8c94bd+0x28> @ imm = #0x8
 8000412:      	trap
 8000414:      	movs	r0, #0x0
;             None    => None,
 8000416:      	strb	r0, [r7, #-10]
 800041a:      	b	0x800042a <cortex_m::peripheral::Peripherals::take::{{closure}}::h3f80581fdd8c94bd+0x36> @ imm = #0xc
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 800041c:      	bl	0x80004a6 <cortex_m::peripheral::Peripherals::steal::h84a1d7d97c2d74d2> @ imm = #0x86
 8000420:      	b	0x8000422 <cortex_m::peripheral::Peripherals::take::{{closure}}::h3f80581fdd8c94bd+0x2e> @ imm = #-0x2
 8000422:      	movs	r0, #0x1
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 8000424:      	strb	r0, [r7, #-10]
 8000428:      	b	0x800042a <cortex_m::peripheral::Peripherals::take::{{closure}}::h3f80581fdd8c94bd+0x36> @ imm = #-0x2
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 800042a:      	ldrb	r0, [r7, #-10]
 800042e:      	add	sp, #0x10
 8000430:      	pop	{r7, pc}

08000432 <cortex_m::peripheral::Peripherals::take::{{closure}}::h962b7c3d52f19d0d>:
;         interrupt::free(|_| {
 8000432:      	push	{r7, lr}
 8000434:      	mov	r7, sp
 8000436:      	sub	sp, #0x10
 8000438:      	str	r0, [sp, #0xc]
;             if unsafe { TAKEN } {
 800043a:      	movw	r0, #0x1
 800043e:      	movt	r0, #0x2000
 8000442:      	ldrb	r0, [r0]
 8000444:      	lsls	r0, r0, #0x1f
 8000446:      	cbnz	r0, 0x8000450 <cortex_m::peripheral::Peripherals::take::{{closure}}::h962b7c3d52f19d0d+0x1e> @ imm = #0x6
 8000448:      	b	0x800044a <cortex_m::peripheral::Peripherals::take::{{closure}}::h962b7c3d52f19d0d+0x18> @ imm = #-0x2
;                 Some(unsafe { Peripherals::steal() })
 800044a:      	bl	0x8000498 <cortex_m::peripheral::Peripherals::steal::h0433bd2864e01249> @ imm = #0x4a
 800044e:      	b	0x8000460 <cortex_m::peripheral::Peripherals::take::{{closure}}::h962b7c3d52f19d0d+0x2e> @ imm = #0xe
 8000450:      	movs	r0, #0x0
;                 None
 8000452:      	strb	r0, [r7, #-9]
;             if unsafe { TAKEN } {
 8000456:      	b	0x8000458 <cortex_m::peripheral::Peripherals::take::{{closure}}::h962b7c3d52f19d0d+0x26> @ imm = #-0x2
;         interrupt::free(|_| {
 8000458:      	ldrb	r0, [r7, #-9]
 800045c:      	add	sp, #0x10
 800045e:      	pop	{r7, pc}
 8000460:      	movs	r0, #0x1
;                 Some(unsafe { Peripherals::steal() })
 8000462:      	strb	r0, [r7, #-9]
;             if unsafe { TAKEN } {
 8000466:      	b	0x8000458 <cortex_m::peripheral::Peripherals::take::{{closure}}::h962b7c3d52f19d0d+0x26> @ imm = #-0x12

08000468 <cortex_m::peripheral::Peripherals::take::h9b2839bc06904a98>:
;     pub fn take() -> Option<Self> {
 8000468:      	push	{r7, lr}
 800046a:      	mov	r7, sp
 800046c:      	sub	sp, #0x8
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 800046e:      	bl	0x8000382 <cortex_m::interrupt::free::hff863d3c9aaaa8e5> @ imm = #-0xf0
 8000472:      	str	r0, [sp, #0x4]
 8000474:      	b	0x8000476 <cortex_m::peripheral::Peripherals::take::h9b2839bc06904a98+0xe> @ imm = #-0x2
;     }
 8000476:      	ldr	r0, [sp, #0x4]
 8000478:      	and	r0, r0, #0x1
 800047c:      	add	sp, #0x8
 800047e:      	pop	{r7, pc}

08000480 <cortex_m::peripheral::Peripherals::take::hdab330a91a507ad0>:
;     pub fn take() -> Option<Self> {
 8000480:      	push	{r7, lr}
 8000482:      	mov	r7, sp
 8000484:      	sub	sp, #0x8
;         interrupt::free(|_| {
 8000486:      	bl	0x80002ce <cortex_m::interrupt::free::h41ef0c556e6c3a8d> @ imm = #-0x1bc
 800048a:      	str	r0, [sp, #0x4]
 800048c:      	b	0x800048e <cortex_m::peripheral::Peripherals::take::hdab330a91a507ad0+0xe> @ imm = #-0x2
;     }
 800048e:      	ldr	r0, [sp, #0x4]
 8000490:      	and	r0, r0, #0x1
 8000494:      	add	sp, #0x8
 8000496:      	pop	{r7, pc}

08000498 <cortex_m::peripheral::Peripherals::steal::h0433bd2864e01249>:
;         TAKEN = true;
 8000498:      	movw	r1, #0x1
 800049c:      	movt	r1, #0x2000
 80004a0:      	movs	r0, #0x1
 80004a2:      	strb	r0, [r1]
;     }
 80004a4:      	bx	lr

080004a6 <cortex_m::peripheral::Peripherals::steal::h84a1d7d97c2d74d2>:
;     pub unsafe fn steal() -> Self {
 80004a6:      	push	{r7, lr}
 80004a8:      	mov	r7, sp
;         cortex_m_0_7::peripheral::Peripherals::steal();
 80004aa:      	bl	0x8000498 <cortex_m::peripheral::Peripherals::steal::h0433bd2864e01249> @ imm = #-0x16
 80004ae:      	b	0x80004b0 <cortex_m::peripheral::Peripherals::steal::h84a1d7d97c2d74d2+0xa> @ imm = #-0x2
;         core::mem::transmute(())
 80004b0:      	b	0x80004b2 <cortex_m::peripheral::Peripherals::steal::h84a1d7d97c2d74d2+0xc> @ imm = #-0x2
;     }
 80004b2:      	pop	{r7, pc}

080004b4 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h8f38ef515d6d551b>:
;         cortex_m::interrupt::free(|_| {
 80004b4:      	push	{r7, lr}
 80004b6:      	mov	r7, sp
 80004b8:      	sub	sp, #0x10
 80004ba:      	str	r0, [sp, #0xc]
;             if unsafe { DEVICE_PERIPHERALS } {
 80004bc:      	movw	r0, #0x0
 80004c0:      	movt	r0, #0x2000
 80004c4:      	ldrb	r0, [r0]
 80004c6:      	lsls	r0, r0, #0x1f
 80004c8:      	cbnz	r0, 0x80004d2 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h8f38ef515d6d551b+0x1e> @ imm = #0x6
 80004ca:      	b	0x80004cc <stm32f3::stm32f303::Peripherals::take::{{closure}}::h8f38ef515d6d551b+0x18> @ imm = #-0x2
;                 Some(unsafe { Peripherals::steal() })
 80004cc:      	bl	0x80002c0 <stm32f3::stm32f303::Peripherals::steal::h4d6abfda10d2dced> @ imm = #-0x210
 80004d0:      	b	0x80004e2 <stm32f3::stm32f303::Peripherals::take::{{closure}}::h8f38ef515d6d551b+0x2e> @ imm = #0xe
 80004d2:      	movs	r0, #0x0
;                 None
 80004d4:      	strb	r0, [r7, #-9]
;             if unsafe { DEVICE_PERIPHERALS } {
 80004d8:      	b	0x80004da <stm32f3::stm32f303::Peripherals::take::{{closure}}::h8f38ef515d6d551b+0x26> @ imm = #-0x2
;         cortex_m::interrupt::free(|_| {
 80004da:      	ldrb	r0, [r7, #-9]
 80004de:      	add	sp, #0x10
 80004e0:      	pop	{r7, pc}
 80004e2:      	movs	r0, #0x1
;                 Some(unsafe { Peripherals::steal() })
 80004e4:      	strb	r0, [r7, #-9]
;             if unsafe { DEVICE_PERIPHERALS } {
 80004e8:      	b	0x80004da <stm32f3::stm32f303::Peripherals::take::{{closure}}::h8f38ef515d6d551b+0x26> @ imm = #-0x12

080004ea <core::option::Option<T>::unwrap::h58e22e9326cc982c>:
 80004ea:      	push	{r7, lr}
 80004ec:      	mov	r7, sp
 80004ee:      	sub	sp, #0x10
 80004f0:      	str	r1, [sp, #0x4]
 80004f2:      	strb	r0, [r7, #-5]
 80004f6:      	ldrb	r1, [r7, #-5]
 80004fa:      	lsls	r0, r1, #0x1f
 80004fc:      	cbz	r0, 0x8000504 <core::option::Option<T>::unwrap::h58e22e9326cc982c+0x1a> @ imm = #0x4
 80004fe:      	b	0x8000500 <core::option::Option<T>::unwrap::h58e22e9326cc982c+0x16> @ imm = #-0x2
 8000500:      	b	0x8000516 <core::option::Option<T>::unwrap::h58e22e9326cc982c+0x2c> @ imm = #0x12
 8000502:      	trap
 8000504:      	ldr	r2, [sp, #0x4]
 8000506:      	movw	r0, #0x3874
 800050a:      	movt	r0, #0x800
 800050e:      	movs	r1, #0x2b
 8000510:      	bl	0x8001a9c <core::panicking::panic::h3d259cefe3983ab7> @ imm = #0x1588
 8000514:      	trap
 8000516:      	add	sp, #0x10
 8000518:      	pop	{r7, pc}

0800051a <core::option::Option<T>::unwrap::hd299abc6d1b78e10>:
 800051a:      	push	{r7, lr}
 800051c:      	mov	r7, sp
 800051e:      	sub	sp, #0x10
 8000520:      	str	r1, [sp, #0x4]
 8000522:      	strb	r0, [r7, #-5]
 8000526:      	ldrb	r1, [r7, #-5]
 800052a:      	lsls	r0, r1, #0x1f
 800052c:      	cbz	r0, 0x8000534 <core::option::Option<T>::unwrap::hd299abc6d1b78e10+0x1a> @ imm = #0x4
 800052e:      	b	0x8000530 <core::option::Option<T>::unwrap::hd299abc6d1b78e10+0x16> @ imm = #-0x2
 8000530:      	b	0x8000546 <core::option::Option<T>::unwrap::hd299abc6d1b78e10+0x2c> @ imm = #0x12
 8000532:      	trap
 8000534:      	ldr	r2, [sp, #0x4]
 8000536:      	movw	r0, #0x3874
 800053a:      	movt	r0, #0x800
 800053e:      	movs	r1, #0x2b
 8000540:      	bl	0x8001a9c <core::panicking::panic::h3d259cefe3983ab7> @ imm = #0x1558
 8000544:      	trap
 8000546:      	add	sp, #0x10
 8000548:      	pop	{r7, pc}

0800054a <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9>:
;     pub fn new<PE8Mode, PE9Mode, PE10Mode, PE11Mode, PE12Mode, PE13Mode, PE14Mode, PE15Mode>(
 800054a:      	push	{r4, r5, r6, r7, lr}
 800054c:      	add	r7, sp, #0xc
 800054e:      	str	r11, [sp, #-4]!
 8000552:      	sub	sp, #0x78
 8000554:      	str	r2, [sp, #0x44]
 8000556:      	mov	r2, r1
 8000558:      	ldr	r1, [sp, #0x44]
 800055a:      	str	r2, [sp, #0x48]
 800055c:      	mov	r2, r0
;         let mut leds = Leds {
 800055e:      	ldr	r0, [sp, #0x48]
 8000560:      	str	r2, [sp, #0x4c]
 8000562:      	str	r0, [sp, #0x70]
 8000564:      	str	r1, [sp, #0x74]
;             ld3: pe9
 8000566:      	bl	0x80009ac <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h019e9811e10191b9E> @ imm = #0x442
 800056a:      	b	0x800056c <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x22> @ imm = #-0x2
 800056c:      	bl	0x80011fa <_ZN13stm32f3xx_hal4gpio5gpioe50PE9$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h9ed1b7f2e794ada5E> @ imm = #0xc8a
 8000570:      	str	r0, [sp, #0x40]
 8000572:      	b	0x8000574 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x2a> @ imm = #-0x2
 8000574:      	ldr	r0, [sp, #0x40]
 8000576:      	bl	0x80007ac <switch_hal::IntoSwitch::into_active_high_switch::h6175990fbdbd1119> @ imm = #0x232
 800057a:      	str	r0, [sp, #0x3c]
 800057c:      	b	0x800057e <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x34> @ imm = #-0x2
;             ld4: pe8
 800057e:      	ldr	r1, [sp, #0x44]
 8000580:      	ldr	r0, [sp, #0x48]
 8000582:      	bl	0x800087e <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h9943e0eecf97e889E> @ imm = #0x2f8
 8000586:      	b	0x8000588 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x3e> @ imm = #-0x2
 8000588:      	bl	0x80011ea <_ZN13stm32f3xx_hal4gpio5gpioe50PE8$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h74b006977a86a9e1E> @ imm = #0xc5e
 800058c:      	str	r0, [sp, #0x38]
 800058e:      	b	0x8000590 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x46> @ imm = #-0x2
 8000590:      	ldr	r0, [sp, #0x38]
 8000592:      	bl	0x80007ac <switch_hal::IntoSwitch::into_active_high_switch::h6175990fbdbd1119> @ imm = #0x216
 8000596:      	str	r0, [sp, #0x34]
 8000598:      	b	0x800059a <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x50> @ imm = #-0x2
;             ld5: pe10
 800059a:      	ldr	r1, [sp, #0x44]
 800059c:      	ldr	r0, [sp, #0x48]
 800059e:      	bl	0x8000ada <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h61babf500f96e5e8E> @ imm = #0x538
 80005a2:      	b	0x80005a4 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x5a> @ imm = #-0x2
 80005a4:      	bl	0x800120a <_ZN13stm32f3xx_hal4gpio5gpioe51PE10$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hf058a1ec28d973b8E> @ imm = #0xc62
 80005a8:      	str	r0, [sp, #0x30]
 80005aa:      	b	0x80005ac <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x62> @ imm = #-0x2
 80005ac:      	ldr	r0, [sp, #0x30]
 80005ae:      	bl	0x80007ac <switch_hal::IntoSwitch::into_active_high_switch::h6175990fbdbd1119> @ imm = #0x1fa
 80005b2:      	str	r0, [sp, #0x2c]
 80005b4:      	b	0x80005b6 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x6c> @ imm = #-0x2
;             ld6: pe15
 80005b6:      	ldr	r1, [sp, #0x44]
 80005b8:      	ldr	r0, [sp, #0x48]
 80005ba:      	bl	0x80010c0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h4d728f495f02f8d8E> @ imm = #0xb02
 80005be:      	b	0x80005c0 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x76> @ imm = #-0x2
 80005c0:      	bl	0x800125a <_ZN13stm32f3xx_hal4gpio5gpioe51PE15$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h5b3467f741aa91d2E> @ imm = #0xc96
 80005c4:      	str	r0, [sp, #0x28]
 80005c6:      	b	0x80005c8 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x7e> @ imm = #-0x2
 80005c8:      	ldr	r0, [sp, #0x28]
 80005ca:      	bl	0x80007ac <switch_hal::IntoSwitch::into_active_high_switch::h6175990fbdbd1119> @ imm = #0x1de
 80005ce:      	str	r0, [sp, #0x24]
 80005d0:      	b	0x80005d2 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x88> @ imm = #-0x2
;             ld7: pe11
 80005d2:      	ldr	r1, [sp, #0x44]
 80005d4:      	ldr	r0, [sp, #0x48]
 80005d6:      	bl	0x8000c08 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h7132cc0865dca8a7E> @ imm = #0x62e
 80005da:      	b	0x80005dc <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x92> @ imm = #-0x2
 80005dc:      	bl	0x800121a <_ZN13stm32f3xx_hal4gpio5gpioe51PE11$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h63ea87176830db48E> @ imm = #0xc3a
 80005e0:      	str	r0, [sp, #0x20]
 80005e2:      	b	0x80005e4 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x9a> @ imm = #-0x2
 80005e4:      	ldr	r0, [sp, #0x20]
 80005e6:      	bl	0x80007ac <switch_hal::IntoSwitch::into_active_high_switch::h6175990fbdbd1119> @ imm = #0x1c2
 80005ea:      	str	r0, [sp, #0x1c]
 80005ec:      	b	0x80005ee <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0xa4> @ imm = #-0x2
;             ld8: pe14
 80005ee:      	ldr	r1, [sp, #0x44]
 80005f0:      	ldr	r0, [sp, #0x48]
 80005f2:      	bl	0x8000f92 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h1f6e6bb6b698bb39E> @ imm = #0x99c
 80005f6:      	b	0x80005f8 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0xae> @ imm = #-0x2
 80005f8:      	bl	0x800124a <_ZN13stm32f3xx_hal4gpio5gpioe51PE14$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h61091b22b577ae04E> @ imm = #0xc4e
 80005fc:      	str	r0, [sp, #0x18]
 80005fe:      	b	0x8000600 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0xb6> @ imm = #-0x2
 8000600:      	ldr	r0, [sp, #0x18]
 8000602:      	bl	0x80007ac <switch_hal::IntoSwitch::into_active_high_switch::h6175990fbdbd1119> @ imm = #0x1a6
 8000606:      	str	r0, [sp, #0x14]
 8000608:      	b	0x800060a <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0xc0> @ imm = #-0x2
;             ld9: pe12
 800060a:      	ldr	r1, [sp, #0x44]
 800060c:      	ldr	r0, [sp, #0x48]
 800060e:      	bl	0x8000d36 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h34140654e4155836E> @ imm = #0x724
 8000612:      	b	0x8000614 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0xca> @ imm = #-0x2
 8000614:      	bl	0x800122a <_ZN13stm32f3xx_hal4gpio5gpioe51PE12$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h8f98289d1bd3e72bE> @ imm = #0xc12
 8000618:      	str	r0, [sp, #0x10]
 800061a:      	b	0x800061c <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0xd2> @ imm = #-0x2
 800061c:      	ldr	r0, [sp, #0x10]
 800061e:      	bl	0x80007ac <switch_hal::IntoSwitch::into_active_high_switch::h6175990fbdbd1119> @ imm = #0x18a
 8000622:      	str	r0, [sp, #0xc]
 8000624:      	b	0x8000626 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0xdc> @ imm = #-0x2
;             ld10: pe13
 8000626:      	ldr	r1, [sp, #0x44]
 8000628:      	ldr	r0, [sp, #0x48]
 800062a:      	bl	0x8000e64 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17he50e8b9386497713E> @ imm = #0x836
 800062e:      	b	0x8000630 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0xe6> @ imm = #-0x2
 8000630:      	bl	0x800123a <_ZN13stm32f3xx_hal4gpio5gpioe51PE13$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h18c300003d9bb308E> @ imm = #0xc06
 8000634:      	str	r0, [sp, #0x8]
 8000636:      	b	0x8000638 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0xee> @ imm = #-0x2
 8000638:      	ldr	r0, [sp, #0x8]
 800063a:      	bl	0x80007ac <switch_hal::IntoSwitch::into_active_high_switch::h6175990fbdbd1119> @ imm = #0x16e
 800063e:      	str	r0, [sp, #0x4]
 8000640:      	b	0x8000642 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0xf8> @ imm = #-0x2
;         let mut leds = Leds {
 8000642:      	ldr	r0, [sp, #0x4c]
 8000644:      	ldr	r1, [sp, #0x4]
 8000646:      	ldr	r2, [sp, #0xc]
 8000648:      	ldr	r3, [sp, #0x14]
 800064a:      	ldr.w	r12, [sp, #0x1c]
 800064e:      	ldr.w	lr, [sp, #0x24]
 8000652:      	ldr	r4, [sp, #0x2c]
 8000654:      	ldr	r5, [sp, #0x34]
 8000656:      	ldr	r6, [sp, #0x3c]
 8000658:      	strb	r6, [r0]
 800065a:      	strb	r5, [r0, #0x1]
 800065c:      	strb	r4, [r0, #0x2]
 800065e:      	strb.w	lr, [r0, #0x3]
 8000662:      	strb.w	r12, [r0, #0x4]
 8000666:      	strb	r3, [r0, #0x5]
 8000668:      	strb	r2, [r0, #0x6]
 800066a:      	strb	r1, [r0, #0x7]
;         leds.ld3.off().ok();
 800066c:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::hf513086242e81060> @ imm = #0xb8
 8000670:      	b	0x8000672 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x128> @ imm = #-0x2
 8000672:      	bl	0x80006f0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hc387fe54d9638059E> @ imm = #0x7a
 8000676:      	b	0x8000678 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x12e> @ imm = #-0x2
;         leds.ld4.off().ok();
 8000678:      	ldr	r0, [sp, #0x4c]
 800067a:      	adds	r0, #0x1
 800067c:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::hf513086242e81060> @ imm = #0xa8
 8000680:      	b	0x8000682 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x138> @ imm = #-0x2
 8000682:      	bl	0x80006f0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hc387fe54d9638059E> @ imm = #0x6a
 8000686:      	b	0x8000688 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x13e> @ imm = #-0x2
;         leds.ld5.off().ok();
 8000688:      	ldr	r0, [sp, #0x4c]
 800068a:      	adds	r0, #0x2
 800068c:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::hf513086242e81060> @ imm = #0x98
 8000690:      	b	0x8000692 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x148> @ imm = #-0x2
 8000692:      	bl	0x80006f0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hc387fe54d9638059E> @ imm = #0x5a
 8000696:      	b	0x8000698 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x14e> @ imm = #-0x2
;         leds.ld6.off().ok();
 8000698:      	ldr	r0, [sp, #0x4c]
 800069a:      	adds	r0, #0x3
 800069c:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::hf513086242e81060> @ imm = #0x88
 80006a0:      	b	0x80006a2 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x158> @ imm = #-0x2
 80006a2:      	bl	0x80006f0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hc387fe54d9638059E> @ imm = #0x4a
 80006a6:      	b	0x80006a8 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x15e> @ imm = #-0x2
;         leds.ld7.off().ok();
 80006a8:      	ldr	r0, [sp, #0x4c]
 80006aa:      	adds	r0, #0x4
 80006ac:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::hf513086242e81060> @ imm = #0x78
 80006b0:      	b	0x80006b2 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x168> @ imm = #-0x2
 80006b2:      	bl	0x80006f0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hc387fe54d9638059E> @ imm = #0x3a
 80006b6:      	b	0x80006b8 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x16e> @ imm = #-0x2
;         leds.ld8.off().ok();
 80006b8:      	ldr	r0, [sp, #0x4c]
 80006ba:      	adds	r0, #0x5
 80006bc:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::hf513086242e81060> @ imm = #0x68
 80006c0:      	b	0x80006c2 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x178> @ imm = #-0x2
 80006c2:      	bl	0x80006f0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hc387fe54d9638059E> @ imm = #0x2a
 80006c6:      	b	0x80006c8 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x17e> @ imm = #-0x2
;         leds.ld9.off().ok();
 80006c8:      	ldr	r0, [sp, #0x4c]
 80006ca:      	adds	r0, #0x6
 80006cc:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::hf513086242e81060> @ imm = #0x58
 80006d0:      	b	0x80006d2 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x188> @ imm = #-0x2
 80006d2:      	bl	0x80006f0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hc387fe54d9638059E> @ imm = #0x1a
 80006d6:      	b	0x80006d8 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x18e> @ imm = #-0x2
;         leds.ld10.off().ok();
 80006d8:      	ldr	r0, [sp, #0x4c]
 80006da:      	adds	r0, #0x7
 80006dc:      	bl	0x8000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::hf513086242e81060> @ imm = #0x48
 80006e0:      	b	0x80006e2 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x198> @ imm = #-0x2
 80006e2:      	bl	0x80006f0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hc387fe54d9638059E> @ imm = #0xa
 80006e6:      	b	0x80006e8 <stm32f3_discovery::leds::Leds::new::h6b09ce29ec63bba9+0x19e> @ imm = #-0x2
;     }
 80006e8:      	add	sp, #0x78
 80006ea:      	ldr	r11, [sp], #4
 80006ee:      	pop	{r4, r5, r6, r7, pc}

080006f0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hc387fe54d9638059E>:
 80006f0:      	sub	sp, #0xc
 80006f2:      	movs	r0, #0x1
 80006f4:      	cbnz	r0, 0x80006fc <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hc387fe54d9638059E+0xc> @ imm = #0x4
 80006f6:      	b	0x80006f8 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hc387fe54d9638059E+0x8> @ imm = #-0x2
 80006f8:      	b	0x8000704 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hc387fe54d9638059E+0x14> @ imm = #0x8
 80006fa:      	trap
 80006fc:      	movs	r0, #0x1
 80006fe:      	strb.w	r0, [sp, #0x3]
 8000702:      	b	0x800070e <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hc387fe54d9638059E+0x1e> @ imm = #0x8
 8000704:      	movs	r0, #0x0
 8000706:      	strb.w	r0, [sp, #0x3]
 800070a:      	b	0x800070c <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hc387fe54d9638059E+0x1c> @ imm = #-0x2
 800070c:      	b	0x800070e <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hc387fe54d9638059E+0x1e> @ imm = #-0x2
 800070e:      	ldrb.w	r0, [sp, #0x3]
 8000712:      	add	sp, #0xc
 8000714:      	bx	lr

08000716 <switch_hal::Switch<IoPin,ActiveLevel>::new::h9ecfb938b6c0ddec>:
;     pub fn new(pin: IoPin) -> Self {
 8000716:      	sub	sp, #0x4
 8000718:      	strb.w	r0, [sp, #0x3]
;         Switch {
 800071c:      	strb.w	r0, [sp, #0x2]
;     }
 8000720:      	ldrb.w	r0, [sp, #0x2]
 8000724:      	add	sp, #0x4
 8000726:      	bx	lr

08000728 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::hf513086242e81060>:
;     fn off(&mut self) -> Result<(), Self::Error> {
 8000728:      	push	{r7, lr}
 800072a:      	mov	r7, sp
 800072c:      	sub	sp, #0x8
 800072e:      	str	r0, [sp, #0x4]
;         self.pin.set_low()
 8000730:      	bl	0x80007c4 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17hc08889fcaba6e218E> @ imm = #0x90
 8000734:      	b	0x8000736 <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::hf513086242e81060+0xe> @ imm = #-0x2
;     }
 8000736:      	add	sp, #0x8
 8000738:      	pop	{r7, pc}

0800073a <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h6020ae4b57e43c85>:
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 800073a:      	sub	sp, #0x10
 800073c:      	str	r0, [sp]
 800073e:      	str	r1, [sp, #0x4]
 8000740:      	ldrb	r0, [r0]
 8000742:      	str	r0, [sp, #0x8]
 8000744:      	ldrb	r1, [r1]
 8000746:      	str	r1, [sp, #0xc]
 8000748:      	subs	r0, r0, r1
 800074a:      	clz	r0, r0
 800074e:      	lsrs	r0, r0, #0x5
 8000750:      	add	sp, #0x10
 8000752:      	bx	lr

08000754 <cortex_m::register::primask::read::h883d9b7a9f297328>:
; pub fn read() -> Primask {
 8000754:      	push	{r7, lr}
 8000756:      	mov	r7, sp
 8000758:      	sub	sp, #0x10
;     let r: u32 = call_asm!(__primask_r() -> u32);
 800075a:      	bl	0x800194c <__primask_r> @ imm = #0x11ee
 800075e:      	mov	r1, r0
 8000760:      	str	r1, [sp, #0x4]
 8000762:      	str	r0, [sp, #0xc]
 8000764:      	b	0x8000766 <cortex_m::register::primask::read::h883d9b7a9f297328+0x12> @ imm = #-0x2
;     if r & (1 << 0) == (1 << 0) {
 8000766:      	ldr	r0, [sp, #0x4]
 8000768:      	lsls	r0, r0, #0x1f
 800076a:      	cbnz	r0, 0x8000776 <cortex_m::register::primask::read::h883d9b7a9f297328+0x22> @ imm = #0x8
 800076c:      	b	0x800076e <cortex_m::register::primask::read::h883d9b7a9f297328+0x1a> @ imm = #-0x2
 800076e:      	movs	r0, #0x0
;         Primask::Active
 8000770:      	strb	r0, [r7, #-5]
;     if r & (1 << 0) == (1 << 0) {
 8000774:      	b	0x800077e <cortex_m::register::primask::read::h883d9b7a9f297328+0x2a> @ imm = #0x6
 8000776:      	movs	r0, #0x1
;         Primask::Inactive
 8000778:      	strb	r0, [r7, #-5]
;     if r & (1 << 0) == (1 << 0) {
 800077c:      	b	0x800077e <cortex_m::register::primask::read::h883d9b7a9f297328+0x2a> @ imm = #-0x2
; }
 800077e:      	ldrb	r0, [r7, #-5]
 8000782:      	add	sp, #0x10
 8000784:      	pop	{r7, pc}

08000786 <cortex_m::register::primask::Primask::is_active::h565f19b27e765733>:
;     pub fn is_active(self) -> bool {
 8000786:      	push	{r7, lr}
 8000788:      	mov	r7, sp
 800078a:      	sub	sp, #0x8
 800078c:      	strb	r0, [r7, #-1]
;         self == Primask::Active
 8000790:      	movw	r1, #0x389f
 8000794:      	movt	r1, #0x800
 8000798:      	subs	r0, r7, #0x1
 800079a:      	bl	0x800073a <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h6020ae4b57e43c85> @ imm = #-0x64
 800079e:      	str	r0, [sp]
 80007a0:      	b	0x80007a2 <cortex_m::register::primask::Primask::is_active::h565f19b27e765733+0x1c> @ imm = #-0x2
;     }
 80007a2:      	ldr	r0, [sp]
 80007a4:      	and	r0, r0, #0x1
 80007a8:      	add	sp, #0x8
 80007aa:      	pop	{r7, pc}

080007ac <switch_hal::IntoSwitch::into_active_high_switch::h6175990fbdbd1119>:
;     fn into_active_high_switch(self) -> Switch<Self, ActiveHigh>
 80007ac:      	push	{r7, lr}
 80007ae:      	mov	r7, sp
 80007b0:      	sub	sp, #0x8
 80007b2:      	strb	r0, [r7, #-1]
;         self.into_switch::<ActiveHigh>()
 80007b6:      	bl	0x800126a <<T as switch_hal::IntoSwitch>::into_switch::h703928b8c5297d76> @ imm = #0xab0
 80007ba:      	str	r0, [sp]
 80007bc:      	b	0x80007be <switch_hal::IntoSwitch::into_active_high_switch::h6175990fbdbd1119+0x12> @ imm = #-0x2
;     }
 80007be:      	ldr	r0, [sp]
 80007c0:      	add	sp, #0x8
 80007c2:      	pop	{r7, pc}

080007c4 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17hc08889fcaba6e218E>:
;                         fn set_low(&mut self) -> Result<(), Self::Error> {
 80007c4:      	push	{r7, lr}
 80007c6:      	mov	r7, sp
 80007c8:      	sub	sp, #0x30
 80007ca:      	str	r0, [sp, #0x8]
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 80007cc:      	b	0x80007ce <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17hc08889fcaba6e218E+0xa> @ imm = #-0x2
 80007ce:      	add	r0, sp, #0x8
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 80007d0:      	str	r0, [sp, #0x10]
 80007d2:      	ldr	r0, [sp, #0x10]
 80007d4:      	movw	r1, #0x1018
 80007d8:      	movt	r1, #0x4800
 80007dc:      	str	r1, [sp, #0x4]
 80007de:      	str	r1, [sp, #0x1c]
 80007e0:      	str	r0, [sp, #0x20]
 80007e2:      	movs	r1, #0x0
;         self.register.set(f(&mut W {bits: Self::reset_value(), _reg: marker::PhantomData}).bits);
 80007e4:      	str	r1, [sp, #0x18]
 80007e6:      	add	r1, sp, #0x18
 80007e8:      	str	r1, [sp, #0x14]
 80007ea:      	ldr	r1, [sp, #0x14]
 80007ec:      	bl	0x8000806 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h4b2370890aeda784E> @ imm = #0x16
 80007f0:      	mov	r1, r0
 80007f2:      	ldr	r0, [sp, #0x4]
 80007f4:      	ldr	r1, [r1]
 80007f6:      	str	r0, [sp, #0x24]
 80007f8:      	str	r1, [sp, #0x28]
 80007fa:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80007fc:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0xd3c
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 8000800:      	b	0x8000802 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17hc08889fcaba6e218E+0x3e> @ imm = #-0x2
;                         }
 8000802:      	add	sp, #0x30
 8000804:      	pop	{r7, pc}

08000806 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h4b2370890aeda784E>:
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 8000806:      	push	{r7, lr}
 8000808:      	mov	r7, sp
 800080a:      	sub	sp, #0x20
 800080c:      	str	r1, [sp, #0x8]
 800080e:      	str	r0, [sp, #0x10]
 8000810:      	str	r1, [sp, #0x14]
 8000812:      	ldr	r0, [sp, #0x10]
 8000814:      	ldr	r0, [r0]
 8000816:      	ldrb	r0, [r0]
 8000818:      	add.w	r1, r0, #0x10
 800081c:      	uxtb	r0, r1
 800081e:      	mov	r2, r1
 8000820:      	str	r2, [sp, #0xc]
 8000822:      	cmp	r0, r1
 8000824:      	bne	0x800083c <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h4b2370890aeda784E+0x36> @ imm = #0x14
 8000826:      	b	0x8000828 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h4b2370890aeda784E+0x22> @ imm = #-0x2
 8000828:      	ldr	r0, [sp, #0xc]
 800082a:      	and	r2, r0, #0x1f
 800082e:      	movs	r1, #0x1
 8000830:      	lsls	r1, r2
 8000832:      	str	r1, [sp, #0x4]
 8000834:      	tst.w	r0, #0xe0
 8000838:      	bne	0x8000860 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h4b2370890aeda784E+0x5a> @ imm = #0x24
 800083a:      	b	0x8000854 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h4b2370890aeda784E+0x4e> @ imm = #0x16
 800083c:      	movw	r0, #0x3910
 8000840:      	movt	r0, #0x800
 8000844:      	movw	r2, #0x3900
 8000848:      	movt	r2, #0x800
 800084c:      	movs	r1, #0x1c
 800084e:      	bl	0x8001a9c <core::panicking::panic::h3d259cefe3983ab7> @ imm = #0x124a
 8000852:      	trap
 8000854:      	ldr	r0, [sp, #0x4]
 8000856:      	ldr	r1, [sp, #0x8]
 8000858:      	str	r1, [sp, #0x18]
 800085a:      	str	r0, [sp, #0x1c]
;         self.bits = bits;
 800085c:      	str	r0, [r1]
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 800085e:      	b	0x8000878 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h4b2370890aeda784E+0x72> @ imm = #0x16
 8000860:      	movw	r0, #0x3930
 8000864:      	movt	r0, #0x800
 8000868:      	movw	r2, #0x3900
 800086c:      	movt	r2, #0x800
 8000870:      	movs	r1, #0x23
 8000872:      	bl	0x8001a9c <core::panicking::panic::h3d259cefe3983ab7> @ imm = #0x1226
 8000876:      	trap
 8000878:      	ldr	r0, [sp, #0x8]
 800087a:      	add	sp, #0x20
 800087c:      	pop	{r7, pc}

0800087e <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h9943e0eecf97e889E>:
;                             pub fn into_push_pull_output(
 800087e:      	push	{r7, lr}
 8000880:      	mov	r7, sp
 8000882:      	sub	sp, #0x70
 8000884:      	str	r1, [sp, #0x4]
 8000886:      	str	r0, [sp, #0x10]
 8000888:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800088a:      	bl	0x800143e <stm32f3xx_hal::gpio::gpioe::MODER::moder::h419a8cca1ee5ec03> @ imm = #0xbb0
 800088e:      	str	r0, [sp, #0x8]
 8000890:      	b	0x8000892 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h9943e0eecf97e889E+0x14> @ imm = #-0x2
 8000892:      	ldr	r0, [sp, #0x8]
 8000894:      	str	r0, [sp, #0x28]
 8000896:      	str	r0, [sp, #0x30]
 8000898:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800089a:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0xf16
;         let bits = self.register.get();
 800089e:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80008a0:      	str	r0, [sp, #0x20]
 80008a2:      	str	r0, [sp, #0x24]
 80008a4:      	add	r0, sp, #0x20
 80008a6:      	str	r0, [sp, #0x18]
 80008a8:      	add	r0, sp, #0x24
 80008aa:      	str	r0, [sp, #0x1c]
 80008ac:      	ldr	r0, [sp, #0x18]
 80008ae:      	ldr	r1, [sp, #0x1c]
 80008b0:      	bl	0x8000958 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h2fefa016bf9a837fE> @ imm = #0xa4
 80008b4:      	mov	r1, r0
 80008b6:      	ldr	r0, [sp, #0x8]
 80008b8:      	ldr	r1, [r1]
 80008ba:      	str	r0, [sp, #0x38]
 80008bc:      	str	r1, [sp, #0x3c]
 80008be:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80008c0:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0xc78
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80008c4:      	b	0x80008c6 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h9943e0eecf97e889E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80008c6:      	ldr	r0, [sp, #0x4]
 80008c8:      	bl	0x8001450 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h5a4856692425826a> @ imm = #0xb84
 80008cc:      	str	r0, [sp]
 80008ce:      	b	0x80008d0 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h9943e0eecf97e889E+0x52> @ imm = #-0x2
 80008d0:      	ldr	r0, [sp]
 80008d2:      	str	r0, [sp, #0x54]
 80008d4:      	str	r0, [sp, #0x5c]
 80008d6:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80008d8:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0xed8
;         let bits = self.register.get();
 80008dc:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80008de:      	str	r0, [sp, #0x4c]
 80008e0:      	str	r0, [sp, #0x50]
 80008e2:      	add	r0, sp, #0x4c
 80008e4:      	str	r0, [sp, #0x44]
 80008e6:      	add	r0, sp, #0x50
 80008e8:      	str	r0, [sp, #0x48]
 80008ea:      	ldr	r0, [sp, #0x44]
 80008ec:      	ldr	r1, [sp, #0x48]
 80008ee:      	bl	0x8000908 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h2ee6d69a4ed72a74E> @ imm = #0x16
 80008f2:      	mov	r1, r0
 80008f4:      	ldr	r0, [sp]
 80008f6:      	ldr	r1, [r1]
 80008f8:      	str	r0, [sp, #0x64]
 80008fa:      	str	r1, [sp, #0x68]
 80008fc:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80008fe:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0xc3a
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000902:      	b	0x8000904 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h9943e0eecf97e889E+0x86> @ imm = #-0x2
;                             }
 8000904:      	add	sp, #0x70
 8000906:      	pop	{r7, pc}

08000908 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h2ee6d69a4ed72a74E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000908:      	push	{r7, lr}
 800090a:      	mov	r7, sp
 800090c:      	sub	sp, #0x38
 800090e:      	str	r0, [sp, #0x10]
 8000910:      	str	r1, [sp, #0x14]
 8000912:      	str	r1, [sp, #0x1c]
;         OT8_W { w: self }
 8000914:      	str	r1, [sp, #0x18]
;     }
 8000916:      	ldr	r0, [sp, #0x18]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000918:      	str	r0, [sp, #0x8]
 800091a:      	b	0x800091c <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h2ee6d69a4ed72a74E+0x14> @ imm = #-0x2
 800091c:      	ldr	r1, [sp, #0x8]
 800091e:      	str	r1, [sp, #0x24]
 8000920:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000922:      	strb	r0, [r7, #-21]
 8000926:      	ldrb	r0, [r7, #-21]
 800092a:      	str	r1, [sp, #0x28]
 800092c:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000930:      	bl	0x8001282 <<T as core::convert::Into<U>>::into::ha4c3e50a541f856b> @ imm = #0x94e
 8000934:      	mov	r2, r0
 8000936:      	ldr	r0, [sp, #0x8]
 8000938:      	str	r0, [sp, #0x30]
 800093a:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
 800093e:      	ldr	r1, [sp, #0x30]
 8000940:      	ldr	r0, [r1]
 8000942:      	bic	r0, r0, #0x100
 8000946:      	orr.w	r0, r0, r2, lsl #8
 800094a:      	str	r0, [r1]
;         self.w
 800094c:      	ldr	r0, [sp, #0x30]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800094e:      	str	r0, [sp, #0x4]
 8000950:      	b	0x8000952 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h2ee6d69a4ed72a74E+0x4a> @ imm = #-0x2
 8000952:      	ldr	r0, [sp, #0x4]
 8000954:      	add	sp, #0x38
 8000956:      	pop	{r7, pc}

08000958 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h2fefa016bf9a837fE>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000958:      	push	{r7, lr}
 800095a:      	mov	r7, sp
 800095c:      	sub	sp, #0x38
 800095e:      	str	r0, [sp, #0x10]
 8000960:      	str	r1, [sp, #0x14]
 8000962:      	str	r1, [sp, #0x1c]
;         MODER8_W { w: self }
 8000964:      	str	r1, [sp, #0x18]
;     }
 8000966:      	ldr	r0, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000968:      	str	r0, [sp, #0x8]
 800096a:      	b	0x800096c <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h2fefa016bf9a837fE+0x14> @ imm = #-0x2
 800096c:      	ldr	r1, [sp, #0x8]
 800096e:      	str	r1, [sp, #0x24]
 8000970:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000972:      	strb	r0, [r7, #-21]
 8000976:      	ldrb	r0, [r7, #-21]
 800097a:      	str	r1, [sp, #0x28]
 800097c:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000980:      	bl	0x800129e <<T as core::convert::Into<U>>::into::h44c4f7c44b9e349c> @ imm = #0x91a
 8000984:      	mov	r2, r0
 8000986:      	ldr	r0, [sp, #0x8]
 8000988:      	str	r0, [sp, #0x30]
 800098a:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
 800098e:      	ldr	r1, [sp, #0x30]
 8000990:      	ldr	r0, [r1]
 8000992:      	bic	r0, r0, #0x30000
 8000996:      	and	r2, r2, #0x3
 800099a:      	orr.w	r0, r0, r2, lsl #16
 800099e:      	str	r0, [r1]
;         self.w
 80009a0:      	ldr	r0, [sp, #0x30]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80009a2:      	str	r0, [sp, #0x4]
 80009a4:      	b	0x80009a6 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h2fefa016bf9a837fE+0x4e> @ imm = #-0x2
 80009a6:      	ldr	r0, [sp, #0x4]
 80009a8:      	add	sp, #0x38
 80009aa:      	pop	{r7, pc}

080009ac <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h019e9811e10191b9E>:
;                             pub fn into_push_pull_output(
 80009ac:      	push	{r7, lr}
 80009ae:      	mov	r7, sp
 80009b0:      	sub	sp, #0x70
 80009b2:      	str	r1, [sp, #0x4]
 80009b4:      	str	r0, [sp, #0x10]
 80009b6:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80009b8:      	bl	0x800143e <stm32f3xx_hal::gpio::gpioe::MODER::moder::h419a8cca1ee5ec03> @ imm = #0xa82
 80009bc:      	str	r0, [sp, #0x8]
 80009be:      	b	0x80009c0 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h019e9811e10191b9E+0x14> @ imm = #-0x2
 80009c0:      	ldr	r0, [sp, #0x8]
 80009c2:      	str	r0, [sp, #0x28]
 80009c4:      	str	r0, [sp, #0x30]
 80009c6:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80009c8:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0xde8
;         let bits = self.register.get();
 80009cc:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80009ce:      	str	r0, [sp, #0x20]
 80009d0:      	str	r0, [sp, #0x24]
 80009d2:      	add	r0, sp, #0x20
 80009d4:      	str	r0, [sp, #0x18]
 80009d6:      	add	r0, sp, #0x24
 80009d8:      	str	r0, [sp, #0x1c]
 80009da:      	ldr	r0, [sp, #0x18]
 80009dc:      	ldr	r1, [sp, #0x1c]
 80009de:      	bl	0x8000a36 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3dea8344adae79c9E> @ imm = #0x54
 80009e2:      	mov	r1, r0
 80009e4:      	ldr	r0, [sp, #0x8]
 80009e6:      	ldr	r1, [r1]
 80009e8:      	str	r0, [sp, #0x38]
 80009ea:      	str	r1, [sp, #0x3c]
 80009ec:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80009ee:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0xb4a
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80009f2:      	b	0x80009f4 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h019e9811e10191b9E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80009f4:      	ldr	r0, [sp, #0x4]
 80009f6:      	bl	0x8001450 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h5a4856692425826a> @ imm = #0xa56
 80009fa:      	str	r0, [sp]
 80009fc:      	b	0x80009fe <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h019e9811e10191b9E+0x52> @ imm = #-0x2
 80009fe:      	ldr	r0, [sp]
 8000a00:      	str	r0, [sp, #0x54]
 8000a02:      	str	r0, [sp, #0x5c]
 8000a04:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000a06:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0xdaa
;         let bits = self.register.get();
 8000a0a:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000a0c:      	str	r0, [sp, #0x4c]
 8000a0e:      	str	r0, [sp, #0x50]
 8000a10:      	add	r0, sp, #0x4c
 8000a12:      	str	r0, [sp, #0x44]
 8000a14:      	add	r0, sp, #0x50
 8000a16:      	str	r0, [sp, #0x48]
 8000a18:      	ldr	r0, [sp, #0x44]
 8000a1a:      	ldr	r1, [sp, #0x48]
 8000a1c:      	bl	0x8000a8a <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb2b231ccac34ce44E> @ imm = #0x6a
 8000a20:      	mov	r1, r0
 8000a22:      	ldr	r0, [sp]
 8000a24:      	ldr	r1, [r1]
 8000a26:      	str	r0, [sp, #0x64]
 8000a28:      	str	r1, [sp, #0x68]
 8000a2a:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000a2c:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0xb0c
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000a30:      	b	0x8000a32 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h019e9811e10191b9E+0x86> @ imm = #-0x2
;                             }
 8000a32:      	add	sp, #0x70
 8000a34:      	pop	{r7, pc}

08000a36 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3dea8344adae79c9E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a36:      	push	{r7, lr}
 8000a38:      	mov	r7, sp
 8000a3a:      	sub	sp, #0x38
 8000a3c:      	str	r0, [sp, #0x10]
 8000a3e:      	str	r1, [sp, #0x14]
 8000a40:      	str	r1, [sp, #0x1c]
;         MODER9_W { w: self }
 8000a42:      	str	r1, [sp, #0x18]
;     }
 8000a44:      	ldr	r0, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a46:      	str	r0, [sp, #0x8]
 8000a48:      	b	0x8000a4a <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3dea8344adae79c9E+0x14> @ imm = #-0x2
 8000a4a:      	ldr	r1, [sp, #0x8]
 8000a4c:      	str	r1, [sp, #0x24]
 8000a4e:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000a50:      	strb	r0, [r7, #-21]
 8000a54:      	ldrb	r0, [r7, #-21]
 8000a58:      	str	r1, [sp, #0x28]
 8000a5a:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000a5e:      	bl	0x800129e <<T as core::convert::Into<U>>::into::h44c4f7c44b9e349c> @ imm = #0x83c
 8000a62:      	mov	r2, r0
 8000a64:      	ldr	r0, [sp, #0x8]
 8000a66:      	str	r0, [sp, #0x30]
 8000a68:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
 8000a6c:      	ldr	r1, [sp, #0x30]
 8000a6e:      	ldr	r0, [r1]
 8000a70:      	bic	r0, r0, #0xc0000
 8000a74:      	and	r2, r2, #0x3
 8000a78:      	orr.w	r0, r0, r2, lsl #18
 8000a7c:      	str	r0, [r1]
;         self.w
 8000a7e:      	ldr	r0, [sp, #0x30]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a80:      	str	r0, [sp, #0x4]
 8000a82:      	b	0x8000a84 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3dea8344adae79c9E+0x4e> @ imm = #-0x2
 8000a84:      	ldr	r0, [sp, #0x4]
 8000a86:      	add	sp, #0x38
 8000a88:      	pop	{r7, pc}

08000a8a <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb2b231ccac34ce44E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000a8a:      	push	{r7, lr}
 8000a8c:      	mov	r7, sp
 8000a8e:      	sub	sp, #0x38
 8000a90:      	str	r0, [sp, #0x10]
 8000a92:      	str	r1, [sp, #0x14]
 8000a94:      	str	r1, [sp, #0x1c]
;         OT9_W { w: self }
 8000a96:      	str	r1, [sp, #0x18]
;     }
 8000a98:      	ldr	r0, [sp, #0x18]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000a9a:      	str	r0, [sp, #0x8]
 8000a9c:      	b	0x8000a9e <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb2b231ccac34ce44E+0x14> @ imm = #-0x2
 8000a9e:      	ldr	r1, [sp, #0x8]
 8000aa0:      	str	r1, [sp, #0x24]
 8000aa2:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000aa4:      	strb	r0, [r7, #-21]
 8000aa8:      	ldrb	r0, [r7, #-21]
 8000aac:      	str	r1, [sp, #0x28]
 8000aae:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000ab2:      	bl	0x8001282 <<T as core::convert::Into<U>>::into::ha4c3e50a541f856b> @ imm = #0x7cc
 8000ab6:      	mov	r2, r0
 8000ab8:      	ldr	r0, [sp, #0x8]
 8000aba:      	str	r0, [sp, #0x30]
 8000abc:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
 8000ac0:      	ldr	r1, [sp, #0x30]
 8000ac2:      	ldr	r0, [r1]
 8000ac4:      	bic	r0, r0, #0x200
 8000ac8:      	orr.w	r0, r0, r2, lsl #9
 8000acc:      	str	r0, [r1]
;         self.w
 8000ace:      	ldr	r0, [sp, #0x30]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000ad0:      	str	r0, [sp, #0x4]
 8000ad2:      	b	0x8000ad4 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hb2b231ccac34ce44E+0x4a> @ imm = #-0x2
 8000ad4:      	ldr	r0, [sp, #0x4]
 8000ad6:      	add	sp, #0x38
 8000ad8:      	pop	{r7, pc}

08000ada <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h61babf500f96e5e8E>:
;                             pub fn into_push_pull_output(
 8000ada:      	push	{r7, lr}
 8000adc:      	mov	r7, sp
 8000ade:      	sub	sp, #0x70
 8000ae0:      	str	r1, [sp, #0x4]
 8000ae2:      	str	r0, [sp, #0x10]
 8000ae4:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ae6:      	bl	0x800143e <stm32f3xx_hal::gpio::gpioe::MODER::moder::h419a8cca1ee5ec03> @ imm = #0x954
 8000aea:      	str	r0, [sp, #0x8]
 8000aec:      	b	0x8000aee <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h61babf500f96e5e8E+0x14> @ imm = #-0x2
 8000aee:      	ldr	r0, [sp, #0x8]
 8000af0:      	str	r0, [sp, #0x54]
 8000af2:      	str	r0, [sp, #0x5c]
 8000af4:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000af6:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0xcba
;         let bits = self.register.get();
 8000afa:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000afc:      	str	r0, [sp, #0x4c]
 8000afe:      	str	r0, [sp, #0x50]
 8000b00:      	add	r0, sp, #0x4c
 8000b02:      	str	r0, [sp, #0x44]
 8000b04:      	add	r0, sp, #0x50
 8000b06:      	str	r0, [sp, #0x48]
 8000b08:      	ldr	r0, [sp, #0x44]
 8000b0a:      	ldr	r1, [sp, #0x48]
 8000b0c:      	bl	0x8000bb4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3619abad8c76e264E> @ imm = #0xa4
 8000b10:      	mov	r1, r0
 8000b12:      	ldr	r0, [sp, #0x8]
 8000b14:      	ldr	r1, [r1]
 8000b16:      	str	r0, [sp, #0x64]
 8000b18:      	str	r1, [sp, #0x68]
 8000b1a:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000b1c:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0xa1c
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b20:      	b	0x8000b22 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h61babf500f96e5e8E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b22:      	ldr	r0, [sp, #0x4]
 8000b24:      	bl	0x8001450 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h5a4856692425826a> @ imm = #0x928
 8000b28:      	str	r0, [sp]
 8000b2a:      	b	0x8000b2c <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h61babf500f96e5e8E+0x52> @ imm = #-0x2
 8000b2c:      	ldr	r0, [sp]
 8000b2e:      	str	r0, [sp, #0x28]
 8000b30:      	str	r0, [sp, #0x30]
 8000b32:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000b34:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0xc7c
;         let bits = self.register.get();
 8000b38:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000b3a:      	str	r0, [sp, #0x20]
 8000b3c:      	str	r0, [sp, #0x24]
 8000b3e:      	add	r0, sp, #0x20
 8000b40:      	str	r0, [sp, #0x18]
 8000b42:      	add	r0, sp, #0x24
 8000b44:      	str	r0, [sp, #0x1c]
 8000b46:      	ldr	r0, [sp, #0x18]
 8000b48:      	ldr	r1, [sp, #0x1c]
 8000b4a:      	bl	0x8000b64 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h26370bfb71596306E> @ imm = #0x16
 8000b4e:      	mov	r1, r0
 8000b50:      	ldr	r0, [sp]
 8000b52:      	ldr	r1, [r1]
 8000b54:      	str	r0, [sp, #0x38]
 8000b56:      	str	r1, [sp, #0x3c]
 8000b58:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000b5a:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0x9de
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b5e:      	b	0x8000b60 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h61babf500f96e5e8E+0x86> @ imm = #-0x2
;                             }
 8000b60:      	add	sp, #0x70
 8000b62:      	pop	{r7, pc}

08000b64 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h26370bfb71596306E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b64:      	push	{r7, lr}
 8000b66:      	mov	r7, sp
 8000b68:      	sub	sp, #0x38
 8000b6a:      	str	r0, [sp, #0x10]
 8000b6c:      	str	r1, [sp, #0x14]
 8000b6e:      	str	r1, [sp, #0x1c]
;         OT10_W { w: self }
 8000b70:      	str	r1, [sp, #0x18]
;     }
 8000b72:      	ldr	r0, [sp, #0x18]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b74:      	str	r0, [sp, #0x8]
 8000b76:      	b	0x8000b78 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h26370bfb71596306E+0x14> @ imm = #-0x2
 8000b78:      	ldr	r1, [sp, #0x8]
 8000b7a:      	str	r1, [sp, #0x24]
 8000b7c:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000b7e:      	strb	r0, [r7, #-21]
 8000b82:      	ldrb	r0, [r7, #-21]
 8000b86:      	str	r1, [sp, #0x28]
 8000b88:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000b8c:      	bl	0x8001282 <<T as core::convert::Into<U>>::into::ha4c3e50a541f856b> @ imm = #0x6f2
 8000b90:      	mov	r2, r0
 8000b92:      	ldr	r0, [sp, #0x8]
 8000b94:      	str	r0, [sp, #0x30]
 8000b96:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
 8000b9a:      	ldr	r1, [sp, #0x30]
 8000b9c:      	ldr	r0, [r1]
 8000b9e:      	bic	r0, r0, #0x400
 8000ba2:      	orr.w	r0, r0, r2, lsl #10
 8000ba6:      	str	r0, [r1]
;         self.w
 8000ba8:      	ldr	r0, [sp, #0x30]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000baa:      	str	r0, [sp, #0x4]
 8000bac:      	b	0x8000bae <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h26370bfb71596306E+0x4a> @ imm = #-0x2
 8000bae:      	ldr	r0, [sp, #0x4]
 8000bb0:      	add	sp, #0x38
 8000bb2:      	pop	{r7, pc}

08000bb4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3619abad8c76e264E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000bb4:      	push	{r7, lr}
 8000bb6:      	mov	r7, sp
 8000bb8:      	sub	sp, #0x38
 8000bba:      	str	r0, [sp, #0x10]
 8000bbc:      	str	r1, [sp, #0x14]
 8000bbe:      	str	r1, [sp, #0x1c]
;         MODER10_W { w: self }
 8000bc0:      	str	r1, [sp, #0x18]
;     }
 8000bc2:      	ldr	r0, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000bc4:      	str	r0, [sp, #0x8]
 8000bc6:      	b	0x8000bc8 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3619abad8c76e264E+0x14> @ imm = #-0x2
 8000bc8:      	ldr	r1, [sp, #0x8]
 8000bca:      	str	r1, [sp, #0x24]
 8000bcc:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000bce:      	strb	r0, [r7, #-21]
 8000bd2:      	ldrb	r0, [r7, #-21]
 8000bd6:      	str	r1, [sp, #0x28]
 8000bd8:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000bdc:      	bl	0x800129e <<T as core::convert::Into<U>>::into::h44c4f7c44b9e349c> @ imm = #0x6be
 8000be0:      	mov	r2, r0
 8000be2:      	ldr	r0, [sp, #0x8]
 8000be4:      	str	r0, [sp, #0x30]
 8000be6:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
 8000bea:      	ldr	r1, [sp, #0x30]
 8000bec:      	ldr	r0, [r1]
 8000bee:      	bic	r0, r0, #0x300000
 8000bf2:      	and	r2, r2, #0x3
 8000bf6:      	orr.w	r0, r0, r2, lsl #20
 8000bfa:      	str	r0, [r1]
;         self.w
 8000bfc:      	ldr	r0, [sp, #0x30]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000bfe:      	str	r0, [sp, #0x4]
 8000c00:      	b	0x8000c02 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3619abad8c76e264E+0x4e> @ imm = #-0x2
 8000c02:      	ldr	r0, [sp, #0x4]
 8000c04:      	add	sp, #0x38
 8000c06:      	pop	{r7, pc}

08000c08 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h7132cc0865dca8a7E>:
;                             pub fn into_push_pull_output(
 8000c08:      	push	{r7, lr}
 8000c0a:      	mov	r7, sp
 8000c0c:      	sub	sp, #0x70
 8000c0e:      	str	r1, [sp, #0x4]
 8000c10:      	str	r0, [sp, #0x10]
 8000c12:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c14:      	bl	0x800143e <stm32f3xx_hal::gpio::gpioe::MODER::moder::h419a8cca1ee5ec03> @ imm = #0x826
 8000c18:      	str	r0, [sp, #0x8]
 8000c1a:      	b	0x8000c1c <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h7132cc0865dca8a7E+0x14> @ imm = #-0x2
 8000c1c:      	ldr	r0, [sp, #0x8]
 8000c1e:      	str	r0, [sp, #0x54]
 8000c20:      	str	r0, [sp, #0x5c]
 8000c22:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000c24:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0xb8c
;         let bits = self.register.get();
 8000c28:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000c2a:      	str	r0, [sp, #0x4c]
 8000c2c:      	str	r0, [sp, #0x50]
 8000c2e:      	add	r0, sp, #0x4c
 8000c30:      	str	r0, [sp, #0x44]
 8000c32:      	add	r0, sp, #0x50
 8000c34:      	str	r0, [sp, #0x48]
 8000c36:      	ldr	r0, [sp, #0x44]
 8000c38:      	ldr	r1, [sp, #0x48]
 8000c3a:      	bl	0x8000ce2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17heec6da93db0675a1E> @ imm = #0xa4
 8000c3e:      	mov	r1, r0
 8000c40:      	ldr	r0, [sp, #0x8]
 8000c42:      	ldr	r1, [r1]
 8000c44:      	str	r0, [sp, #0x64]
 8000c46:      	str	r1, [sp, #0x68]
 8000c48:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000c4a:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0x8ee
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c4e:      	b	0x8000c50 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h7132cc0865dca8a7E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c50:      	ldr	r0, [sp, #0x4]
 8000c52:      	bl	0x8001450 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h5a4856692425826a> @ imm = #0x7fa
 8000c56:      	str	r0, [sp]
 8000c58:      	b	0x8000c5a <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h7132cc0865dca8a7E+0x52> @ imm = #-0x2
 8000c5a:      	ldr	r0, [sp]
 8000c5c:      	str	r0, [sp, #0x28]
 8000c5e:      	str	r0, [sp, #0x30]
 8000c60:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000c62:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0xb4e
;         let bits = self.register.get();
 8000c66:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000c68:      	str	r0, [sp, #0x20]
 8000c6a:      	str	r0, [sp, #0x24]
 8000c6c:      	add	r0, sp, #0x20
 8000c6e:      	str	r0, [sp, #0x18]
 8000c70:      	add	r0, sp, #0x24
 8000c72:      	str	r0, [sp, #0x1c]
 8000c74:      	ldr	r0, [sp, #0x18]
 8000c76:      	ldr	r1, [sp, #0x1c]
 8000c78:      	bl	0x8000c92 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3f886a97c7df4f58E> @ imm = #0x16
 8000c7c:      	mov	r1, r0
 8000c7e:      	ldr	r0, [sp]
 8000c80:      	ldr	r1, [r1]
 8000c82:      	str	r0, [sp, #0x38]
 8000c84:      	str	r1, [sp, #0x3c]
 8000c86:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000c88:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0x8b0
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c8c:      	b	0x8000c8e <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h7132cc0865dca8a7E+0x86> @ imm = #-0x2
;                             }
 8000c8e:      	add	sp, #0x70
 8000c90:      	pop	{r7, pc}

08000c92 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3f886a97c7df4f58E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c92:      	push	{r7, lr}
 8000c94:      	mov	r7, sp
 8000c96:      	sub	sp, #0x38
 8000c98:      	str	r0, [sp, #0x10]
 8000c9a:      	str	r1, [sp, #0x14]
 8000c9c:      	str	r1, [sp, #0x1c]
;         OT11_W { w: self }
 8000c9e:      	str	r1, [sp, #0x18]
;     }
 8000ca0:      	ldr	r0, [sp, #0x18]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000ca2:      	str	r0, [sp, #0x8]
 8000ca4:      	b	0x8000ca6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3f886a97c7df4f58E+0x14> @ imm = #-0x2
 8000ca6:      	ldr	r1, [sp, #0x8]
 8000ca8:      	str	r1, [sp, #0x24]
 8000caa:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000cac:      	strb	r0, [r7, #-21]
 8000cb0:      	ldrb	r0, [r7, #-21]
 8000cb4:      	str	r1, [sp, #0x28]
 8000cb6:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000cba:      	bl	0x8001282 <<T as core::convert::Into<U>>::into::ha4c3e50a541f856b> @ imm = #0x5c4
 8000cbe:      	mov	r2, r0
 8000cc0:      	ldr	r0, [sp, #0x8]
 8000cc2:      	str	r0, [sp, #0x30]
 8000cc4:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
 8000cc8:      	ldr	r1, [sp, #0x30]
 8000cca:      	ldr	r0, [r1]
 8000ccc:      	bic	r0, r0, #0x800
 8000cd0:      	orr.w	r0, r0, r2, lsl #11
 8000cd4:      	str	r0, [r1]
;         self.w
 8000cd6:      	ldr	r0, [sp, #0x30]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000cd8:      	str	r0, [sp, #0x4]
 8000cda:      	b	0x8000cdc <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3f886a97c7df4f58E+0x4a> @ imm = #-0x2
 8000cdc:      	ldr	r0, [sp, #0x4]
 8000cde:      	add	sp, #0x38
 8000ce0:      	pop	{r7, pc}

08000ce2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17heec6da93db0675a1E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ce2:      	push	{r7, lr}
 8000ce4:      	mov	r7, sp
 8000ce6:      	sub	sp, #0x38
 8000ce8:      	str	r0, [sp, #0x10]
 8000cea:      	str	r1, [sp, #0x14]
 8000cec:      	str	r1, [sp, #0x1c]
;         MODER11_W { w: self }
 8000cee:      	str	r1, [sp, #0x18]
;     }
 8000cf0:      	ldr	r0, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000cf2:      	str	r0, [sp, #0x8]
 8000cf4:      	b	0x8000cf6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17heec6da93db0675a1E+0x14> @ imm = #-0x2
 8000cf6:      	ldr	r1, [sp, #0x8]
 8000cf8:      	str	r1, [sp, #0x24]
 8000cfa:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000cfc:      	strb	r0, [r7, #-21]
 8000d00:      	ldrb	r0, [r7, #-21]
 8000d04:      	str	r1, [sp, #0x28]
 8000d06:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000d0a:      	bl	0x800129e <<T as core::convert::Into<U>>::into::h44c4f7c44b9e349c> @ imm = #0x590
 8000d0e:      	mov	r2, r0
 8000d10:      	ldr	r0, [sp, #0x8]
 8000d12:      	str	r0, [sp, #0x30]
 8000d14:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
 8000d18:      	ldr	r1, [sp, #0x30]
 8000d1a:      	ldr	r0, [r1]
 8000d1c:      	bic	r0, r0, #0xc00000
 8000d20:      	and	r2, r2, #0x3
 8000d24:      	orr.w	r0, r0, r2, lsl #22
 8000d28:      	str	r0, [r1]
;         self.w
 8000d2a:      	ldr	r0, [sp, #0x30]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d2c:      	str	r0, [sp, #0x4]
 8000d2e:      	b	0x8000d30 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17heec6da93db0675a1E+0x4e> @ imm = #-0x2
 8000d30:      	ldr	r0, [sp, #0x4]
 8000d32:      	add	sp, #0x38
 8000d34:      	pop	{r7, pc}

08000d36 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h34140654e4155836E>:
;                             pub fn into_push_pull_output(
 8000d36:      	push	{r7, lr}
 8000d38:      	mov	r7, sp
 8000d3a:      	sub	sp, #0x70
 8000d3c:      	str	r1, [sp, #0x4]
 8000d3e:      	str	r0, [sp, #0x10]
 8000d40:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d42:      	bl	0x800143e <stm32f3xx_hal::gpio::gpioe::MODER::moder::h419a8cca1ee5ec03> @ imm = #0x6f8
 8000d46:      	str	r0, [sp, #0x8]
 8000d48:      	b	0x8000d4a <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h34140654e4155836E+0x14> @ imm = #-0x2
 8000d4a:      	ldr	r0, [sp, #0x8]
 8000d4c:      	str	r0, [sp, #0x54]
 8000d4e:      	str	r0, [sp, #0x5c]
 8000d50:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000d52:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0xa5e
;         let bits = self.register.get();
 8000d56:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000d58:      	str	r0, [sp, #0x4c]
 8000d5a:      	str	r0, [sp, #0x50]
 8000d5c:      	add	r0, sp, #0x4c
 8000d5e:      	str	r0, [sp, #0x44]
 8000d60:      	add	r0, sp, #0x50
 8000d62:      	str	r0, [sp, #0x48]
 8000d64:      	ldr	r0, [sp, #0x44]
 8000d66:      	ldr	r1, [sp, #0x48]
 8000d68:      	bl	0x8000e10 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hc3e59476411ebc48E> @ imm = #0xa4
 8000d6c:      	mov	r1, r0
 8000d6e:      	ldr	r0, [sp, #0x8]
 8000d70:      	ldr	r1, [r1]
 8000d72:      	str	r0, [sp, #0x64]
 8000d74:      	str	r1, [sp, #0x68]
 8000d76:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000d78:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0x7c0
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d7c:      	b	0x8000d7e <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h34140654e4155836E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d7e:      	ldr	r0, [sp, #0x4]
 8000d80:      	bl	0x8001450 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h5a4856692425826a> @ imm = #0x6cc
 8000d84:      	str	r0, [sp]
 8000d86:      	b	0x8000d88 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h34140654e4155836E+0x52> @ imm = #-0x2
 8000d88:      	ldr	r0, [sp]
 8000d8a:      	str	r0, [sp, #0x28]
 8000d8c:      	str	r0, [sp, #0x30]
 8000d8e:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000d90:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0xa20
;         let bits = self.register.get();
 8000d94:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000d96:      	str	r0, [sp, #0x20]
 8000d98:      	str	r0, [sp, #0x24]
 8000d9a:      	add	r0, sp, #0x20
 8000d9c:      	str	r0, [sp, #0x18]
 8000d9e:      	add	r0, sp, #0x24
 8000da0:      	str	r0, [sp, #0x1c]
 8000da2:      	ldr	r0, [sp, #0x18]
 8000da4:      	ldr	r1, [sp, #0x1c]
 8000da6:      	bl	0x8000dc0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h157eee0dccff5fe9E> @ imm = #0x16
 8000daa:      	mov	r1, r0
 8000dac:      	ldr	r0, [sp]
 8000dae:      	ldr	r1, [r1]
 8000db0:      	str	r0, [sp, #0x38]
 8000db2:      	str	r1, [sp, #0x3c]
 8000db4:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000db6:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0x782
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000dba:      	b	0x8000dbc <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h34140654e4155836E+0x86> @ imm = #-0x2
;                             }
 8000dbc:      	add	sp, #0x70
 8000dbe:      	pop	{r7, pc}

08000dc0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h157eee0dccff5fe9E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000dc0:      	push	{r7, lr}
 8000dc2:      	mov	r7, sp
 8000dc4:      	sub	sp, #0x38
 8000dc6:      	str	r0, [sp, #0x10]
 8000dc8:      	str	r1, [sp, #0x14]
 8000dca:      	str	r1, [sp, #0x1c]
;         OT12_W { w: self }
 8000dcc:      	str	r1, [sp, #0x18]
;     }
 8000dce:      	ldr	r0, [sp, #0x18]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000dd0:      	str	r0, [sp, #0x8]
 8000dd2:      	b	0x8000dd4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h157eee0dccff5fe9E+0x14> @ imm = #-0x2
 8000dd4:      	ldr	r1, [sp, #0x8]
 8000dd6:      	str	r1, [sp, #0x24]
 8000dd8:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000dda:      	strb	r0, [r7, #-21]
 8000dde:      	ldrb	r0, [r7, #-21]
 8000de2:      	str	r1, [sp, #0x28]
 8000de4:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000de8:      	bl	0x8001282 <<T as core::convert::Into<U>>::into::ha4c3e50a541f856b> @ imm = #0x496
 8000dec:      	mov	r2, r0
 8000dee:      	ldr	r0, [sp, #0x8]
 8000df0:      	str	r0, [sp, #0x30]
 8000df2:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
 8000df6:      	ldr	r1, [sp, #0x30]
 8000df8:      	ldr	r0, [r1]
 8000dfa:      	bic	r0, r0, #0x1000
 8000dfe:      	orr.w	r0, r0, r2, lsl #12
 8000e02:      	str	r0, [r1]
;         self.w
 8000e04:      	ldr	r0, [sp, #0x30]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000e06:      	str	r0, [sp, #0x4]
 8000e08:      	b	0x8000e0a <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h157eee0dccff5fe9E+0x4a> @ imm = #-0x2
 8000e0a:      	ldr	r0, [sp, #0x4]
 8000e0c:      	add	sp, #0x38
 8000e0e:      	pop	{r7, pc}

08000e10 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hc3e59476411ebc48E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e10:      	push	{r7, lr}
 8000e12:      	mov	r7, sp
 8000e14:      	sub	sp, #0x38
 8000e16:      	str	r0, [sp, #0x10]
 8000e18:      	str	r1, [sp, #0x14]
 8000e1a:      	str	r1, [sp, #0x1c]
;         MODER12_W { w: self }
 8000e1c:      	str	r1, [sp, #0x18]
;     }
 8000e1e:      	ldr	r0, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e20:      	str	r0, [sp, #0x8]
 8000e22:      	b	0x8000e24 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hc3e59476411ebc48E+0x14> @ imm = #-0x2
 8000e24:      	ldr	r1, [sp, #0x8]
 8000e26:      	str	r1, [sp, #0x24]
 8000e28:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000e2a:      	strb	r0, [r7, #-21]
 8000e2e:      	ldrb	r0, [r7, #-21]
 8000e32:      	str	r1, [sp, #0x28]
 8000e34:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000e38:      	bl	0x800129e <<T as core::convert::Into<U>>::into::h44c4f7c44b9e349c> @ imm = #0x462
 8000e3c:      	mov	r2, r0
 8000e3e:      	ldr	r0, [sp, #0x8]
 8000e40:      	str	r0, [sp, #0x30]
 8000e42:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
 8000e46:      	ldr	r1, [sp, #0x30]
 8000e48:      	ldr	r0, [r1]
 8000e4a:      	bic	r0, r0, #0x3000000
 8000e4e:      	and	r2, r2, #0x3
 8000e52:      	orr.w	r0, r0, r2, lsl #24
 8000e56:      	str	r0, [r1]
;         self.w
 8000e58:      	ldr	r0, [sp, #0x30]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e5a:      	str	r0, [sp, #0x4]
 8000e5c:      	b	0x8000e5e <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hc3e59476411ebc48E+0x4e> @ imm = #-0x2
 8000e5e:      	ldr	r0, [sp, #0x4]
 8000e60:      	add	sp, #0x38
 8000e62:      	pop	{r7, pc}

08000e64 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17he50e8b9386497713E>:
;                             pub fn into_push_pull_output(
 8000e64:      	push	{r7, lr}
 8000e66:      	mov	r7, sp
 8000e68:      	sub	sp, #0x70
 8000e6a:      	str	r1, [sp, #0x4]
 8000e6c:      	str	r0, [sp, #0x10]
 8000e6e:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e70:      	bl	0x800143e <stm32f3xx_hal::gpio::gpioe::MODER::moder::h419a8cca1ee5ec03> @ imm = #0x5ca
 8000e74:      	str	r0, [sp, #0x8]
 8000e76:      	b	0x8000e78 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17he50e8b9386497713E+0x14> @ imm = #-0x2
 8000e78:      	ldr	r0, [sp, #0x8]
 8000e7a:      	str	r0, [sp, #0x28]
 8000e7c:      	str	r0, [sp, #0x30]
 8000e7e:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000e80:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0x930
;         let bits = self.register.get();
 8000e84:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000e86:      	str	r0, [sp, #0x20]
 8000e88:      	str	r0, [sp, #0x24]
 8000e8a:      	add	r0, sp, #0x20
 8000e8c:      	str	r0, [sp, #0x18]
 8000e8e:      	add	r0, sp, #0x24
 8000e90:      	str	r0, [sp, #0x1c]
 8000e92:      	ldr	r0, [sp, #0x18]
 8000e94:      	ldr	r1, [sp, #0x1c]
 8000e96:      	bl	0x8000f3e <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf34919e34830889eE> @ imm = #0xa4
 8000e9a:      	mov	r1, r0
 8000e9c:      	ldr	r0, [sp, #0x8]
 8000e9e:      	ldr	r1, [r1]
 8000ea0:      	str	r0, [sp, #0x38]
 8000ea2:      	str	r1, [sp, #0x3c]
 8000ea4:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000ea6:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0x692
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000eaa:      	b	0x8000eac <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17he50e8b9386497713E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000eac:      	ldr	r0, [sp, #0x4]
 8000eae:      	bl	0x8001450 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h5a4856692425826a> @ imm = #0x59e
 8000eb2:      	str	r0, [sp]
 8000eb4:      	b	0x8000eb6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17he50e8b9386497713E+0x52> @ imm = #-0x2
 8000eb6:      	ldr	r0, [sp]
 8000eb8:      	str	r0, [sp, #0x54]
 8000eba:      	str	r0, [sp, #0x5c]
 8000ebc:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000ebe:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0x8f2
;         let bits = self.register.get();
 8000ec2:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000ec4:      	str	r0, [sp, #0x4c]
 8000ec6:      	str	r0, [sp, #0x50]
 8000ec8:      	add	r0, sp, #0x4c
 8000eca:      	str	r0, [sp, #0x44]
 8000ecc:      	add	r0, sp, #0x50
 8000ece:      	str	r0, [sp, #0x48]
 8000ed0:      	ldr	r0, [sp, #0x44]
 8000ed2:      	ldr	r1, [sp, #0x48]
 8000ed4:      	bl	0x8000eee <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h323bd9f318580c84E> @ imm = #0x16
 8000ed8:      	mov	r1, r0
 8000eda:      	ldr	r0, [sp]
 8000edc:      	ldr	r1, [r1]
 8000ede:      	str	r0, [sp, #0x64]
 8000ee0:      	str	r1, [sp, #0x68]
 8000ee2:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000ee4:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0x654
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000ee8:      	b	0x8000eea <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17he50e8b9386497713E+0x86> @ imm = #-0x2
;                             }
 8000eea:      	add	sp, #0x70
 8000eec:      	pop	{r7, pc}

08000eee <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h323bd9f318580c84E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000eee:      	push	{r7, lr}
 8000ef0:      	mov	r7, sp
 8000ef2:      	sub	sp, #0x38
 8000ef4:      	str	r0, [sp, #0x10]
 8000ef6:      	str	r1, [sp, #0x14]
 8000ef8:      	str	r1, [sp, #0x1c]
;         OT13_W { w: self }
 8000efa:      	str	r1, [sp, #0x18]
;     }
 8000efc:      	ldr	r0, [sp, #0x18]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000efe:      	str	r0, [sp, #0x8]
 8000f00:      	b	0x8000f02 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h323bd9f318580c84E+0x14> @ imm = #-0x2
 8000f02:      	ldr	r1, [sp, #0x8]
 8000f04:      	str	r1, [sp, #0x24]
 8000f06:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000f08:      	strb	r0, [r7, #-21]
 8000f0c:      	ldrb	r0, [r7, #-21]
 8000f10:      	str	r1, [sp, #0x28]
 8000f12:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000f16:      	bl	0x8001282 <<T as core::convert::Into<U>>::into::ha4c3e50a541f856b> @ imm = #0x368
 8000f1a:      	mov	r2, r0
 8000f1c:      	ldr	r0, [sp, #0x8]
 8000f1e:      	str	r0, [sp, #0x30]
 8000f20:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
 8000f24:      	ldr	r1, [sp, #0x30]
 8000f26:      	ldr	r0, [r1]
 8000f28:      	bic	r0, r0, #0x2000
 8000f2c:      	orr.w	r0, r0, r2, lsl #13
 8000f30:      	str	r0, [r1]
;         self.w
 8000f32:      	ldr	r0, [sp, #0x30]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000f34:      	str	r0, [sp, #0x4]
 8000f36:      	b	0x8000f38 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h323bd9f318580c84E+0x4a> @ imm = #-0x2
 8000f38:      	ldr	r0, [sp, #0x4]
 8000f3a:      	add	sp, #0x38
 8000f3c:      	pop	{r7, pc}

08000f3e <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf34919e34830889eE>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000f3e:      	push	{r7, lr}
 8000f40:      	mov	r7, sp
 8000f42:      	sub	sp, #0x38
 8000f44:      	str	r0, [sp, #0x10]
 8000f46:      	str	r1, [sp, #0x14]
 8000f48:      	str	r1, [sp, #0x1c]
;         MODER13_W { w: self }
 8000f4a:      	str	r1, [sp, #0x18]
;     }
 8000f4c:      	ldr	r0, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000f4e:      	str	r0, [sp, #0x8]
 8000f50:      	b	0x8000f52 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf34919e34830889eE+0x14> @ imm = #-0x2
 8000f52:      	ldr	r1, [sp, #0x8]
 8000f54:      	str	r1, [sp, #0x24]
 8000f56:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000f58:      	strb	r0, [r7, #-21]
 8000f5c:      	ldrb	r0, [r7, #-21]
 8000f60:      	str	r1, [sp, #0x28]
 8000f62:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000f66:      	bl	0x800129e <<T as core::convert::Into<U>>::into::h44c4f7c44b9e349c> @ imm = #0x334
 8000f6a:      	mov	r2, r0
 8000f6c:      	ldr	r0, [sp, #0x8]
 8000f6e:      	str	r0, [sp, #0x30]
 8000f70:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
 8000f74:      	ldr	r1, [sp, #0x30]
 8000f76:      	ldr	r0, [r1]
 8000f78:      	bic	r0, r0, #0xc000000
 8000f7c:      	and	r2, r2, #0x3
 8000f80:      	orr.w	r0, r0, r2, lsl #26
 8000f84:      	str	r0, [r1]
;         self.w
 8000f86:      	ldr	r0, [sp, #0x30]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000f88:      	str	r0, [sp, #0x4]
 8000f8a:      	b	0x8000f8c <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf34919e34830889eE+0x4e> @ imm = #-0x2
 8000f8c:      	ldr	r0, [sp, #0x4]
 8000f8e:      	add	sp, #0x38
 8000f90:      	pop	{r7, pc}

08000f92 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h1f6e6bb6b698bb39E>:
;                             pub fn into_push_pull_output(
 8000f92:      	push	{r7, lr}
 8000f94:      	mov	r7, sp
 8000f96:      	sub	sp, #0x70
 8000f98:      	str	r1, [sp, #0x4]
 8000f9a:      	str	r0, [sp, #0x10]
 8000f9c:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000f9e:      	bl	0x800143e <stm32f3xx_hal::gpio::gpioe::MODER::moder::h419a8cca1ee5ec03> @ imm = #0x49c
 8000fa2:      	str	r0, [sp, #0x8]
 8000fa4:      	b	0x8000fa6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h1f6e6bb6b698bb39E+0x14> @ imm = #-0x2
 8000fa6:      	ldr	r0, [sp, #0x8]
 8000fa8:      	str	r0, [sp, #0x28]
 8000faa:      	str	r0, [sp, #0x30]
 8000fac:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000fae:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0x802
;         let bits = self.register.get();
 8000fb2:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000fb4:      	str	r0, [sp, #0x20]
 8000fb6:      	str	r0, [sp, #0x24]
 8000fb8:      	add	r0, sp, #0x20
 8000fba:      	str	r0, [sp, #0x18]
 8000fbc:      	add	r0, sp, #0x24
 8000fbe:      	str	r0, [sp, #0x1c]
 8000fc0:      	ldr	r0, [sp, #0x18]
 8000fc2:      	ldr	r1, [sp, #0x1c]
 8000fc4:      	bl	0x800101c <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3564307c5222b396E> @ imm = #0x54
 8000fc8:      	mov	r1, r0
 8000fca:      	ldr	r0, [sp, #0x8]
 8000fcc:      	ldr	r1, [r1]
 8000fce:      	str	r0, [sp, #0x38]
 8000fd0:      	str	r1, [sp, #0x3c]
 8000fd2:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000fd4:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0x564
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000fd8:      	b	0x8000fda <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h1f6e6bb6b698bb39E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000fda:      	ldr	r0, [sp, #0x4]
 8000fdc:      	bl	0x8001450 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h5a4856692425826a> @ imm = #0x470
 8000fe0:      	str	r0, [sp]
 8000fe2:      	b	0x8000fe4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h1f6e6bb6b698bb39E+0x52> @ imm = #-0x2
 8000fe4:      	ldr	r0, [sp]
 8000fe6:      	str	r0, [sp, #0x54]
 8000fe8:      	str	r0, [sp, #0x5c]
 8000fea:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000fec:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0x7c4
;         let bits = self.register.get();
 8000ff0:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000ff2:      	str	r0, [sp, #0x4c]
 8000ff4:      	str	r0, [sp, #0x50]
 8000ff6:      	add	r0, sp, #0x4c
 8000ff8:      	str	r0, [sp, #0x44]
 8000ffa:      	add	r0, sp, #0x50
 8000ffc:      	str	r0, [sp, #0x48]
 8000ffe:      	ldr	r0, [sp, #0x44]
 8001000:      	ldr	r1, [sp, #0x48]
 8001002:      	bl	0x8001070 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h746421d482224b5aE> @ imm = #0x6a
 8001006:      	mov	r1, r0
 8001008:      	ldr	r0, [sp]
 800100a:      	ldr	r1, [r1]
 800100c:      	str	r0, [sp, #0x64]
 800100e:      	str	r1, [sp, #0x68]
 8001010:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8001012:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0x526
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8001016:      	b	0x8001018 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17h1f6e6bb6b698bb39E+0x86> @ imm = #-0x2
;                             }
 8001018:      	add	sp, #0x70
 800101a:      	pop	{r7, pc}

0800101c <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3564307c5222b396E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800101c:      	push	{r7, lr}
 800101e:      	mov	r7, sp
 8001020:      	sub	sp, #0x38
 8001022:      	str	r0, [sp, #0x10]
 8001024:      	str	r1, [sp, #0x14]
 8001026:      	str	r1, [sp, #0x1c]
;         MODER14_W { w: self }
 8001028:      	str	r1, [sp, #0x18]
;     }
 800102a:      	ldr	r0, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800102c:      	str	r0, [sp, #0x8]
 800102e:      	b	0x8001030 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3564307c5222b396E+0x14> @ imm = #-0x2
 8001030:      	ldr	r1, [sp, #0x8]
 8001032:      	str	r1, [sp, #0x24]
 8001034:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8001036:      	strb	r0, [r7, #-21]
 800103a:      	ldrb	r0, [r7, #-21]
 800103e:      	str	r1, [sp, #0x28]
 8001040:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8001044:      	bl	0x800129e <<T as core::convert::Into<U>>::into::h44c4f7c44b9e349c> @ imm = #0x256
 8001048:      	mov	r2, r0
 800104a:      	ldr	r0, [sp, #0x8]
 800104c:      	str	r0, [sp, #0x30]
 800104e:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
 8001052:      	ldr	r1, [sp, #0x30]
 8001054:      	ldr	r0, [r1]
 8001056:      	bic	r0, r0, #0x30000000
 800105a:      	and	r2, r2, #0x3
 800105e:      	orr.w	r0, r0, r2, lsl #28
 8001062:      	str	r0, [r1]
;         self.w
 8001064:      	ldr	r0, [sp, #0x30]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8001066:      	str	r0, [sp, #0x4]
 8001068:      	b	0x800106a <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h3564307c5222b396E+0x4e> @ imm = #-0x2
 800106a:      	ldr	r0, [sp, #0x4]
 800106c:      	add	sp, #0x38
 800106e:      	pop	{r7, pc}

08001070 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h746421d482224b5aE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8001070:      	push	{r7, lr}
 8001072:      	mov	r7, sp
 8001074:      	sub	sp, #0x38
 8001076:      	str	r0, [sp, #0x10]
 8001078:      	str	r1, [sp, #0x14]
 800107a:      	str	r1, [sp, #0x1c]
;         OT14_W { w: self }
 800107c:      	str	r1, [sp, #0x18]
;     }
 800107e:      	ldr	r0, [sp, #0x18]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8001080:      	str	r0, [sp, #0x8]
 8001082:      	b	0x8001084 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h746421d482224b5aE+0x14> @ imm = #-0x2
 8001084:      	ldr	r1, [sp, #0x8]
 8001086:      	str	r1, [sp, #0x24]
 8001088:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 800108a:      	strb	r0, [r7, #-21]
 800108e:      	ldrb	r0, [r7, #-21]
 8001092:      	str	r1, [sp, #0x28]
 8001094:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8001098:      	bl	0x8001282 <<T as core::convert::Into<U>>::into::ha4c3e50a541f856b> @ imm = #0x1e6
 800109c:      	mov	r2, r0
 800109e:      	ldr	r0, [sp, #0x8]
 80010a0:      	str	r0, [sp, #0x30]
 80010a2:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
 80010a6:      	ldr	r1, [sp, #0x30]
 80010a8:      	ldr	r0, [r1]
 80010aa:      	bic	r0, r0, #0x4000
 80010ae:      	orr.w	r0, r0, r2, lsl #14
 80010b2:      	str	r0, [r1]
;         self.w
 80010b4:      	ldr	r0, [sp, #0x30]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80010b6:      	str	r0, [sp, #0x4]
 80010b8:      	b	0x80010ba <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h746421d482224b5aE+0x4a> @ imm = #-0x2
 80010ba:      	ldr	r0, [sp, #0x4]
 80010bc:      	add	sp, #0x38
 80010be:      	pop	{r7, pc}

080010c0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h4d728f495f02f8d8E>:
;                             pub fn into_push_pull_output(
 80010c0:      	push	{r7, lr}
 80010c2:      	mov	r7, sp
 80010c4:      	sub	sp, #0x70
 80010c6:      	str	r1, [sp, #0x4]
 80010c8:      	str	r0, [sp, #0x10]
 80010ca:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80010cc:      	bl	0x800143e <stm32f3xx_hal::gpio::gpioe::MODER::moder::h419a8cca1ee5ec03> @ imm = #0x36e
 80010d0:      	str	r0, [sp, #0x8]
 80010d2:      	b	0x80010d4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h4d728f495f02f8d8E+0x14> @ imm = #-0x2
 80010d4:      	ldr	r0, [sp, #0x8]
 80010d6:      	str	r0, [sp, #0x54]
 80010d8:      	str	r0, [sp, #0x5c]
 80010da:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80010dc:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0x6d4
;         let bits = self.register.get();
 80010e0:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80010e2:      	str	r0, [sp, #0x4c]
 80010e4:      	str	r0, [sp, #0x50]
 80010e6:      	add	r0, sp, #0x4c
 80010e8:      	str	r0, [sp, #0x44]
 80010ea:      	add	r0, sp, #0x50
 80010ec:      	str	r0, [sp, #0x48]
 80010ee:      	ldr	r0, [sp, #0x44]
 80010f0:      	ldr	r1, [sp, #0x48]
 80010f2:      	bl	0x800114a <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h27a28560551099b9E> @ imm = #0x54
 80010f6:      	mov	r1, r0
 80010f8:      	ldr	r0, [sp, #0x8]
 80010fa:      	ldr	r1, [r1]
 80010fc:      	str	r0, [sp, #0x64]
 80010fe:      	str	r1, [sp, #0x68]
 8001100:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8001102:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0x436
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8001106:      	b	0x8001108 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h4d728f495f02f8d8E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8001108:      	ldr	r0, [sp, #0x4]
 800110a:      	bl	0x8001450 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h5a4856692425826a> @ imm = #0x342
 800110e:      	str	r0, [sp]
 8001110:      	b	0x8001112 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h4d728f495f02f8d8E+0x52> @ imm = #-0x2
 8001112:      	ldr	r0, [sp]
 8001114:      	str	r0, [sp, #0x28]
 8001116:      	str	r0, [sp, #0x30]
 8001118:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 800111a:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0x696
;         let bits = self.register.get();
 800111e:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8001120:      	str	r0, [sp, #0x20]
 8001122:      	str	r0, [sp, #0x24]
 8001124:      	add	r0, sp, #0x20
 8001126:      	str	r0, [sp, #0x18]
 8001128:      	add	r0, sp, #0x24
 800112a:      	str	r0, [sp, #0x1c]
 800112c:      	ldr	r0, [sp, #0x18]
 800112e:      	ldr	r1, [sp, #0x1c]
 8001130:      	bl	0x800119a <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h52509ceccc89d3d7E> @ imm = #0x66
 8001134:      	mov	r1, r0
 8001136:      	ldr	r0, [sp]
 8001138:      	ldr	r1, [r1]
 800113a:      	str	r0, [sp, #0x38]
 800113c:      	str	r1, [sp, #0x3c]
 800113e:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8001140:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0x3f8
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8001144:      	b	0x8001146 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h4d728f495f02f8d8E+0x86> @ imm = #-0x2
;                             }
 8001146:      	add	sp, #0x70
 8001148:      	pop	{r7, pc}

0800114a <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h27a28560551099b9E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800114a:      	push	{r7, lr}
 800114c:      	mov	r7, sp
 800114e:      	sub	sp, #0x38
 8001150:      	str	r0, [sp, #0x10]
 8001152:      	str	r1, [sp, #0x14]
 8001154:      	str	r1, [sp, #0x1c]
;         MODER15_W { w: self }
 8001156:      	str	r1, [sp, #0x18]
;     }
 8001158:      	ldr	r0, [sp, #0x18]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800115a:      	str	r0, [sp, #0x8]
 800115c:      	b	0x800115e <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h27a28560551099b9E+0x14> @ imm = #-0x2
 800115e:      	ldr	r1, [sp, #0x8]
 8001160:      	str	r1, [sp, #0x24]
 8001162:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8001164:      	strb	r0, [r7, #-21]
 8001168:      	ldrb	r0, [r7, #-21]
 800116c:      	str	r1, [sp, #0x28]
 800116e:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8001172:      	bl	0x800129e <<T as core::convert::Into<U>>::into::h44c4f7c44b9e349c> @ imm = #0x128
 8001176:      	mov	r2, r0
 8001178:      	ldr	r0, [sp, #0x8]
 800117a:      	str	r0, [sp, #0x30]
 800117c:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
 8001180:      	ldr	r1, [sp, #0x30]
 8001182:      	ldr	r0, [r1]
 8001184:      	bic	r0, r0, #0xc0000000
 8001188:      	orr.w	r0, r0, r2, lsl #30
 800118c:      	str	r0, [r1]
;         self.w
 800118e:      	ldr	r0, [sp, #0x30]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8001190:      	str	r0, [sp, #0x4]
 8001192:      	b	0x8001194 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h27a28560551099b9E+0x4a> @ imm = #-0x2
 8001194:      	ldr	r0, [sp, #0x4]
 8001196:      	add	sp, #0x38
 8001198:      	pop	{r7, pc}

0800119a <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h52509ceccc89d3d7E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800119a:      	push	{r7, lr}
 800119c:      	mov	r7, sp
 800119e:      	sub	sp, #0x38
 80011a0:      	str	r0, [sp, #0x10]
 80011a2:      	str	r1, [sp, #0x14]
 80011a4:      	str	r1, [sp, #0x1c]
;         OT15_W { w: self }
 80011a6:      	str	r1, [sp, #0x18]
;     }
 80011a8:      	ldr	r0, [sp, #0x18]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80011aa:      	str	r0, [sp, #0x8]
 80011ac:      	b	0x80011ae <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h52509ceccc89d3d7E+0x14> @ imm = #-0x2
 80011ae:      	ldr	r1, [sp, #0x8]
 80011b0:      	str	r1, [sp, #0x24]
 80011b2:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 80011b4:      	strb	r0, [r7, #-21]
 80011b8:      	ldrb	r0, [r7, #-21]
 80011bc:      	str	r1, [sp, #0x28]
 80011be:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 80011c2:      	bl	0x8001282 <<T as core::convert::Into<U>>::into::ha4c3e50a541f856b> @ imm = #0xbc
 80011c6:      	mov	r2, r0
 80011c8:      	ldr	r0, [sp, #0x8]
 80011ca:      	str	r0, [sp, #0x30]
 80011cc:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
 80011d0:      	ldr	r1, [sp, #0x30]
 80011d2:      	ldr	r0, [r1]
 80011d4:      	bic	r0, r0, #0x8000
 80011d8:      	orr.w	r0, r0, r2, lsl #15
 80011dc:      	str	r0, [r1]
;         self.w
 80011de:      	ldr	r0, [sp, #0x30]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80011e0:      	str	r0, [sp, #0x4]
 80011e2:      	b	0x80011e4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h52509ceccc89d3d7E+0x4a> @ imm = #-0x2
 80011e4:      	ldr	r0, [sp, #0x4]
 80011e6:      	add	sp, #0x38
 80011e8:      	pop	{r7, pc}

080011ea <_ZN13stm32f3xx_hal4gpio5gpioe50PE8$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h74b006977a86a9e1E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 80011ea:      	sub	sp, #0x8
 80011ec:      	movs	r0, #0x8
; gpio!([
 80011ee:      	strb.w	r0, [sp, #0x3]
;                             }
 80011f2:      	ldrb.w	r0, [sp, #0x3]
 80011f6:      	add	sp, #0x8
 80011f8:      	bx	lr

080011fa <_ZN13stm32f3xx_hal4gpio5gpioe50PE9$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h9ed1b7f2e794ada5E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 80011fa:      	sub	sp, #0x8
 80011fc:      	movs	r0, #0x9
; gpio!([
 80011fe:      	strb.w	r0, [sp, #0x3]
;                             }
 8001202:      	ldrb.w	r0, [sp, #0x3]
 8001206:      	add	sp, #0x8
 8001208:      	bx	lr

0800120a <_ZN13stm32f3xx_hal4gpio5gpioe51PE10$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hf058a1ec28d973b8E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 800120a:      	sub	sp, #0x8
 800120c:      	movs	r0, #0xa
; gpio!([
 800120e:      	strb.w	r0, [sp, #0x3]
;                             }
 8001212:      	ldrb.w	r0, [sp, #0x3]
 8001216:      	add	sp, #0x8
 8001218:      	bx	lr

0800121a <_ZN13stm32f3xx_hal4gpio5gpioe51PE11$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h63ea87176830db48E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 800121a:      	sub	sp, #0x8
 800121c:      	movs	r0, #0xb
; gpio!([
 800121e:      	strb.w	r0, [sp, #0x3]
;                             }
 8001222:      	ldrb.w	r0, [sp, #0x3]
 8001226:      	add	sp, #0x8
 8001228:      	bx	lr

0800122a <_ZN13stm32f3xx_hal4gpio5gpioe51PE12$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h8f98289d1bd3e72bE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 800122a:      	sub	sp, #0x8
 800122c:      	movs	r0, #0xc
; gpio!([
 800122e:      	strb.w	r0, [sp, #0x3]
;                             }
 8001232:      	ldrb.w	r0, [sp, #0x3]
 8001236:      	add	sp, #0x8
 8001238:      	bx	lr

0800123a <_ZN13stm32f3xx_hal4gpio5gpioe51PE13$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h18c300003d9bb308E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 800123a:      	sub	sp, #0x8
 800123c:      	movs	r0, #0xd
; gpio!([
 800123e:      	strb.w	r0, [sp, #0x3]
;                             }
 8001242:      	ldrb.w	r0, [sp, #0x3]
 8001246:      	add	sp, #0x8
 8001248:      	bx	lr

0800124a <_ZN13stm32f3xx_hal4gpio5gpioe51PE14$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h61091b22b577ae04E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 800124a:      	sub	sp, #0x8
 800124c:      	movs	r0, #0xe
; gpio!([
 800124e:      	strb.w	r0, [sp, #0x3]
;                             }
 8001252:      	ldrb.w	r0, [sp, #0x3]
 8001256:      	add	sp, #0x8
 8001258:      	bx	lr

0800125a <_ZN13stm32f3xx_hal4gpio5gpioe51PE15$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h5b3467f741aa91d2E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 800125a:      	sub	sp, #0x8
 800125c:      	movs	r0, #0xf
; gpio!([
 800125e:      	strb.w	r0, [sp, #0x3]
;                             }
 8001262:      	ldrb.w	r0, [sp, #0x3]
 8001266:      	add	sp, #0x8
 8001268:      	bx	lr

0800126a <<T as switch_hal::IntoSwitch>::into_switch::h703928b8c5297d76>:
;     fn into_switch<ActiveLevel>(self) -> Switch<Self, ActiveLevel> {
 800126a:      	push	{r7, lr}
 800126c:      	mov	r7, sp
 800126e:      	sub	sp, #0x8
 8001270:      	strb	r0, [r7, #-1]
;         Switch::<Self, ActiveLevel>::new(self)
 8001274:      	bl	0x8000716 <switch_hal::Switch<IoPin,ActiveLevel>::new::h9ecfb938b6c0ddec> @ imm = #-0xb62
 8001278:      	str	r0, [sp]
 800127a:      	b	0x800127c <<T as switch_hal::IntoSwitch>::into_switch::h703928b8c5297d76+0x12> @ imm = #-0x2
;     }
 800127c:      	ldr	r0, [sp]
 800127e:      	add	sp, #0x8
 8001280:      	pop	{r7, pc}

08001282 <<T as core::convert::Into<U>>::into::ha4c3e50a541f856b>:
 8001282:      	sub	sp, #0x8
 8001284:      	strb.w	r0, [sp, #0x6]
 8001288:      	strb.w	r0, [sp, #0x7]
;         variant as u8 != 0
 800128c:      	ldrb.w	r0, [sp, #0x7]
 8001290:      	str	r0, [sp]
 8001292:      	b	0x8001294 <<T as core::convert::Into<U>>::into::ha4c3e50a541f856b+0x12> @ imm = #-0x2
 8001294:      	ldr	r0, [sp]
 8001296:      	and	r0, r0, #0x1
 800129a:      	add	sp, #0x8
 800129c:      	bx	lr

0800129e <<T as core::convert::Into<U>>::into::h44c4f7c44b9e349c>:
 800129e:      	sub	sp, #0x8
 80012a0:      	strb.w	r0, [sp, #0x6]
 80012a4:      	strb.w	r0, [sp, #0x7]
;         variant as _
 80012a8:      	ldrb.w	r0, [sp, #0x7]
 80012ac:      	str	r0, [sp]
 80012ae:      	b	0x80012b0 <<T as core::convert::Into<U>>::into::h44c4f7c44b9e349c+0x12> @ imm = #-0x2
 80012b0:      	ldr	r0, [sp]
 80012b2:      	add	sp, #0x8
 80012b4:      	bx	lr

080012b6 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::h473e39f9c0bdee49>:
;     fn constrain(self) -> Rcc {
 80012b6:      	push	{r4, r5, r7, lr}
 80012b8:      	add	r7, sp, #0x8
 80012ba:      	sub	sp, #0x38
;             cfgr: CFGR::default(),
 80012bc:      	str	r0, [sp, #0x4]
 80012be:      	add	r0, sp, #0x8
 80012c0:      	bl	0x8001486 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h1d6ec1ff4cff8b1c> @ imm = #0x1c2
 80012c4:      	b	0x80012c6 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::h473e39f9c0bdee49+0x10> @ imm = #-0x2
 80012c6:      	ldr	r0, [sp, #0x4]
 80012c8:      	add	r1, sp, #0x8
;         Rcc {
 80012ca:      	ldm.w	r1!, {r2, r3, r4, r12, lr}
 80012ce:      	stm.w	r0!, {r2, r3, r4, r12, lr}
 80012d2:      	ldm.w	r1, {r2, r3, r4, r5, r12, lr}
 80012d6:      	stm.w	r0, {r2, r3, r4, r5, r12, lr}
;     }
 80012da:      	add	sp, #0x38
 80012dc:      	pop	{r4, r5, r7, pc}

080012de <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hcacba82973983466E>:
;                         fn split(self, ahb: &mut AHB) -> Parts {
 80012de:      	push	{r7, lr}
 80012e0:      	mov	r7, sp
 80012e2:      	sub	sp, #0xa0
 80012e4:      	str	r0, [sp, #0xc]
 80012e6:      	str	r0, [sp, #0x18]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 80012e8:      	bl	0x8001462 <stm32f3xx_hal::rcc::AHB::enr::hfc4cf0c6d9a79c3c> @ imm = #0x176
 80012ec:      	str	r0, [sp, #0x10]
 80012ee:      	b	0x80012f0 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hcacba82973983466E+0x12> @ imm = #-0x2
 80012f0:      	ldr	r0, [sp, #0x10]
 80012f2:      	str	r0, [sp, #0x84]
 80012f4:      	str	r0, [sp, #0x8c]
 80012f6:      	str	r0, [sp, #0x90]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80012f8:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0x4b8
;         let bits = self.register.get();
 80012fc:      	str	r0, [sp, #0x88]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80012fe:      	str	r0, [sp, #0x7c]
 8001300:      	str	r0, [sp, #0x80]
 8001302:      	add	r0, sp, #0x7c
 8001304:      	str	r0, [sp, #0x74]
 8001306:      	add	r0, sp, #0x80
 8001308:      	str	r0, [sp, #0x78]
 800130a:      	ldr	r0, [sp, #0x74]
 800130c:      	ldr	r1, [sp, #0x78]
 800130e:      	bl	0x80013a8 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h489281ac04770a68E> @ imm = #0x96
 8001312:      	mov	r1, r0
 8001314:      	ldr	r0, [sp, #0x10]
 8001316:      	ldr	r1, [r1]
 8001318:      	str	r0, [sp, #0x94]
 800131a:      	str	r1, [sp, #0x98]
 800131c:      	str	r0, [sp, #0x9c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800131e:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0x21a
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 8001322:      	b	0x8001324 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hcacba82973983466E+0x46> @ imm = #-0x2
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 8001324:      	ldr	r0, [sp, #0xc]
 8001326:      	bl	0x8001474 <stm32f3xx_hal::rcc::AHB::rstr::h695af04a576b994f> @ imm = #0x14a
 800132a:      	str	r0, [sp, #0x8]
 800132c:      	b	0x800132e <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hcacba82973983466E+0x50> @ imm = #-0x2
 800132e:      	ldr	r0, [sp, #0x8]
 8001330:      	str	r0, [sp, #0x2c]
 8001332:      	str	r0, [sp, #0x34]
 8001334:      	str	r0, [sp, #0x38]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001336:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0x47a
;         let bits = self.register.get();
 800133a:      	str	r0, [sp, #0x30]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800133c:      	str	r0, [sp, #0x24]
 800133e:      	str	r0, [sp, #0x28]
 8001340:      	add	r0, sp, #0x24
 8001342:      	str	r0, [sp, #0x1c]
 8001344:      	add	r0, sp, #0x28
 8001346:      	str	r0, [sp, #0x20]
 8001348:      	ldr	r0, [sp, #0x1c]
 800134a:      	ldr	r1, [sp, #0x20]
 800134c:      	bl	0x80013da <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h3aac3fcc6ce628d8E> @ imm = #0x8a
 8001350:      	mov	r1, r0
 8001352:      	ldr	r0, [sp, #0x8]
 8001354:      	ldr	r1, [r1]
 8001356:      	str	r0, [sp, #0x3c]
 8001358:      	str	r1, [sp, #0x40]
 800135a:      	str	r0, [sp, #0x44]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800135c:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0x1dc
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 8001360:      	b	0x8001362 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hcacba82973983466E+0x84> @ imm = #-0x2
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 8001362:      	ldr	r0, [sp, #0xc]
 8001364:      	bl	0x8001474 <stm32f3xx_hal::rcc::AHB::rstr::h695af04a576b994f> @ imm = #0x10c
 8001368:      	str	r0, [sp, #0x4]
 800136a:      	b	0x800136c <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hcacba82973983466E+0x8e> @ imm = #-0x2
 800136c:      	ldr	r0, [sp, #0x4]
 800136e:      	str	r0, [sp, #0x58]
 8001370:      	str	r0, [sp, #0x60]
 8001372:      	str	r0, [sp, #0x64]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001374:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #0x43c
;         let bits = self.register.get();
 8001378:      	str	r0, [sp, #0x5c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800137a:      	str	r0, [sp, #0x50]
 800137c:      	str	r0, [sp, #0x54]
 800137e:      	add	r0, sp, #0x50
 8001380:      	str	r0, [sp, #0x48]
 8001382:      	add	r0, sp, #0x54
 8001384:      	str	r0, [sp, #0x4c]
 8001386:      	ldr	r0, [sp, #0x48]
 8001388:      	ldr	r1, [sp, #0x4c]
 800138a:      	bl	0x800140c <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h3b6baeef1714d89eE> @ imm = #0x7e
 800138e:      	mov	r1, r0
 8001390:      	ldr	r0, [sp, #0x4]
 8001392:      	ldr	r1, [r1]
 8001394:      	str	r0, [sp, #0x68]
 8001396:      	str	r1, [sp, #0x6c]
 8001398:      	str	r0, [sp, #0x70]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800139a:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #0x19e
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 800139e:      	b	0x80013a0 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hcacba82973983466E+0xc2> @ imm = #-0x2
;                         }
 80013a0:      	add	sp, #0xa0
 80013a2:      	pop	{r7, pc}

080013a4 <<bool as core::default::Default>::default::h53314390b381d8f0>:
 80013a4:      	movs	r0, #0x0
 80013a6:      	bx	lr

080013a8 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h489281ac04770a68E>:
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 80013a8:      	sub	sp, #0x28
 80013aa:      	str	r0, [sp, #0xc]
 80013ac:      	str	r1, [sp, #0x10]
 80013ae:      	str	r1, [sp, #0x18]
;         IOPEEN_W { w: self }
 80013b0:      	str	r1, [sp, #0x14]
;     }
 80013b2:      	ldr	r0, [sp, #0x14]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 80013b4:      	str	r0, [sp, #0x4]
 80013b6:      	b	0x80013b8 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h489281ac04770a68E+0x10> @ imm = #-0x2
 80013b8:      	ldr	r0, [sp, #0x4]
 80013ba:      	str	r0, [sp, #0x1c]
 80013bc:      	str	r0, [sp, #0x20]
 80013be:      	movs	r0, #0x1
 80013c0:      	strb.w	r0, [sp, #0x27]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 80013c4:      	ldr	r1, [sp, #0x20]
 80013c6:      	ldr	r0, [r1]
 80013c8:      	orr	r0, r0, #0x200000
 80013cc:      	str	r0, [r1]
;         self.w
 80013ce:      	ldr	r0, [sp, #0x20]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 80013d0:      	str	r0, [sp]
 80013d2:      	b	0x80013d4 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h489281ac04770a68E+0x2c> @ imm = #-0x2
 80013d4:      	ldr	r0, [sp]
 80013d6:      	add	sp, #0x28
 80013d8:      	bx	lr

080013da <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h3aac3fcc6ce628d8E>:
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 80013da:      	sub	sp, #0x28
 80013dc:      	str	r0, [sp, #0xc]
 80013de:      	str	r1, [sp, #0x10]
 80013e0:      	str	r1, [sp, #0x18]
;         IOPERST_W { w: self }
 80013e2:      	str	r1, [sp, #0x14]
;     }
 80013e4:      	ldr	r0, [sp, #0x14]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 80013e6:      	str	r0, [sp, #0x4]
 80013e8:      	b	0x80013ea <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h3aac3fcc6ce628d8E+0x10> @ imm = #-0x2
 80013ea:      	ldr	r0, [sp, #0x4]
 80013ec:      	str	r0, [sp, #0x1c]
 80013ee:      	str	r0, [sp, #0x20]
 80013f0:      	movs	r0, #0x1
 80013f2:      	strb.w	r0, [sp, #0x27]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 80013f6:      	ldr	r1, [sp, #0x20]
 80013f8:      	ldr	r0, [r1]
 80013fa:      	orr	r0, r0, #0x200000
 80013fe:      	str	r0, [r1]
;         self.w
 8001400:      	ldr	r0, [sp, #0x20]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 8001402:      	str	r0, [sp]
 8001404:      	b	0x8001406 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h3aac3fcc6ce628d8E+0x2c> @ imm = #-0x2
 8001406:      	ldr	r0, [sp]
 8001408:      	add	sp, #0x28
 800140a:      	bx	lr

0800140c <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h3b6baeef1714d89eE>:
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 800140c:      	sub	sp, #0x28
 800140e:      	str	r0, [sp, #0xc]
 8001410:      	str	r1, [sp, #0x10]
 8001412:      	str	r1, [sp, #0x18]
;         IOPERST_W { w: self }
 8001414:      	str	r1, [sp, #0x14]
;     }
 8001416:      	ldr	r0, [sp, #0x14]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 8001418:      	str	r0, [sp, #0x4]
 800141a:      	b	0x800141c <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h3b6baeef1714d89eE+0x10> @ imm = #-0x2
 800141c:      	ldr	r0, [sp, #0x4]
 800141e:      	str	r0, [sp, #0x1c]
 8001420:      	str	r0, [sp, #0x20]
 8001422:      	movs	r0, #0x0
 8001424:      	strb.w	r0, [sp, #0x27]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 8001428:      	ldr	r1, [sp, #0x20]
 800142a:      	ldr	r0, [r1]
 800142c:      	bic	r0, r0, #0x200000
 8001430:      	str	r0, [r1]
;         self.w
 8001432:      	ldr	r0, [sp, #0x20]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 8001434:      	str	r0, [sp]
 8001436:      	b	0x8001438 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17h3b6baeef1714d89eE+0x2c> @ imm = #-0x2
 8001438:      	ldr	r0, [sp]
 800143a:      	add	sp, #0x28
 800143c:      	bx	lr

0800143e <stm32f3xx_hal::gpio::gpioe::MODER::moder::h419a8cca1ee5ec03>:
;                         pub(crate) fn moder(&mut self) -> &$gpioy::MODER {
 800143e:      	sub	sp, #0x4
 8001440:      	str	r0, [sp]
;                             unsafe { &(*$GPIOX::ptr()).moder }
 8001442:      	b	0x8001444 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h419a8cca1ee5ec03+0x6> @ imm = #-0x2
 8001444:      	movw	r0, #0x1000
 8001448:      	movt	r0, #0x4800
;                         }
 800144c:      	add	sp, #0x4
 800144e:      	bx	lr

08001450 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h5a4856692425826a>:
;                         pub(crate) fn otyper(&mut self) -> &$gpioy::OTYPER {
 8001450:      	sub	sp, #0x4
 8001452:      	str	r0, [sp]
;                             unsafe { &(*$GPIOX::ptr()).otyper }
 8001454:      	b	0x8001456 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h5a4856692425826a+0x6> @ imm = #-0x2
 8001456:      	movw	r0, #0x1004
 800145a:      	movt	r0, #0x4800
;                         }
 800145e:      	add	sp, #0x4
 8001460:      	bx	lr

08001462 <stm32f3xx_hal::rcc::AHB::enr::hfc4cf0c6d9a79c3c>:
;     pub(crate) fn enr(&mut self) -> &rcc::AHBENR {
 8001462:      	sub	sp, #0x4
 8001464:      	str	r0, [sp]
;         unsafe { &(*RCC::ptr()).ahbenr }
 8001466:      	b	0x8001468 <stm32f3xx_hal::rcc::AHB::enr::hfc4cf0c6d9a79c3c+0x6> @ imm = #-0x2
 8001468:      	movw	r0, #0x1014
 800146c:      	movt	r0, #0x4002
;     }
 8001470:      	add	sp, #0x4
 8001472:      	bx	lr

08001474 <stm32f3xx_hal::rcc::AHB::rstr::h695af04a576b994f>:
;     pub(crate) fn rstr(&mut self) -> &rcc::AHBRSTR {
 8001474:      	sub	sp, #0x4
 8001476:      	str	r0, [sp]
;         unsafe { &(*RCC::ptr()).ahbrstr }
 8001478:      	b	0x800147a <stm32f3xx_hal::rcc::AHB::rstr::h695af04a576b994f+0x6> @ imm = #-0x2
 800147a:      	movw	r0, #0x1028
 800147e:      	movt	r0, #0x4002
;     }
 8001482:      	add	sp, #0x4
 8001484:      	bx	lr

08001486 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h1d6ec1ff4cff8b1c>:
; #[derive(Default)]
 8001486:      	push	{r4, r5, r6, r7, lr}
 8001488:      	add	r7, sp, #0xc
 800148a:      	push.w	{r8, r9, r10, r11}
 800148e:      	sub	sp, #0x34
;     hse: Option<u32>,
 8001490:      	str	r0, [sp, #0x28]
 8001492:      	bl	0x800152e <<core::option::Option<T> as core::default::Default>::default::h6b831993d3ac09fa> @ imm = #0x98
 8001496:      	str	r0, [sp, #0x2c]
 8001498:      	str	r1, [sp, #0x30]
 800149a:      	b	0x800149c <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h1d6ec1ff4cff8b1c+0x16> @ imm = #-0x2
;     hse_bypass: bool,
 800149c:      	bl	0x80013a4 <<bool as core::default::Default>::default::h53314390b381d8f0> @ imm = #-0xfc
 80014a0:      	str	r0, [sp, #0x24]
 80014a2:      	b	0x80014a4 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h1d6ec1ff4cff8b1c+0x1e> @ imm = #-0x2
;     css: bool,
 80014a4:      	bl	0x80013a4 <<bool as core::default::Default>::default::h53314390b381d8f0> @ imm = #-0x104
 80014a8:      	str	r0, [sp, #0x20]
 80014aa:      	b	0x80014ac <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h1d6ec1ff4cff8b1c+0x26> @ imm = #-0x2
;     hclk: Option<u32>,
 80014ac:      	bl	0x800152e <<core::option::Option<T> as core::default::Default>::default::h6b831993d3ac09fa> @ imm = #0x7e
 80014b0:      	str	r0, [sp, #0x18]
 80014b2:      	str	r1, [sp, #0x1c]
 80014b4:      	b	0x80014b6 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h1d6ec1ff4cff8b1c+0x30> @ imm = #-0x2
;     pclk1: Option<u32>,
 80014b6:      	bl	0x800152e <<core::option::Option<T> as core::default::Default>::default::h6b831993d3ac09fa> @ imm = #0x74
 80014ba:      	str	r0, [sp, #0x10]
 80014bc:      	str	r1, [sp, #0x14]
 80014be:      	b	0x80014c0 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h1d6ec1ff4cff8b1c+0x3a> @ imm = #-0x2
;     pclk2: Option<u32>,
 80014c0:      	bl	0x800152e <<core::option::Option<T> as core::default::Default>::default::h6b831993d3ac09fa> @ imm = #0x6a
 80014c4:      	str	r0, [sp, #0x8]
 80014c6:      	str	r1, [sp, #0xc]
 80014c8:      	b	0x80014ca <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h1d6ec1ff4cff8b1c+0x44> @ imm = #-0x2
;     sysclk: Option<u32>,
 80014ca:      	bl	0x800152e <<core::option::Option<T> as core::default::Default>::default::h6b831993d3ac09fa> @ imm = #0x60
 80014ce:      	str	r0, [sp]
 80014d0:      	str	r1, [sp, #0x4]
 80014d2:      	b	0x80014d4 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h1d6ec1ff4cff8b1c+0x4e> @ imm = #-0x2
; #[derive(Default)]
 80014d4:      	ldr	r0, [sp, #0x4]
 80014d6:      	ldr	r1, [sp, #0x28]
 80014d8:      	ldr	r2, [sp]
 80014da:      	ldr	r3, [sp, #0xc]
 80014dc:      	ldr.w	r12, [sp, #0x8]
 80014e0:      	ldr.w	lr, [sp, #0x14]
 80014e4:      	ldr	r4, [sp, #0x10]
 80014e6:      	ldr	r5, [sp, #0x1c]
 80014e8:      	ldr	r6, [sp, #0x18]
 80014ea:      	ldr.w	r8, [sp, #0x20]
 80014ee:      	ldr.w	r9, [sp, #0x24]
 80014f2:      	ldr.w	r10, [sp, #0x30]
 80014f6:      	ldr.w	r11, [sp, #0x2c]
 80014fa:      	str.w	r11, [r1]
 80014fe:      	str.w	r10, [r1, #0x4]
 8001502:      	and	r9, r9, #0x1
 8001506:      	strb.w	r9, [r1, #0x28]
 800150a:      	and	r8, r8, #0x1
 800150e:      	strb.w	r8, [r1, #0x29]
 8001512:      	str	r6, [r1, #0x8]
 8001514:      	str	r5, [r1, #0xc]
 8001516:      	str	r4, [r1, #0x10]
 8001518:      	str.w	lr, [r1, #0x14]
 800151c:      	str.w	r12, [r1, #0x18]
 8001520:      	str	r3, [r1, #0x1c]
 8001522:      	str	r2, [r1, #0x20]
 8001524:      	str	r0, [r1, #0x24]
 8001526:      	add	sp, #0x34
 8001528:      	pop.w	{r8, r9, r10, r11}
 800152c:      	pop	{r4, r5, r6, r7, pc}

0800152e <<core::option::Option<T> as core::default::Default>::default::h6b831993d3ac09fa>:
 800152e:      	sub	sp, #0x8
 8001530:      	movs	r0, #0x0
 8001532:      	str	r0, [sp]
 8001534:      	ldr	r0, [sp]
 8001536:      	ldr	r1, [sp, #0x4]
 8001538:      	add	sp, #0x8
 800153a:      	bx	lr

0800153c <core::ptr::write_volatile::hfab638922cf84546>:
 800153c:      	sub	sp, #0x8
 800153e:      	str	r0, [sp]
 8001540:      	str	r1, [sp, #0x4]
 8001542:      	str	r1, [r0]
 8001544:      	b	0x8001546 <core::ptr::write_volatile::hfab638922cf84546+0xa> @ imm = #-0x2
 8001546:      	add	sp, #0x8
 8001548:      	bx	lr

0800154a <core::ptr::read::hcce3419ac33c00d1>:
 800154a:      	sub	sp, #0x20
 800154c:      	str	r0, [sp, #0x4]
 800154e:      	str	r0, [sp, #0xc]
 8001550:      	ldr	r0, [sp, #0x18]
 8001552:      	str	r0, [sp, #0x8]
 8001554:      	b	0x8001556 <core::ptr::read::hcce3419ac33c00d1+0xc> @ imm = #-0x2
 8001556:      	add	r0, sp, #0x8
 8001558:      	str	r0, [sp, #0x10]
 800155a:      	b	0x800155c <core::ptr::read::hcce3419ac33c00d1+0x12> @ imm = #-0x2
 800155c:      	ldr	r0, [sp, #0x4]
 800155e:      	ldr	r0, [r0]
 8001560:      	str	r0, [sp, #0x8]
 8001562:      	ldr	r0, [sp, #0x8]
 8001564:      	str	r0, [sp]
 8001566:      	str	r0, [sp, #0x14]
 8001568:      	str	r0, [sp, #0x1c]
 800156a:      	b	0x800156c <core::ptr::read::hcce3419ac33c00d1+0x22> @ imm = #-0x2
 800156c:      	ldr	r0, [sp]
 800156e:      	add	sp, #0x20
 8001570:      	bx	lr

08001572 <core::ptr::write::h169dec757da6f974>:
 8001572:      	sub	sp, #0xc
 8001574:      	str	r1, [sp]
 8001576:      	mov	r1, r0
 8001578:      	ldr	r0, [sp]
 800157a:      	str	r0, [sp, #0x4]
 800157c:      	str	r1, [sp, #0x8]
 800157e:      	ldr	r0, [sp, #0x4]
 8001580:      	str	r0, [r1]
 8001582:      	add	sp, #0xc
 8001584:      	bx	lr

08001586 <ResetTrampoline>:
;             fn trampoline() -> ! {
 8001586:      	push	{r7, lr}
 8001588:      	mov	r7, sp
;                 unsafe { main() }
 800158a:      	bl	0x80001ec <main>        @ imm = #-0x13a2
 800158e:      	trap

08001590 <WWDG>:
; pub unsafe extern "C" fn DefaultHandler_() -> ! {
 8001590:      	push	{r7, lr}
 8001592:      	mov	r7, sp
 8001594:      	sub	sp, #0x8
;     loop {
 8001596:      	b	0x8001598 <WWDG+0x8>    @ imm = #-0x2
 8001598:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 800159a:      	strb	r0, [r7, #-1]
 800159e:      	ldrb	r0, [r7, #-1]
 80015a2:      	bl	0x8001658 <core::sync::atomic::compiler_fence::h645110bcd707773b> @ imm = #0xb2
 80015a6:      	b	0x8001598 <WWDG+0x8>    @ imm = #-0x12

080015a8 <__pre_init>:
; pub unsafe extern "C" fn DefaultPreInit() {}
 80015a8:      	bx	lr

080015aa <core::fmt::Arguments::new_v1::h72263942a3129306>:
 80015aa:      	push	{r7, lr}
 80015ac:      	mov	r7, sp
 80015ae:      	sub	sp, #0x50
 80015b0:      	str	r3, [sp, #0x8]
 80015b2:      	str	r2, [sp, #0xc]
 80015b4:      	str	r1, [sp, #0x10]
 80015b6:      	str	r0, [sp, #0x14]
 80015b8:      	ldr	r0, [r7, #0x8]
 80015ba:      	str	r0, [sp, #0x18]
 80015bc:      	str	r1, [sp, #0x40]
 80015be:      	str	r2, [sp, #0x44]
 80015c0:      	str	r3, [sp, #0x48]
 80015c2:      	str	r0, [sp, #0x4c]
 80015c4:      	cmp	r2, r0
 80015c6:      	blo	0x80015de <core::fmt::Arguments::new_v1::h72263942a3129306+0x34> @ imm = #0x14
 80015c8:      	b	0x80015ca <core::fmt::Arguments::new_v1::h72263942a3129306+0x20> @ imm = #-0x2
 80015ca:      	ldr	r1, [sp, #0xc]
 80015cc:      	ldr	r0, [sp, #0x18]
 80015ce:      	adds	r2, r0, #0x1
 80015d0:      	movs	r0, #0x0
 80015d2:      	cmp	r1, r2
 80015d4:      	it	hi
 80015d6:      	movhi	r0, #0x1
 80015d8:      	strb	r0, [r7, #-49]
 80015dc:      	b	0x80015e6 <core::fmt::Arguments::new_v1::h72263942a3129306+0x3c> @ imm = #0x6
 80015de:      	movs	r0, #0x1
 80015e0:      	strb	r0, [r7, #-49]
 80015e4:      	b	0x80015e6 <core::fmt::Arguments::new_v1::h72263942a3129306+0x3c> @ imm = #-0x2
 80015e6:      	ldrb	r0, [r7, #-49]
 80015ea:      	lsls	r0, r0, #0x1f
 80015ec:      	cbnz	r0, 0x8001626 <core::fmt::Arguments::new_v1::h72263942a3129306+0x7c> @ imm = #0x36
 80015ee:      	b	0x80015f0 <core::fmt::Arguments::new_v1::h72263942a3129306+0x46> @ imm = #-0x2
 80015f0:      	ldr	r0, [sp, #0x18]
 80015f2:      	ldr	r1, [sp, #0x14]
 80015f4:      	ldr	r2, [sp, #0x8]
 80015f6:      	ldr	r3, [sp, #0xc]
 80015f8:      	ldr.w	r12, [sp, #0x10]
 80015fc:      	mov.w	lr, #0x0
 8001600:      	str.w	lr, [sp, #0x3c]
 8001604:      	str.w	lr, [sp, #0x38]
 8001608:      	str.w	lr, [sp, #0x38]
 800160c:      	str.w	r12, [r1]
 8001610:      	str	r3, [r1, #0x4]
 8001612:      	ldr.w	r12, [sp, #0x38]
 8001616:      	ldr	r3, [sp, #0x3c]
 8001618:      	str.w	r12, [r1, #0x8]
 800161c:      	str	r3, [r1, #0xc]
 800161e:      	str	r2, [r1, #0x10]
 8001620:      	str	r0, [r1, #0x14]
 8001622:      	add	sp, #0x50
 8001624:      	pop	{r7, pc}
 8001626:      	mov	r1, sp
 8001628:      	movs	r0, #0x0
 800162a:      	str	r0, [r1]
 800162c:      	movw	r1, #0x3960
 8001630:      	movt	r1, #0x800
 8001634:      	movw	r3, #0x3968
 8001638:      	movt	r3, #0x800
 800163c:      	add	r0, sp, #0x20
 800163e:      	movs	r2, #0x1
 8001640:      	bl	0x80015aa <core::fmt::Arguments::new_v1::h72263942a3129306> @ imm = #-0x9a
 8001644:      	b	0x8001646 <core::fmt::Arguments::new_v1::h72263942a3129306+0x9c> @ imm = #-0x2
 8001646:      	movw	r1, #0x39b4
 800164a:      	movt	r1, #0x800
 800164e:      	add	r0, sp, #0x20
 8001650:      	bl	0x8001acc <core::panicking::panic_fmt::h65fc083b3717f98b> @ imm = #0x478
 8001654:      	trap
 8001656:      	bmi	0x8001602 <core::fmt::Arguments::new_v1::h72263942a3129306+0x58> @ imm = #-0x58

08001658 <core::sync::atomic::compiler_fence::h645110bcd707773b>:
 8001658:      	push	{r7, lr}
 800165a:      	mov	r7, sp
 800165c:      	sub	sp, #0x28
 800165e:      	strb	r0, [r7, #-25]
 8001662:      	ldrb	r0, [r7, #-25]
 8001666:      	str	r0, [sp, #0x8]
 8001668:      	ldr	r1, [sp, #0x8]
 800166a:      	tbb	[pc, r1]

0800166e <$d.1>:
 800166e:	04 14 15 16	.word	0x16151404
 8001672:	17 00		.short	0x0017

08001674 <$t.2>:
 8001674:      	trap
 8001676:      	mov	r1, sp
 8001678:      	movs	r0, #0x0
 800167a:      	str	r0, [r1]
 800167c:      	movw	r1, #0x39f8
 8001680:      	movt	r1, #0x800
 8001684:      	movw	r3, #0x3a00
 8001688:      	movt	r3, #0x800
 800168c:      	add	r0, sp, #0x10
 800168e:      	movs	r2, #0x1
 8001690:      	bl	0x80015aa <core::fmt::Arguments::new_v1::h72263942a3129306> @ imm = #-0xea
 8001694:      	b	0x80016a2 <$t.2+0x2e>   @ imm = #0xa
 8001696:      	b	0x800169e <$t.2+0x2a>   @ imm = #0x4
 8001698:      	b	0x800169e <$t.2+0x2a>   @ imm = #0x2
 800169a:      	b	0x800169e <$t.2+0x2a>   @ imm = #0x0
 800169c:      	b	0x800169e <$t.2+0x2a>   @ imm = #-0x2
 800169e:      	add	sp, #0x28
 80016a0:      	pop	{r7, pc}
 80016a2:      	movw	r1, #0x3a50
 80016a6:      	movt	r1, #0x800
 80016aa:      	add	r0, sp, #0x10
 80016ac:      	bl	0x8001acc <core::panicking::panic_fmt::h65fc083b3717f98b> @ imm = #0x41c
 80016b0:      	trap

080016b2 <r0::zero_bss::he0c3dc46d6d157a5>:
; pub unsafe fn zero_bss<T>(mut sbss: *mut T, ebss: *mut T)
 80016b2:      	push	{r7, lr}
 80016b4:      	mov	r7, sp
 80016b6:      	sub	sp, #0x30
 80016b8:      	str	r1, [sp, #0x10]
 80016ba:      	str	r0, [sp, #0x14]
 80016bc:      	str	r1, [sp, #0x18]
;     while sbss < ebss {
 80016be:      	b	0x80016c0 <r0::zero_bss::he0c3dc46d6d157a5+0xe> @ imm = #-0x2
 80016c0:      	ldr	r1, [sp, #0x10]
 80016c2:      	ldr	r0, [sp, #0x14]
 80016c4:      	cmp	r0, r1
 80016c6:      	blo	0x80016ce <r0::zero_bss::he0c3dc46d6d157a5+0x1c> @ imm = #0x4
 80016c8:      	b	0x80016ca <r0::zero_bss::he0c3dc46d6d157a5+0x18> @ imm = #-0x2
; }
 80016ca:      	add	sp, #0x30
 80016cc:      	pop	{r7, pc}
;         ptr::write_volatile(sbss, mem::zeroed());
 80016ce:      	ldr	r0, [sp, #0x14]
 80016d0:      	str	r0, [sp, #0x8]
 80016d2:      	bl	0x8001766 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::h116e783851282e56> @ imm = #0x90
 80016d6:      	mov	r1, r0
 80016d8:      	str	r1, [sp, #0xc]
 80016da:      	str	r0, [sp, #0x1c]
 80016dc:      	str	r0, [sp, #0x20]
;         ptr::write_volatile(sbss, mem::zeroed());
 80016de:      	b	0x80016e0 <r0::zero_bss::he0c3dc46d6d157a5+0x2e> @ imm = #-0x2
 80016e0:      	ldr	r1, [sp, #0xc]
 80016e2:      	ldr	r0, [sp, #0x8]
 80016e4:      	bl	0x800153c <core::ptr::write_volatile::hfab638922cf84546> @ imm = #-0x1ac
 80016e8:      	b	0x80016ea <r0::zero_bss::he0c3dc46d6d157a5+0x38> @ imm = #-0x2
;         sbss = sbss.offset(1);
 80016ea:      	ldr	r0, [sp, #0x14]
 80016ec:      	str	r0, [sp, #0x24]
 80016ee:      	movs	r1, #0x1
 80016f0:      	str	r1, [sp, #0x28]
 80016f2:      	adds	r0, #0x4
 80016f4:      	str	r0, [sp, #0x2c]
 80016f6:      	ldr	r0, [sp, #0x2c]
;         sbss = sbss.offset(1);
 80016f8:      	str	r0, [sp, #0x4]
 80016fa:      	b	0x80016fc <r0::zero_bss::he0c3dc46d6d157a5+0x4a> @ imm = #-0x2
 80016fc:      	ldr	r0, [sp, #0x4]
 80016fe:      	str	r0, [sp, #0x14]
;     while sbss < ebss {
 8001700:      	b	0x80016c0 <r0::zero_bss::he0c3dc46d6d157a5+0xe> @ imm = #-0x44

08001702 <r0::init_data::hfad7f874e227c251>:
; pub unsafe fn init_data<T>(
 8001702:      	push	{r7, lr}
 8001704:      	mov	r7, sp
 8001706:      	sub	sp, #0x38
 8001708:      	str	r1, [sp, #0x10]
 800170a:      	str	r0, [sp, #0x14]
 800170c:      	str	r2, [sp, #0x18]
 800170e:      	str	r1, [sp, #0x1c]
;     while sdata < edata {
 8001710:      	b	0x8001712 <r0::init_data::hfad7f874e227c251+0x10> @ imm = #-0x2
 8001712:      	ldr	r1, [sp, #0x10]
 8001714:      	ldr	r0, [sp, #0x14]
 8001716:      	cmp	r0, r1
 8001718:      	blo	0x8001720 <r0::init_data::hfad7f874e227c251+0x1e> @ imm = #0x4
 800171a:      	b	0x800171c <r0::init_data::hfad7f874e227c251+0x1a> @ imm = #-0x2
; }
 800171c:      	add	sp, #0x38
 800171e:      	pop	{r7, pc}
;         ptr::write(sdata, ptr::read(sidata));
 8001720:      	ldr	r0, [sp, #0x14]
 8001722:      	str	r0, [sp, #0x8]
 8001724:      	ldr	r0, [sp, #0x18]
 8001726:      	bl	0x800154a <core::ptr::read::hcce3419ac33c00d1> @ imm = #-0x1e0
 800172a:      	str	r0, [sp, #0xc]
 800172c:      	b	0x800172e <r0::init_data::hfad7f874e227c251+0x2c> @ imm = #-0x2
 800172e:      	ldr	r1, [sp, #0xc]
 8001730:      	ldr	r0, [sp, #0x8]
 8001732:      	bl	0x8001572 <core::ptr::write::h169dec757da6f974> @ imm = #-0x1c4
 8001736:      	b	0x8001738 <r0::init_data::hfad7f874e227c251+0x36> @ imm = #-0x2
;         sdata = sdata.offset(1);
 8001738:      	ldr	r0, [sp, #0x14]
 800173a:      	str	r0, [sp, #0x20]
 800173c:      	movs	r1, #0x1
 800173e:      	str	r1, [sp, #0x24]
 8001740:      	adds	r0, #0x4
 8001742:      	str	r0, [sp, #0x28]
 8001744:      	ldr	r0, [sp, #0x28]
;         sdata = sdata.offset(1);
 8001746:      	str	r0, [sp, #0x4]
 8001748:      	b	0x800174a <r0::init_data::hfad7f874e227c251+0x48> @ imm = #-0x2
 800174a:      	ldr	r0, [sp, #0x4]
 800174c:      	str	r0, [sp, #0x14]
;         sidata = sidata.offset(1);
 800174e:      	ldr	r0, [sp, #0x18]
 8001750:      	str	r0, [sp, #0x2c]
 8001752:      	movs	r1, #0x1
 8001754:      	str	r1, [sp, #0x30]
 8001756:      	adds	r0, #0x4
 8001758:      	str	r0, [sp, #0x34]
 800175a:      	ldr	r0, [sp, #0x34]
;         sidata = sidata.offset(1);
 800175c:      	str	r0, [sp]
 800175e:      	b	0x8001760 <r0::init_data::hfad7f874e227c251+0x5e> @ imm = #-0x2
 8001760:      	ldr	r0, [sp]
 8001762:      	str	r0, [sp, #0x18]
;     while sdata < edata {
 8001764:      	b	0x8001712 <r0::init_data::hfad7f874e227c251+0x10> @ imm = #-0x56

08001766 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::h116e783851282e56>:
 8001766:      	push	{r7, lr}
 8001768:      	mov	r7, sp
 800176a:      	sub	sp, #0x18
 800176c:      	ldr	r0, [sp, #0x8]
 800176e:      	str	r0, [sp]
 8001770:      	b	0x8001772 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::h116e783851282e56+0xc> @ imm = #-0x2
 8001772:      	mov	r0, sp
 8001774:      	str	r0, [sp, #0x4]
 8001776:      	b	0x8001778 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::h116e783851282e56+0x12> @ imm = #-0x2
 8001778:      	mov	r0, sp
 800177a:      	str	r0, [sp, #0xc]
 800177c:      	movs	r1, #0x0
 800177e:      	strb	r1, [r7, #-5]
 8001782:      	movs	r2, #0x1
 8001784:      	str	r2, [sp, #0x14]
 8001786:      	bl	0x8001792 <core::intrinsics::write_bytes::h1639e83e373d0148> @ imm = #0x8
 800178a:      	b	0x800178c <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::h116e783851282e56+0x26> @ imm = #-0x2
 800178c:      	ldr	r0, [sp]
 800178e:      	add	sp, #0x18
 8001790:      	pop	{r7, pc}

08001792 <core::intrinsics::write_bytes::h1639e83e373d0148>:
 8001792:      	push	{r7, lr}
 8001794:      	mov	r7, sp
 8001796:      	sub	sp, #0x10
 8001798:      	str	r2, [sp]
 800179a:      	mov	r2, r1
 800179c:      	ldr	r1, [sp]
 800179e:      	str	r0, [sp, #0x4]
 80017a0:      	strb	r2, [r7, #-5]
 80017a4:      	str	r1, [sp, #0xc]
 80017a6:      	lsls	r1, r1, #0x2
 80017a8:      	uxtb	r2, r2
 80017aa:      	bl	0x80036a6 <__aeabi_memset4> @ imm = #0x1ef8
 80017ae:      	b	0x80017b0 <core::intrinsics::write_bytes::h1639e83e373d0148+0x1e> @ imm = #-0x2
 80017b0:      	add	sp, #0x10
 80017b2:      	pop	{r7, pc}

080017b4 <core::ptr::read_volatile::h635dd44508193a2a>:
 80017b4:      	sub	sp, #0xc
 80017b6:      	str	r0, [sp, #0x4]
 80017b8:      	ldr	r0, [r0]
 80017ba:      	str	r0, [sp, #0x8]
 80017bc:      	ldr	r0, [sp, #0x8]
 80017be:      	str	r0, [sp]
 80017c0:      	b	0x80017c2 <core::ptr::read_volatile::h635dd44508193a2a+0xe> @ imm = #-0x2
 80017c2:      	ldr	r0, [sp]
 80017c4:      	add	sp, #0xc
 80017c6:      	bx	lr

080017c8 <core::ptr::write_volatile::h12e0d4654b92aae2>:
 80017c8:      	sub	sp, #0x8
 80017ca:      	str	r0, [sp]
 80017cc:      	strh.w	r1, [sp, #0x6]
 80017d0:      	strh	r1, [r0]
 80017d2:      	b	0x80017d4 <core::ptr::write_volatile::h12e0d4654b92aae2+0xc> @ imm = #-0x2
 80017d4:      	add	sp, #0x8
 80017d6:      	bx	lr

080017d8 <core::ptr::write_volatile::h71e845d74288a06b>:
 80017d8:      	sub	sp, #0x8
 80017da:      	str	r0, [sp]
 80017dc:      	str	r1, [sp, #0x4]
 80017de:      	str	r1, [r0]
 80017e0:      	b	0x80017e2 <core::ptr::write_volatile::h71e845d74288a06b+0xa> @ imm = #-0x2
 80017e2:      	add	sp, #0x8
 80017e4:      	bx	lr

080017e6 <core::ptr::write_volatile::h9f5e46fc36285550>:
 80017e6:      	sub	sp, #0x8
 80017e8:      	str	r0, [sp]
 80017ea:      	strb.w	r1, [sp, #0x7]
 80017ee:      	strb	r1, [r0]
 80017f0:      	b	0x80017f2 <core::ptr::write_volatile::h9f5e46fc36285550+0xc> @ imm = #-0x2
 80017f2:      	add	sp, #0x8
 80017f4:      	bx	lr

080017f6 <core::ptr::slice_from_raw_parts::hb8091b445d5ca592>:
 80017f6:      	push	{r7, lr}
 80017f8:      	mov	r7, sp
 80017fa:      	sub	sp, #0x18
 80017fc:      	str	r1, [sp, #0x8]
 80017fe:      	str	r0, [sp, #0x10]
 8001800:      	str	r1, [sp, #0x14]
 8001802:      	bl	0x80018e6 <core::ptr::const_ptr::<impl *const T>::cast::h01646cd6fc454d3a> @ imm = #0xe0
 8001806:      	str	r0, [sp, #0xc]
 8001808:      	b	0x800180a <core::ptr::slice_from_raw_parts::hb8091b445d5ca592+0x14> @ imm = #-0x2
 800180a:      	ldr	r1, [sp, #0x8]
 800180c:      	ldr	r0, [sp, #0xc]
 800180e:      	bl	0x800192a <core::ptr::metadata::from_raw_parts::hc8e55297bff96227> @ imm = #0x118
 8001812:      	str	r0, [sp]
 8001814:      	str	r1, [sp, #0x4]
 8001816:      	b	0x8001818 <core::ptr::slice_from_raw_parts::hb8091b445d5ca592+0x22> @ imm = #-0x2
 8001818:      	ldr	r1, [sp, #0x4]
 800181a:      	ldr	r0, [sp]
 800181c:      	add	sp, #0x18
 800181e:      	pop	{r7, pc}

08001820 <core::ptr::slice_from_raw_parts::hcea3699432801c22>:
 8001820:      	push	{r7, lr}
 8001822:      	mov	r7, sp
 8001824:      	sub	sp, #0x18
 8001826:      	str	r1, [sp, #0x8]
 8001828:      	str	r0, [sp, #0x10]
 800182a:      	str	r1, [sp, #0x14]
 800182c:      	bl	0x80018ee <core::ptr::const_ptr::<impl *const T>::cast::hf2c0e6ee79201715> @ imm = #0xbe
 8001830:      	str	r0, [sp, #0xc]
 8001832:      	b	0x8001834 <core::ptr::slice_from_raw_parts::hcea3699432801c22+0x14> @ imm = #-0x2
 8001834:      	ldr	r1, [sp, #0x8]
 8001836:      	ldr	r0, [sp, #0xc]
 8001838:      	bl	0x8001910 <core::ptr::metadata::from_raw_parts::h40c01852fe954f1a> @ imm = #0xd4
 800183c:      	str	r0, [sp]
 800183e:      	str	r1, [sp, #0x4]
 8001840:      	b	0x8001842 <core::ptr::slice_from_raw_parts::hcea3699432801c22+0x22> @ imm = #-0x2
 8001842:      	ldr	r1, [sp, #0x4]
 8001844:      	ldr	r0, [sp]
 8001846:      	add	sp, #0x18
 8001848:      	pop	{r7, pc}

0800184a <core::ptr::read::ha01afccd5ea504ef>:
 800184a:      	sub	sp, #0x20
 800184c:      	str	r0, [sp, #0x4]
 800184e:      	str	r0, [sp, #0xc]
 8001850:      	ldr	r0, [sp, #0x18]
 8001852:      	str	r0, [sp, #0x8]
 8001854:      	b	0x8001856 <core::ptr::read::ha01afccd5ea504ef+0xc> @ imm = #-0x2
 8001856:      	add	r0, sp, #0x8
 8001858:      	str	r0, [sp, #0x10]
 800185a:      	b	0x800185c <core::ptr::read::ha01afccd5ea504ef+0x12> @ imm = #-0x2
 800185c:      	ldr	r0, [sp, #0x4]
 800185e:      	ldr	r0, [r0]
 8001860:      	str	r0, [sp, #0x8]
 8001862:      	ldr	r0, [sp, #0x8]
 8001864:      	str	r0, [sp]
 8001866:      	str	r0, [sp, #0x14]
 8001868:      	str	r0, [sp, #0x1c]
 800186a:      	b	0x800186c <core::ptr::read::ha01afccd5ea504ef+0x22> @ imm = #-0x2
 800186c:      	ldr	r0, [sp]
 800186e:      	add	sp, #0x20
 8001870:      	bx	lr

08001872 <core::ptr::read::hd00696b5c2f0fc83>:
 8001872:      	sub	sp, #0x20
 8001874:      	str	r0, [sp, #0x4]
 8001876:      	str	r0, [sp, #0xc]
 8001878:      	ldr	r0, [sp, #0x18]
 800187a:      	str	r0, [sp, #0x8]
 800187c:      	b	0x800187e <core::ptr::read::hd00696b5c2f0fc83+0xc> @ imm = #-0x2
 800187e:      	add	r0, sp, #0x8
 8001880:      	str	r0, [sp, #0x10]
 8001882:      	b	0x8001884 <core::ptr::read::hd00696b5c2f0fc83+0x12> @ imm = #-0x2
 8001884:      	ldr	r0, [sp, #0x4]
 8001886:      	ldr	r0, [r0]
 8001888:      	str	r0, [sp, #0x8]
 800188a:      	ldr	r0, [sp, #0x8]
 800188c:      	str	r0, [sp]
 800188e:      	str	r0, [sp, #0x14]
 8001890:      	str	r0, [sp, #0x1c]
 8001892:      	b	0x8001894 <core::ptr::read::hd00696b5c2f0fc83+0x22> @ imm = #-0x2
 8001894:      	ldr	r0, [sp]
 8001896:      	add	sp, #0x20
 8001898:      	bx	lr

0800189a <core::ptr::read::hd82ba8f9205cc74b>:
 800189a:      	sub	sp, #0x1c
 800189c:      	str	r0, [sp, #0x4]
 800189e:      	str	r0, [sp, #0xc]
 80018a0:      	ldrh.w	r0, [sp, #0x18]
 80018a4:      	strh.w	r0, [sp, #0xa]
 80018a8:      	b	0x80018aa <core::ptr::read::hd82ba8f9205cc74b+0x10> @ imm = #-0x2
 80018aa:      	add.w	r0, sp, #0xa
 80018ae:      	str	r0, [sp, #0x10]
 80018b0:      	b	0x80018b2 <core::ptr::read::hd82ba8f9205cc74b+0x18> @ imm = #-0x2
 80018b2:      	ldr	r0, [sp, #0x4]
 80018b4:      	ldrh	r0, [r0]
 80018b6:      	strh.w	r0, [sp, #0xa]
 80018ba:      	ldrh.w	r0, [sp, #0xa]
 80018be:      	mov	r1, r0
 80018c0:      	str	r1, [sp]
 80018c2:      	strh.w	r0, [sp, #0x16]
 80018c6:      	strh.w	r0, [sp, #0x1a]
 80018ca:      	b	0x80018cc <core::ptr::read::hd82ba8f9205cc74b+0x32> @ imm = #-0x2
 80018cc:      	ldr	r0, [sp]
 80018ce:      	add	sp, #0x1c
 80018d0:      	bx	lr

080018d2 <core::ptr::write::hbed7a82ba2c921e1>:
 80018d2:      	sub	sp, #0xc
 80018d4:      	str	r1, [sp]
 80018d6:      	mov	r1, r0
 80018d8:      	ldr	r0, [sp]
 80018da:      	str	r0, [sp, #0x4]
 80018dc:      	str	r1, [sp, #0x8]
 80018de:      	ldr	r0, [sp, #0x4]
 80018e0:      	str	r0, [r1]
 80018e2:      	add	sp, #0xc
 80018e4:      	bx	lr

080018e6 <core::ptr::const_ptr::<impl *const T>::cast::h01646cd6fc454d3a>:
 80018e6:      	sub	sp, #0x4
 80018e8:      	str	r0, [sp]
 80018ea:      	add	sp, #0x4
 80018ec:      	bx	lr

080018ee <core::ptr::const_ptr::<impl *const T>::cast::hf2c0e6ee79201715>:
 80018ee:      	sub	sp, #0x4
 80018f0:      	str	r0, [sp]
 80018f2:      	add	sp, #0x4
 80018f4:      	bx	lr

080018f6 <<usize as core::iter::range::Step>::forward_unchecked::he179377cf6e10896>:
 80018f6:      	sub	sp, #0x18
 80018f8:      	str	r0, [sp, #0x4]
 80018fa:      	str	r1, [sp, #0x8]
 80018fc:      	str	r0, [sp, #0xc]
 80018fe:      	str	r1, [sp, #0x10]
 8001900:      	add	r0, r1
 8001902:      	str	r0, [sp, #0x14]
 8001904:      	ldr	r0, [sp, #0x14]
 8001906:      	str	r0, [sp]
 8001908:      	b	0x800190a <<usize as core::iter::range::Step>::forward_unchecked::he179377cf6e10896+0x14> @ imm = #-0x2
 800190a:      	ldr	r0, [sp]
 800190c:      	add	sp, #0x18
 800190e:      	bx	lr

08001910 <core::ptr::metadata::from_raw_parts::h40c01852fe954f1a>:
 8001910:      	sub	sp, #0x18
 8001912:      	str	r0, [sp, #0x10]
 8001914:      	str	r1, [sp, #0x14]
 8001916:      	str	r0, [sp, #0x8]
 8001918:      	str	r1, [sp, #0xc]
 800191a:      	ldr	r1, [sp, #0x8]
 800191c:      	ldr	r0, [sp, #0xc]
 800191e:      	str	r1, [sp]
 8001920:      	str	r0, [sp, #0x4]
 8001922:      	ldr	r0, [sp]
 8001924:      	ldr	r1, [sp, #0x4]
 8001926:      	add	sp, #0x18
 8001928:      	bx	lr

0800192a <core::ptr::metadata::from_raw_parts::hc8e55297bff96227>:
 800192a:      	sub	sp, #0x18
 800192c:      	str	r0, [sp, #0x10]
 800192e:      	str	r1, [sp, #0x14]
 8001930:      	str	r0, [sp, #0x8]
 8001932:      	str	r1, [sp, #0xc]
 8001934:      	ldr	r1, [sp, #0x8]
 8001936:      	ldr	r0, [sp, #0xc]
 8001938:      	str	r1, [sp]
 800193a:      	str	r0, [sp, #0x4]
 800193c:      	ldr	r0, [sp]
 800193e:      	ldr	r1, [sp, #0x4]
 8001940:      	add	sp, #0x18
 8001942:      	bx	lr

08001944 <__cpsid>:
 8001944:      	cpsid i
 8001946:      	bx	lr

08001948 <__cpsie>:
 8001948:      	cpsie i
 800194a:      	bx	lr

0800194c <__primask_r>:
 800194c:      	mrs	r0, primask
 8001950:      	bx	lr

08001952 <bare_metal::CriticalSection::new::hf0487a4381cff786>:
;     }
 8001952:      	bx	lr

08001954 <core::ops::function::FnOnce::call_once::h631b2f7b6e3a8bf7>:
 8001954:      	push	{r7, lr}
 8001956:      	mov	r7, sp
 8001958:      	bl	0x8002228 <core::slice::index::slice_start_index_len_fail_rt::h4f6d799cdb288644> @ imm = #0x8cc
 800195c:      	trap

0800195e <core::ops::function::FnOnce::call_once::h7fe11166fe9f2fed>:
 800195e:      	push	{r7, lr}
 8001960:      	mov	r7, sp
 8001962:      	bl	0x800227a <core::slice::index::slice_end_index_len_fail_rt::h81c5964ce58eeccb> @ imm = #0x914
 8001966:      	trap

08001968 <core::ops::function::FnOnce::call_once::hca38ef263e6e8c73>:
 8001968:      	push	{r7, lr}
 800196a:      	mov	r7, sp
 800196c:      	bl	0x80022cc <core::slice::index::slice_index_order_fail_rt::h271d7c399f051c19> @ imm = #0x95c
 8001970:      	trap

08001972 <core::ops::function::FnOnce::call_once::hd6c517d3a6209a61>:
 8001972:      	ldr	r0, [r0]
 8001974:      	b	0x8001974 <core::ops::function::FnOnce::call_once::hd6c517d3a6209a61+0x2> @ imm = #-0x4

08001976 <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>::hc1d0952f46ba3e44>:
 8001976:      	bx	lr

08001978 <core::intrinsics::const_eval_select::h5043eedffcffa74b>:
 8001978:      	push	{r7, lr}
 800197a:      	mov	r7, sp
 800197c:      	bl	0x8001968 <core::ops::function::FnOnce::call_once::hca38ef263e6e8c73> @ imm = #-0x18
 8001980:      	trap

08001982 <core::intrinsics::const_eval_select::h622725240bac45cc>:
 8001982:      	push	{r7, lr}
 8001984:      	mov	r7, sp
 8001986:      	bl	0x8001954 <core::ops::function::FnOnce::call_once::h631b2f7b6e3a8bf7> @ imm = #-0x36
 800198a:      	trap

0800198c <core::intrinsics::const_eval_select::h8a95194b37dec952>:
 800198c:      	push	{r7, lr}
 800198e:      	mov	r7, sp
 8001990:      	bl	0x800195e <core::ops::function::FnOnce::call_once::h7fe11166fe9f2fed> @ imm = #-0x36
 8001994:      	trap

08001996 <<T as core::any::Any>::type_id::h0f3ec1a36ec1343b>:
 8001996:      	movw	r0, #0x3999
 800199a:      	movw	r1, #0x1e4f
 800199e:      	movt	r0, #0xb7c5
 80019a2:      	movt	r1, #0x50fe
 80019a6:      	bx	lr

080019a8 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::h588f49c526ded6ea>:
 80019a8:      	push	{r4, r5, r6, r7, lr}
 80019aa:      	add	r7, sp, #0xc
 80019ac:      	str	r8, [sp, #-4]!
 80019b0:      	sub	sp, #0x38
 80019b2:      	ldrd	r4, r5, [r1, #24]
 80019b6:      	movw	r1, #0x3a9c
 80019ba:      	ldr	r3, [r5, #0xc]
 80019bc:      	mov	r8, r0
 80019be:      	movt	r1, #0x800
 80019c2:      	movs	r2, #0xc
 80019c4:      	mov	r0, r4
 80019c6:      	blx	r3
 80019c8:      	cbz	r0, 0x80019d6 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::h588f49c526ded6ea+0x2e> @ imm = #0xa
 80019ca:      	movs	r6, #0x1
 80019cc:      	mov	r0, r6
 80019ce:      	add	sp, #0x38
 80019d0:      	ldr	r8, [sp], #4
 80019d4:      	pop	{r4, r5, r6, r7, pc}
 80019d6:      	ldr.w	r0, [r8, #0x8]
 80019da:      	cbz	r0, 0x80019e8 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::h588f49c526ded6ea+0x40> @ imm = #0xa
 80019dc:      	str	r0, [sp, #0x4]
 80019de:      	movw	r0, #0x2a25
 80019e2:      	movt	r0, #0x800
 80019e6:      	b	0x8001a14 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::h588f49c526ded6ea+0x6c> @ imm = #0x2a
 80019e8:      	ldrd	r6, r0, [r8]
 80019ec:      	ldr	r1, [r0, #0xc]
 80019ee:      	mov	r0, r6
 80019f0:      	blx	r1
 80019f2:      	movw	r2, #0x3dc7
 80019f6:      	movt	r2, #0xb8ae
 80019fa:      	eors	r1, r2
 80019fc:      	movw	r2, #0xf20b
 8001a00:      	movt	r2, #0x22b9
 8001a04:      	eors	r0, r2
 8001a06:      	orrs	r0, r1
 8001a08:      	bne	0x8001a44 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::h588f49c526ded6ea+0x9c> @ imm = #0x38
 8001a0a:      	movw	r0, #0x2a17
 8001a0e:      	str	r6, [sp, #0x4]
 8001a10:      	movt	r0, #0x800
 8001a14:      	str	r0, [sp, #0xc]
 8001a16:      	add	r0, sp, #0x4
 8001a18:      	str	r0, [sp, #0x8]
 8001a1a:      	add	r0, sp, #0x8
 8001a1c:      	str	r0, [sp, #0x30]
 8001a1e:      	movs	r0, #0x0
 8001a20:      	str	r0, [sp, #0x2c]
 8001a22:      	add	r2, sp, #0x20
 8001a24:      	str	r0, [sp, #0x28]
 8001a26:      	movs	r0, #0x2
 8001a28:      	str	r0, [sp, #0x24]
 8001a2a:      	movw	r0, #0x3aac
 8001a2e:      	movt	r0, #0x800
 8001a32:      	movs	r6, #0x1
 8001a34:      	str	r0, [sp, #0x20]
 8001a36:      	mov	r0, r4
 8001a38:      	mov	r1, r5
 8001a3a:      	str	r6, [sp, #0x34]
 8001a3c:      	bl	0x8001af8 <core::fmt::write::h5f65a040c5660086> @ imm = #0xb8
 8001a40:      	cmp	r0, #0x0
 8001a42:      	bne	0x80019cc <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::h588f49c526ded6ea+0x24> @ imm = #-0x7a
 8001a44:      	ldr.w	r0, [r8, #0xc]
 8001a48:      	movw	r1, #0x291b
 8001a4c:      	movt	r1, #0x800
 8001a50:      	add.w	r2, r0, #0xc
 8001a54:      	str	r1, [sp, #0x1c]
 8001a56:      	strd	r1, r2, [sp, #20]
 8001a5a:      	add.w	r1, r0, #0x8
 8001a5e:      	str	r1, [sp, #0x10]
 8001a60:      	movw	r1, #0x2a0b
 8001a64:      	movt	r1, #0x800
 8001a68:      	add	r2, sp, #0x20
 8001a6a:      	strd	r0, r1, [sp, #8]
 8001a6e:      	add	r1, sp, #0x8
 8001a70:      	movs	r0, #0x3
 8001a72:      	str	r1, [sp, #0x30]
 8001a74:      	movs	r1, #0x0
 8001a76:      	str	r0, [sp, #0x34]
 8001a78:      	strd	r0, r1, [sp, #36]
 8001a7c:      	movw	r0, #0x3a74
 8001a80:      	movt	r0, #0x800
 8001a84:      	str	r1, [sp, #0x2c]
 8001a86:      	str	r0, [sp, #0x20]
 8001a88:      	mov	r0, r4
 8001a8a:      	mov	r1, r5
 8001a8c:      	bl	0x8001af8 <core::fmt::write::h5f65a040c5660086> @ imm = #0x68
 8001a90:      	mov	r6, r0
 8001a92:      	mov	r0, r6
 8001a94:      	add	sp, #0x38
 8001a96:      	ldr	r8, [sp], #4
 8001a9a:      	pop	{r4, r5, r6, r7, pc}

08001a9c <core::panicking::panic::h3d259cefe3983ab7>:
 8001a9c:      	push	{r7, lr}
 8001a9e:      	mov	r7, sp
 8001aa0:      	sub	sp, #0x20
 8001aa2:      	mov	r12, r2
 8001aa4:      	movw	r2, #0x3a60
 8001aa8:      	movt	r2, #0x800
 8001aac:      	movs	r3, #0x0
 8001aae:      	strd	r0, r1, [sp, #24]
 8001ab2:      	mov	r0, sp
 8001ab4:      	str	r2, [sp, #0x10]
 8001ab6:      	movs	r2, #0x1
 8001ab8:      	mov	r1, r12
 8001aba:      	str	r2, [sp, #0x4]
 8001abc:      	add	r2, sp, #0x18
 8001abe:      	str	r3, [sp, #0x14]
 8001ac0:      	strd	r3, r3, [sp, #8]
 8001ac4:      	str	r2, [sp]
 8001ac6:      	bl	0x8001acc <core::panicking::panic_fmt::h65fc083b3717f98b> @ imm = #0x2
 8001aca:      	trap

08001acc <core::panicking::panic_fmt::h65fc083b3717f98b>:
 8001acc:      	push	{r7, lr}
 8001ace:      	mov	r7, sp
 8001ad0:      	sub	sp, #0x18
 8001ad2:      	strd	r0, r1, [sp, #12]
 8001ad6:      	movw	r0, #0x3a8c
 8001ada:      	movt	r0, #0x800
 8001ade:      	movs	r2, #0x1
 8001ae0:      	str	r0, [sp, #0x8]
 8001ae2:      	movw	r0, #0x3a60
 8001ae6:      	movt	r0, #0x800
 8001aea:      	strb.w	r2, [sp, #0x14]
 8001aee:      	str	r0, [sp, #0x4]
 8001af0:      	add	r0, sp, #0x4
 8001af2:      	bl	0x8002a50 <rust_begin_unwind> @ imm = #0xf5a
 8001af6:      	trap

08001af8 <core::fmt::write::h5f65a040c5660086>:
 8001af8:      	push	{r4, r5, r6, r7, lr}
 8001afa:      	add	r7, sp, #0xc
 8001afc:      	push.w	{r8, r9, r10, r11}
 8001b00:      	sub	sp, #0x2c
 8001b02:      	mov	r11, r2
 8001b04:      	movs	r2, #0x3
 8001b06:      	ldr.w	r10, [r11, #0x8]
 8001b0a:      	strb.w	r2, [sp, #0x28]
 8001b0e:      	movs	r2, #0x20
 8001b10:      	str	r2, [sp, #0xc]
 8001b12:      	movs	r2, #0x0
 8001b14:      	cmp.w	r10, #0x0
 8001b18:      	str	r2, [sp, #0x8]
 8001b1a:      	str	r1, [sp, #0x24]
 8001b1c:      	str	r0, [sp, #0x20]
 8001b1e:      	str	r2, [sp, #0x18]
 8001b20:      	str	r2, [sp, #0x10]
 8001b22:      	beq	0x8001bf8 <core::fmt::write::h5f65a040c5660086+0x100> @ imm = #0xd2
 8001b24:      	ldr.w	r0, [r11, #0xc]
 8001b28:      	cmp	r0, #0x0
 8001b2a:      	beq.w	0x8001c40 <core::fmt::write::h5f65a040c5660086+0x148> @ imm = #0x112
 8001b2e:      	ldr.w	r9, [r11]
 8001b32:      	lsls	r1, r0, #0x5
 8001b34:      	subs	r0, #0x1
 8001b36:      	movs	r4, #0x0
 8001b38:      	bic	r0, r0, #0xf8000000
 8001b3c:      	mov.w	r8, #0x0
 8001b40:      	adds	r0, #0x1
 8001b42:      	str	r1, [sp, #0x4]
 8001b44:      	str	r0, [sp]
 8001b46:      	add.w	r0, r9, r8
 8001b4a:      	ldr	r2, [r0, #0x4]
 8001b4c:      	cbz	r2, 0x8001b60 <core::fmt::write::h5f65a040c5660086+0x68> @ imm = #0x10
 8001b4e:      	ldrd	r0, r3, [sp, #32]
 8001b52:      	ldr.w	r1, [r9, r8]
 8001b56:      	ldr	r3, [r3, #0xc]
 8001b58:      	blx	r3
 8001b5a:      	cmp	r0, #0x0
 8001b5c:      	bne.w	0x8001c62 <core::fmt::write::h5f65a040c5660086+0x16a> @ imm = #0x102
 8001b60:      	add.w	r0, r10, r8, lsl #2
 8001b64:      	ldr.w	r1, [r11, #0x10]
 8001b68:      	ldrd	r5, r6, [r0, #4]
 8001b6c:      	ldrd	r3, r2, [r0, #20]
 8001b70:      	strd	r6, r5, [sp, #8]
 8001b74:      	ldrb	r6, [r0, #0x1c]
 8001b76:      	strb.w	r6, [sp, #0x28]
 8001b7a:      	cbz	r3, 0x8001b9c <core::fmt::write::h5f65a040c5660086+0xa4> @ imm = #0x1e
 8001b7c:      	cmp	r3, #0x1
 8001b7e:      	bne	0x8001b92 <core::fmt::write::h5f65a040c5660086+0x9a> @ imm = #0x10
 8001b80:      	add.w	r3, r1, r2, lsl #3
 8001b84:      	movw	r6, #0x1973
 8001b88:      	movt	r6, #0x800
 8001b8c:      	ldr	r3, [r3, #0x4]
 8001b8e:      	cmp	r3, r6
 8001b90:      	beq	0x8001b96 <core::fmt::write::h5f65a040c5660086+0x9e> @ imm = #0x2
 8001b92:      	movs	r3, #0x0
 8001b94:      	b	0x8001b9e <core::fmt::write::h5f65a040c5660086+0xa6> @ imm = #0x6
 8001b96:      	ldr.w	r2, [r1, r2, lsl #3]
 8001b9a:      	ldr	r2, [r2]
 8001b9c:      	movs	r3, #0x1
 8001b9e:      	strd	r3, r2, [sp, #16]
 8001ba2:      	add.w	r3, r10, r4
 8001ba6:      	ldr	r2, [r0, #0xc]
 8001ba8:      	ldr	r0, [r3, #0x10]
 8001baa:      	cbz	r2, 0x8001bcc <core::fmt::write::h5f65a040c5660086+0xd4> @ imm = #0x1e
 8001bac:      	cmp	r2, #0x1
 8001bae:      	bne	0x8001bc2 <core::fmt::write::h5f65a040c5660086+0xca> @ imm = #0x10
 8001bb0:      	add.w	r2, r1, r0, lsl #3
 8001bb4:      	movw	r3, #0x1973
 8001bb8:      	movt	r3, #0x800
 8001bbc:      	ldr	r2, [r2, #0x4]
 8001bbe:      	cmp	r2, r3
 8001bc0:      	beq	0x8001bc6 <core::fmt::write::h5f65a040c5660086+0xce> @ imm = #0x2
 8001bc2:      	movs	r2, #0x0
 8001bc4:      	b	0x8001bce <core::fmt::write::h5f65a040c5660086+0xd6> @ imm = #0x6
 8001bc6:      	ldr.w	r0, [r1, r0, lsl #3]
 8001bca:      	ldr	r0, [r0]
 8001bcc:      	movs	r2, #0x1
 8001bce:      	ldr.w	r3, [r10, r4]
 8001bd2:      	str	r0, [sp, #0x1c]
 8001bd4:      	ldr.w	r0, [r1, r3, lsl #3]
 8001bd8:      	add.w	r1, r1, r3, lsl #3
 8001bdc:      	ldr	r3, [r1, #0x4]
 8001bde:      	add	r1, sp, #0x8
 8001be0:      	str	r2, [sp, #0x18]
 8001be2:      	blx	r3
 8001be4:      	cbnz	r0, 0x8001c62 <core::fmt::write::h5f65a040c5660086+0x16a> @ imm = #0x7a
 8001be6:      	ldr	r0, [sp, #0x4]
 8001be8:      	adds	r4, #0x20
 8001bea:      	add.w	r8, r8, #0x8
 8001bee:      	cmp	r0, r4
 8001bf0:      	bne	0x8001b46 <core::fmt::write::h5f65a040c5660086+0x4e> @ imm = #-0xae
 8001bf2:      	ldr.w	r9, [sp]
 8001bf6:      	b	0x8001c44 <core::fmt::write::h5f65a040c5660086+0x14c> @ imm = #0x4a
 8001bf8:      	ldr.w	r0, [r11, #0x14]
 8001bfc:      	cbz	r0, 0x8001c40 <core::fmt::write::h5f65a040c5660086+0x148> @ imm = #0x40
 8001bfe:      	subs	r0, #0x1
 8001c00:      	ldr.w	r1, [r11]
 8001c04:      	ldr.w	r2, [r11, #0x10]
 8001c08:      	bic	r0, r0, #0xe0000000
 8001c0c:      	adds	r5, r0, #0x1
 8001c0e:      	adds	r6, r1, #0x4
 8001c10:      	adds	r4, r2, #0x4
 8001c12:      	add.w	r8, sp, #0x8
 8001c16:      	mov	r9, r5
 8001c18:      	ldr	r2, [r6]
 8001c1a:      	cbz	r2, 0x8001c2a <core::fmt::write::h5f65a040c5660086+0x132> @ imm = #0xc
 8001c1c:      	ldrd	r0, r3, [sp, #32]
 8001c20:      	ldr	r1, [r6, #-4]
 8001c24:      	ldr	r3, [r3, #0xc]
 8001c26:      	blx	r3
 8001c28:      	cbnz	r0, 0x8001c62 <core::fmt::write::h5f65a040c5660086+0x16a> @ imm = #0x36
 8001c2a:      	ldr	r0, [r4, #-4]
 8001c2e:      	mov	r1, r8
 8001c30:      	ldr	r2, [r4]
 8001c32:      	blx	r2
 8001c34:      	cbnz	r0, 0x8001c62 <core::fmt::write::h5f65a040c5660086+0x16a> @ imm = #0x2a
 8001c36:      	adds	r4, #0x8
 8001c38:      	adds	r6, #0x8
 8001c3a:      	subs	r5, #0x1
 8001c3c:      	bne	0x8001c18 <core::fmt::write::h5f65a040c5660086+0x120> @ imm = #-0x28
 8001c3e:      	b	0x8001c44 <core::fmt::write::h5f65a040c5660086+0x14c> @ imm = #0x2
 8001c40:      	mov.w	r9, #0x0
 8001c44:      	ldrd	r0, r1, [r11]
 8001c48:      	movs	r2, #0x0
 8001c4a:      	cmp	r9, r1
 8001c4c:      	it	lo
 8001c4e:      	addlo.w	r2, r0, r9, lsl #3
 8001c52:      	bhs	0x8001c6c <core::fmt::write::h5f65a040c5660086+0x174> @ imm = #0x16
 8001c54:      	ldrd	r0, r3, [sp, #32]
 8001c58:      	ldrd	r1, r2, [r2]
 8001c5c:      	ldr	r3, [r3, #0xc]
 8001c5e:      	blx	r3
 8001c60:      	cbz	r0, 0x8001c6c <core::fmt::write::h5f65a040c5660086+0x174> @ imm = #0x8
 8001c62:      	movs	r0, #0x1
 8001c64:      	add	sp, #0x2c
 8001c66:      	pop.w	{r8, r9, r10, r11}
 8001c6a:      	pop	{r4, r5, r6, r7, pc}
 8001c6c:      	movs	r0, #0x0
 8001c6e:      	add	sp, #0x2c
 8001c70:      	pop.w	{r8, r9, r10, r11}
 8001c74:      	pop	{r4, r5, r6, r7, pc}

08001c76 <core::fmt::Formatter::pad_integral::h56543b18c83975ab>:
 8001c76:      	push	{r4, r5, r6, r7, lr}
 8001c78:      	add	r7, sp, #0xc
 8001c7a:      	push.w	{r8, r9, r10, r11}
 8001c7e:      	sub	sp, #0x14
 8001c80:      	ldr	r5, [r7, #0xc]
 8001c82:      	mov	r11, r2
 8001c84:      	mov	r10, r0
 8001c86:      	cbz	r1, 0x8001cc4 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x4e> @ imm = #0x3a
 8001c88:      	ldr.w	r0, [r10]
 8001c8c:      	movs	r6, #0x2b
 8001c8e:      	ands	r1, r0, #0x1
 8001c92:      	it	eq
 8001c94:      	moveq.w	r6, #0x110000
 8001c98:      	add.w	r9, r1, r5
 8001c9c:      	ldr.w	r8, [r7, #0x8]
 8001ca0:      	lsls	r0, r0, #0x1d
 8001ca2:      	bpl	0x8001cd6 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x60> @ imm = #0x30
 8001ca4:      	cmp	r3, #0x10
 8001ca6:      	bhs	0x8001d32 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0xbc> @ imm = #0x88
 8001ca8:      	cmp	r3, #0x0
 8001caa:      	beq	0x8001d84 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x10e> @ imm = #0xd6
 8001cac:      	subs	r0, r3, #0x1
 8001cae:      	and	r12, r3, #0x3
 8001cb2:      	cmp	r0, #0x3
 8001cb4:      	bhs	0x8001d88 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x112> @ imm = #0xd0
 8001cb6:      	movs	r0, #0x0
 8001cb8:      	mov	r2, r11
 8001cba:      	cmp.w	r12, #0x0
 8001cbe:      	bne.w	0x8001de2 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x16c> @ imm = #0x120
 8001cc2:      	b	0x8001e12 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x19c> @ imm = #0x14c
 8001cc4:      	ldr.w	r0, [r10]
 8001cc8:      	add.w	r9, r5, #0x1
 8001ccc:      	movs	r6, #0x2d
 8001cce:      	ldr.w	r8, [r7, #0x8]
 8001cd2:      	lsls	r0, r0, #0x1d
 8001cd4:      	bmi	0x8001ca4 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x2e> @ imm = #-0x34
 8001cd6:      	mov.w	r11, #0x0
 8001cda:      	movs	r3, #0x0
 8001cdc:      	ldr.w	r0, [r10, #0x8]
 8001ce0:      	cmp	r0, #0x0
 8001ce2:      	beq.w	0x8001e1e <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x1a8> @ imm = #0x138
 8001ce6:      	mov	r4, r8
 8001ce8:      	ldr.w	r8, [r10, #0xc]
 8001cec:      	str	r5, [sp, #0xc]
 8001cee:      	cmp	r8, r9
 8001cf0:      	str	r6, [sp, #0x10]
 8001cf2:      	bls	0x8001d22 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0xac> @ imm = #0x2c
 8001cf4:      	ldrb.w	r0, [r10]
 8001cf8:      	lsls	r0, r0, #0x1c
 8001cfa:      	bmi	0x8001d40 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0xca> @ imm = #0x42
 8001cfc:      	ldrb.w	r1, [r10, #0x20]
 8001d00:      	sub.w	r0, r8, r9
 8001d04:      	mov	r9, r3
 8001d06:      	cmp	r1, #0x3
 8001d08:      	it	eq
 8001d0a:      	moveq	r1, #0x1
 8001d0c:      	lsls	r2, r1, #0x1e
 8001d0e:      	str	r4, [sp, #0x8]
 8001d10:      	beq.w	0x8001e66 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x1f0> @ imm = #0x152
 8001d14:      	cmp	r1, #0x1
 8001d16:      	bne.w	0x8001e6a <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x1f4> @ imm = #0x150
 8001d1a:      	movs	r1, #0x0
 8001d1c:      	str	r1, [sp, #0x4]
 8001d1e:      	mov	r1, r0
 8001d20:      	b	0x8001e72 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x1fc> @ imm = #0x14e
 8001d22:      	ldr	r1, [sp, #0x10]
 8001d24:      	mov	r0, r10
 8001d26:      	mov	r2, r11
 8001d28:      	bl	0x8001f78 <core::fmt::Formatter::pad_integral::write_prefix::heab67bbe964a085d> @ imm = #0x24c
 8001d2c:      	cbz	r0, 0x8001d6e <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0xf8> @ imm = #0x3e
 8001d2e:      	movs	r5, #0x1
 8001d30:      	b	0x8001d64 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0xee> @ imm = #0x30
 8001d32:      	mov	r0, r11
 8001d34:      	mov	r1, r3
 8001d36:      	mov	r4, r3
 8001d38:      	bl	0x8002314 <core::str::count::do_count_chars::h5249cb4d427fe10f> @ imm = #0x5d8
 8001d3c:      	mov	r3, r4
 8001d3e:      	b	0x8001e12 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x19c> @ imm = #0xd0
 8001d40:      	ldrb.w	r1, [r10, #0x20]
 8001d44:      	movs	r0, #0x30
 8001d46:      	str	r1, [sp, #0x4]
 8001d48:      	movs	r5, #0x1
 8001d4a:      	ldr	r1, [sp, #0x10]
 8001d4c:      	mov	r2, r11
 8001d4e:      	ldr.w	r6, [r10, #0x4]
 8001d52:      	str.w	r0, [r10, #0x4]
 8001d56:      	mov	r0, r10
 8001d58:      	strb.w	r5, [r10, #0x20]
 8001d5c:      	bl	0x8001f78 <core::fmt::Formatter::pad_integral::write_prefix::heab67bbe964a085d> @ imm = #0x218
 8001d60:      	cmp	r0, #0x0
 8001d62:      	beq	0x8001e44 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x1ce> @ imm = #0xde
 8001d64:      	mov	r0, r5
 8001d66:      	add	sp, #0x14
 8001d68:      	pop.w	{r8, r9, r10, r11}
 8001d6c:      	pop	{r4, r5, r6, r7, pc}
 8001d6e:      	ldrd	r0, r1, [r10, #24]
 8001d72:      	ldr	r3, [r1, #0xc]
 8001d74:      	mov	r1, r4
 8001d76:      	ldr	r2, [sp, #0xc]
 8001d78:      	add	sp, #0x14
 8001d7a:      	pop.w	{r8, r9, r10, r11}
 8001d7e:      	pop.w	{r4, r5, r6, r7, lr}
 8001d82:      	bx	r3
 8001d84:      	movs	r0, #0x0
 8001d86:      	b	0x8001e12 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x19c> @ imm = #0x88
 8001d88:      	str	r6, [sp, #0x10]
 8001d8a:      	mov	lr, r5
 8001d8c:      	str.w	r8, [sp, #0x8]
 8001d90:      	movs	r0, #0x0
 8001d92:      	str	r3, [sp, #0xc]
 8001d94:      	bic	r3, r3, #0x3
 8001d98:      	mov	r8, r11
 8001d9a:      	mov	r2, r11
 8001d9c:      	ldrsb.w	r5, [r2, #0x2]
 8001da0:      	ldrsb.w	r4, [r2, #0x3]
 8001da4:      	ldrsb	r1, [r2], #4
 8001da8:      	ldrsb	r6, [r2, #-3]
 8001dac:      	cmn.w	r1, #0x41
 8001db0:      	it	gt
 8001db2:      	addgt	r0, #0x1
 8001db4:      	cmn.w	r6, #0x41
 8001db8:      	it	gt
 8001dba:      	addgt	r0, #0x1
 8001dbc:      	cmn.w	r5, #0x41
 8001dc0:      	it	gt
 8001dc2:      	addgt	r0, #0x1
 8001dc4:      	cmn.w	r4, #0x41
 8001dc8:      	it	gt
 8001dca:      	addgt	r0, #0x1
 8001dcc:      	subs	r3, #0x4
 8001dce:      	bne	0x8001d9c <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x126> @ imm = #-0x36
 8001dd0:      	ldr	r4, [sp, #0x8]
 8001dd2:      	mov	r11, r8
 8001dd4:      	ldrd	r3, r6, [sp, #12]
 8001dd8:      	mov	r5, lr
 8001dda:      	mov	r8, r4
 8001ddc:      	cmp.w	r12, #0x0
 8001de0:      	beq	0x8001e12 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x19c> @ imm = #0x2e
 8001de2:      	ldrsb.w	r1, [r2]
 8001de6:      	cmn.w	r1, #0x41
 8001dea:      	it	gt
 8001dec:      	addgt	r0, #0x1
 8001dee:      	cmp.w	r12, #0x1
 8001df2:      	beq	0x8001e12 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x19c> @ imm = #0x1c
 8001df4:      	ldrsb.w	r1, [r2, #0x1]
 8001df8:      	cmn.w	r1, #0x41
 8001dfc:      	it	gt
 8001dfe:      	addgt	r0, #0x1
 8001e00:      	cmp.w	r12, #0x2
 8001e04:      	beq	0x8001e12 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x19c> @ imm = #0xa
 8001e06:      	ldrsb.w	r1, [r2, #0x2]
 8001e0a:      	cmn.w	r1, #0x41
 8001e0e:      	it	gt
 8001e10:      	addgt	r0, #0x1
 8001e12:      	add	r9, r0
 8001e14:      	ldr.w	r0, [r10, #0x8]
 8001e18:      	cmp	r0, #0x0
 8001e1a:      	bne.w	0x8001ce6 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x70> @ imm = #-0x138
 8001e1e:      	mov	r0, r10
 8001e20:      	mov	r1, r6
 8001e22:      	mov	r2, r11
 8001e24:      	bl	0x8001f78 <core::fmt::Formatter::pad_integral::write_prefix::heab67bbe964a085d> @ imm = #0x150
 8001e28:      	cmp	r0, #0x0
 8001e2a:      	bne.w	0x8001f40 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x2ca> @ imm = #0x112
 8001e2e:      	ldrd	r0, r1, [r10, #24]
 8001e32:      	mov	r2, r5
 8001e34:      	ldr	r3, [r1, #0xc]
 8001e36:      	mov	r1, r8
 8001e38:      	add	sp, #0x14
 8001e3a:      	pop.w	{r8, r9, r10, r11}
 8001e3e:      	pop.w	{r4, r5, r6, r7, lr}
 8001e42:      	bx	r3
 8001e44:      	ldrb.w	r0, [r10, #0x20]
 8001e48:      	sub.w	r1, r8, r9
 8001e4c:      	cmp	r0, #0x3
 8001e4e:      	it	eq
 8001e50:      	moveq	r0, #0x1
 8001e52:      	lsls	r2, r0, #0x1e
 8001e54:      	str	r4, [sp, #0x8]
 8001e56:      	str	r6, [sp]
 8001e58:      	beq	0x8001edc <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x266> @ imm = #0x80
 8001e5a:      	cmp	r0, #0x1
 8001e5c:      	bne	0x8001ee2 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x26c> @ imm = #0x82
 8001e5e:      	mov.w	r9, #0x0
 8001e62:      	mov	r0, r1
 8001e64:      	b	0x8001eea <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x274> @ imm = #0x82
 8001e66:      	movs	r1, #0x0
 8001e68:      	b	0x8001e70 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x1fa> @ imm = #0x4
 8001e6a:      	lsrs	r1, r0, #0x1
 8001e6c:      	adds	r0, #0x1
 8001e6e:      	lsrs	r0, r0, #0x1
 8001e70:      	str	r0, [sp, #0x4]
 8001e72:      	ldr.w	r5, [r10, #0x4]
 8001e76:      	adds	r4, r1, #0x1
 8001e78:      	ldrd	r8, r6, [r10, #24]
 8001e7c:      	subs	r4, #0x1
 8001e7e:      	beq	0x8001e8e <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x218> @ imm = #0xc
 8001e80:      	ldr	r2, [r6, #0x10]
 8001e82:      	mov	r0, r8
 8001e84:      	mov	r1, r5
 8001e86:      	blx	r2
 8001e88:      	cmp	r0, #0x0
 8001e8a:      	beq	0x8001e7c <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x206> @ imm = #-0x12
 8001e8c:      	b	0x8001f40 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x2ca> @ imm = #0xb0
 8001e8e:      	subs.w	r6, r5, #0x110000
 8001e92:      	ldr	r0, [sp, #0x4]
 8001e94:      	it	ne
 8001e96:      	movne	r6, r0
 8001e98:      	cmp.w	r5, #0x110000
 8001e9c:      	beq	0x8001f40 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x2ca> @ imm = #0xa0
 8001e9e:      	ldr	r1, [sp, #0x10]
 8001ea0:      	mov	r0, r10
 8001ea2:      	mov	r2, r11
 8001ea4:      	mov	r3, r9
 8001ea6:      	bl	0x8001f78 <core::fmt::Formatter::pad_integral::write_prefix::heab67bbe964a085d> @ imm = #0xce
 8001eaa:      	cmp	r0, #0x0
 8001eac:      	bne	0x8001f40 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x2ca> @ imm = #0x90
 8001eae:      	ldrd	r0, r1, [r10, #24]
 8001eb2:      	ldr	r3, [r1, #0xc]
 8001eb4:      	ldrd	r1, r2, [sp, #8]
 8001eb8:      	blx	r3
 8001eba:      	cmp	r0, #0x0
 8001ebc:      	bne	0x8001f40 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x2ca> @ imm = #0x80
 8001ebe:      	ldrd	r8, r9, [r10, #24]
 8001ec2:      	movs	r4, #0x0
 8001ec4:      	cmp	r6, r4
 8001ec6:      	beq	0x8001f64 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x2ee> @ imm = #0x9a
 8001ec8:      	ldr.w	r2, [r9, #0x10]
 8001ecc:      	mov	r0, r8
 8001ece:      	mov	r1, r5
 8001ed0:      	blx	r2
 8001ed2:      	adds	r4, #0x1
 8001ed4:      	cmp	r0, #0x0
 8001ed6:      	beq	0x8001ec4 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x24e> @ imm = #-0x16
 8001ed8:      	subs	r0, r4, #0x1
 8001eda:      	b	0x8001f66 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x2f0> @ imm = #0x88
 8001edc:      	movs	r0, #0x0
 8001ede:      	mov	r9, r1
 8001ee0:      	b	0x8001eea <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x274> @ imm = #0x6
 8001ee2:      	lsrs	r0, r1, #0x1
 8001ee4:      	adds	r1, #0x1
 8001ee6:      	lsr.w	r9, r1, #0x1
 8001eea:      	ldr.w	r11, [r10, #0x4]
 8001eee:      	adds	r5, r0, #0x1
 8001ef0:      	ldrd	r6, r4, [r10, #24]
 8001ef4:      	subs	r5, #0x1
 8001ef6:      	beq	0x8001f06 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x290> @ imm = #0xc
 8001ef8:      	ldr	r2, [r4, #0x10]
 8001efa:      	mov	r0, r6
 8001efc:      	mov	r1, r11
 8001efe:      	blx	r2
 8001f00:      	cmp	r0, #0x0
 8001f02:      	beq	0x8001ef4 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x27e> @ imm = #-0x12
 8001f04:      	b	0x8001f40 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x2ca> @ imm = #0x38
 8001f06:      	subs.w	r8, r11, #0x110000
 8001f0a:      	it	ne
 8001f0c:      	movne	r8, r9
 8001f0e:      	cmp.w	r11, #0x110000
 8001f12:      	beq	0x8001f40 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x2ca> @ imm = #0x2a
 8001f14:      	ldrd	r0, r1, [r10, #24]
 8001f18:      	ldr	r3, [r1, #0xc]
 8001f1a:      	ldrd	r1, r2, [sp, #8]
 8001f1e:      	blx	r3
 8001f20:      	cbnz	r0, 0x8001f40 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x2ca> @ imm = #0x1c
 8001f22:      	ldrd	r9, r4, [r10, #24]
 8001f26:      	movs	r6, #0x0
 8001f28:      	cmp	r8, r6
 8001f2a:      	beq	0x8001f4c <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x2d6> @ imm = #0x1e
 8001f2c:      	ldr	r2, [r4, #0x10]
 8001f2e:      	mov	r0, r9
 8001f30:      	mov	r1, r11
 8001f32:      	blx	r2
 8001f34:      	adds	r6, #0x1
 8001f36:      	cmp	r0, #0x0
 8001f38:      	beq	0x8001f28 <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x2b2> @ imm = #-0x14
 8001f3a:      	subs	r0, r6, #0x1
 8001f3c:      	cmp	r0, r8
 8001f3e:      	bhs	0x8001f4c <core::fmt::Formatter::pad_integral::h56543b18c83975ab+0x2d6> @ imm = #0xa
 8001f40:      	movs	r5, #0x1
 8001f42:      	mov	r0, r5
 8001f44:      	add	sp, #0x14
 8001f46:      	pop.w	{r8, r9, r10, r11}
 8001f4a:      	pop	{r4, r5, r6, r7, pc}
 8001f4c:      	ldr	r0, [sp, #0x4]
 8001f4e:      	movs	r5, #0x0
 8001f50:      	strb.w	r0, [r10, #0x20]
 8001f54:      	ldr	r0, [sp]
 8001f56:      	str.w	r0, [r10, #0x4]
 8001f5a:      	mov	r0, r5
 8001f5c:      	add	sp, #0x14
 8001f5e:      	pop.w	{r8, r9, r10, r11}
 8001f62:      	pop	{r4, r5, r6, r7, pc}
 8001f64:      	mov	r0, r6
 8001f66:      	movs	r5, #0x0
 8001f68:      	cmp	r0, r6
 8001f6a:      	it	lo
 8001f6c:      	movlo	r5, #0x1
 8001f6e:      	mov	r0, r5
 8001f70:      	add	sp, #0x14
 8001f72:      	pop.w	{r8, r9, r10, r11}
 8001f76:      	pop	{r4, r5, r6, r7, pc}

08001f78 <core::fmt::Formatter::pad_integral::write_prefix::heab67bbe964a085d>:
 8001f78:      	push	{r4, r5, r6, r7, lr}
 8001f7a:      	add	r7, sp, #0xc
 8001f7c:      	str	r11, [sp, #-4]!
 8001f80:      	mov	r4, r3
 8001f82:      	mov	r5, r2
 8001f84:      	mov	r6, r0
 8001f86:      	cmp.w	r1, #0x110000
 8001f8a:      	beq	0x8001f9e <core::fmt::Formatter::pad_integral::write_prefix::heab67bbe964a085d+0x26> @ imm = #0x10
 8001f8c:      	ldrd	r0, r2, [r6, #24]
 8001f90:      	ldr	r2, [r2, #0x10]
 8001f92:      	blx	r2
 8001f94:      	cbz	r0, 0x8001f9e <core::fmt::Formatter::pad_integral::write_prefix::heab67bbe964a085d+0x26> @ imm = #0x6
 8001f96:      	movs	r0, #0x1
 8001f98:      	ldr	r11, [sp], #4
 8001f9c:      	pop	{r4, r5, r6, r7, pc}
 8001f9e:      	cbz	r5, 0x8001fb4 <core::fmt::Formatter::pad_integral::write_prefix::heab67bbe964a085d+0x3c> @ imm = #0x12
 8001fa0:      	ldrd	r0, r1, [r6, #24]
 8001fa4:      	mov	r2, r4
 8001fa6:      	ldr	r3, [r1, #0xc]
 8001fa8:      	mov	r1, r5
 8001faa:      	ldr	r11, [sp], #4
 8001fae:      	pop.w	{r4, r5, r6, r7, lr}
 8001fb2:      	bx	r3
 8001fb4:      	movs	r0, #0x0
 8001fb6:      	ldr	r11, [sp], #4
 8001fba:      	pop	{r4, r5, r6, r7, pc}

08001fbc <core::fmt::Formatter::pad::he5455c2681f601f2>:
 8001fbc:      	push	{r4, r5, r6, r7, lr}
 8001fbe:      	add	r7, sp, #0xc
 8001fc0:      	push.w	{r8, r9, r10, r11}
 8001fc4:      	sub	sp, #0x4
 8001fc6:      	mov	r8, r1
 8001fc8:      	ldr.w	r12, [r0, #0x8]
 8001fcc:      	ldr	r1, [r0, #0x10]
 8001fce:      	mov	r9, r0
 8001fd0:      	cmp.w	r12, #0x1
 8001fd4:      	it	ne
 8001fd6:      	cmpne	r1, #0x1
 8001fd8:      	bne	0x8002022 <core::fmt::Formatter::pad::he5455c2681f601f2+0x66> @ imm = #0x46
 8001fda:      	cmp	r1, #0x1
 8001fdc:      	bne	0x80020c0 <core::fmt::Formatter::pad::he5455c2681f601f2+0x104> @ imm = #0xe0
 8001fde:      	ldr.w	r3, [r9, #0x14]
 8001fe2:      	add.w	r1, r8, r2
 8001fe6:      	mov.w	r10, #0x0
 8001fea:      	mov	r5, r8
 8001fec:      	cbnz	r3, 0x8002036 <core::fmt::Formatter::pad::he5455c2681f601f2+0x7a> @ imm = #0x46
 8001fee:      	cmp	r5, r1
 8001ff0:      	beq	0x80020c0 <core::fmt::Formatter::pad::he5455c2681f601f2+0x104> @ imm = #0xcc
 8001ff2:      	ldrsb.w	r1, [r5]
 8001ff6:      	cmp.w	r1, #0xffffffff
 8001ffa:      	bgt	0x8002006 <core::fmt::Formatter::pad::he5455c2681f601f2+0x4a> @ imm = #0x8
 8001ffc:      	uxtb	r1, r1
 8001ffe:      	cmp	r1, #0xe0
 8002000:      	it	hs
 8002002:      	cmphs	r1, #0xf0
 8002004:      	bhs	0x8002098 <core::fmt::Formatter::pad::he5455c2681f601f2+0xdc> @ imm = #0x90
 8002006:      	cmp.w	r10, #0x0
 800200a:      	beq	0x8002086 <core::fmt::Formatter::pad::he5455c2681f601f2+0xca> @ imm = #0x78
 800200c:      	cmp	r10, r2
 800200e:      	bhs	0x8002082 <core::fmt::Formatter::pad::he5455c2681f601f2+0xc6> @ imm = #0x70
 8002010:      	ldrsb.w	r0, [r8, r10]
 8002014:      	cmn.w	r0, #0x40
 8002018:      	bge	0x8002086 <core::fmt::Formatter::pad::he5455c2681f601f2+0xca> @ imm = #0x6a
 800201a:      	movs	r1, #0x0
 800201c:      	mov.w	r10, #0x0
 8002020:      	b	0x8002088 <core::fmt::Formatter::pad::he5455c2681f601f2+0xcc> @ imm = #0x64
 8002022:      	ldrd	r0, r1, [r9, #24]
 8002026:      	b	0x8002196 <core::fmt::Formatter::pad::he5455c2681f601f2+0x1da> @ imm = #0x16c
 8002028:      	adds	r5, r6, #0x2
 800202a:      	sub.w	r0, r10, r6
 800202e:      	subs	r3, #0x1
 8002030:      	add.w	r10, r0, r5
 8002034:      	beq	0x8001fee <core::fmt::Formatter::pad::he5455c2681f601f2+0x32> @ imm = #-0x4a
 8002036:      	cmp	r5, r1
 8002038:      	beq	0x80020c0 <core::fmt::Formatter::pad::he5455c2681f601f2+0x104> @ imm = #0x84
 800203a:      	mov	r6, r5
 800203c:      	ldrsb	r4, [r5], #1
 8002040:      	cmp.w	r4, #0xffffffff
 8002044:      	bgt	0x800202a <core::fmt::Formatter::pad::he5455c2681f601f2+0x6e> @ imm = #-0x1e
 8002046:      	uxtb	r5, r4
 8002048:      	cmp	r5, #0xe0
 800204a:      	blo	0x8002028 <core::fmt::Formatter::pad::he5455c2681f601f2+0x6c> @ imm = #-0x26
 800204c:      	cmp	r5, #0xf0
 800204e:      	blo	0x800207e <core::fmt::Formatter::pad::he5455c2681f601f2+0xc2> @ imm = #0x2c
 8002050:      	ldrb	r0, [r6, #0x2]
 8002052:      	and	r5, r5, #0x7
 8002056:      	ldrb	r4, [r6, #0x1]
 8002058:      	and	r0, r0, #0x3f
 800205c:      	ldrb.w	lr, [r6, #0x3]
 8002060:      	and	r4, r4, #0x3f
 8002064:      	lsls	r0, r0, #0x6
 8002066:      	orr.w	r0, r0, r4, lsl #12
 800206a:      	and	r4, lr, #0x3f
 800206e:      	add	r0, r4
 8002070:      	orr.w	r0, r0, r5, lsl #18
 8002074:      	cmp.w	r0, #0x110000
 8002078:      	beq	0x80020c0 <core::fmt::Formatter::pad::he5455c2681f601f2+0x104> @ imm = #0x44
 800207a:      	adds	r5, r6, #0x4
 800207c:      	b	0x800202a <core::fmt::Formatter::pad::he5455c2681f601f2+0x6e> @ imm = #-0x56
 800207e:      	adds	r5, r6, #0x3
 8002080:      	b	0x800202a <core::fmt::Formatter::pad::he5455c2681f601f2+0x6e> @ imm = #-0x5a
 8002082:      	cmp	r10, r2
 8002084:      	bne	0x800201a <core::fmt::Formatter::pad::he5455c2681f601f2+0x5e> @ imm = #-0x6e
 8002086:      	mov	r1, r8
 8002088:      	cmp	r1, #0x0
 800208a:      	ite	eq
 800208c:      	moveq	r10, r2
 800208e:      	movne	r8, r1
 8002090:      	cmp.w	r12, #0x0
 8002094:      	bne	0x80020c8 <core::fmt::Formatter::pad::he5455c2681f601f2+0x10c> @ imm = #0x30
 8002096:      	b	0x800218c <core::fmt::Formatter::pad::he5455c2681f601f2+0x1d0> @ imm = #0xf2
 8002098:      	ldrb	r3, [r5, #0x2]
 800209a:      	and	r1, r1, #0x7
 800209e:      	ldrb	r0, [r5, #0x1]
 80020a0:      	and	r3, r3, #0x3f
 80020a4:      	ldrb	r6, [r5, #0x3]
 80020a6:      	and	r0, r0, #0x3f
 80020aa:      	lsls	r3, r3, #0x6
 80020ac:      	orr.w	r0, r3, r0, lsl #12
 80020b0:      	and	r3, r6, #0x3f
 80020b4:      	add	r0, r3
 80020b6:      	orr.w	r0, r0, r1, lsl #18
 80020ba:      	cmp.w	r0, #0x110000
 80020be:      	bne	0x8002006 <core::fmt::Formatter::pad::he5455c2681f601f2+0x4a> @ imm = #-0xbc
 80020c0:      	mov	r10, r2
 80020c2:      	cmp.w	r12, #0x0
 80020c6:      	beq	0x800218c <core::fmt::Formatter::pad::he5455c2681f601f2+0x1d0> @ imm = #0xc2
 80020c8:      	ldr.w	r11, [r9, #0xc]
 80020cc:      	cmp.w	r10, #0x10
 80020d0:      	bhs	0x80020ea <core::fmt::Formatter::pad::he5455c2681f601f2+0x12e> @ imm = #0x16
 80020d2:      	cmp.w	r10, #0x0
 80020d6:      	beq	0x80020f4 <core::fmt::Formatter::pad::he5455c2681f601f2+0x138> @ imm = #0x1a
 80020d8:      	sub.w	r0, r10, #0x1
 80020dc:      	and	r12, r10, #0x3
 80020e0:      	cmp	r0, #0x3
 80020e2:      	bhs	0x80020f8 <core::fmt::Formatter::pad::he5455c2681f601f2+0x13c> @ imm = #0x12
 80020e4:      	movs	r0, #0x0
 80020e6:      	mov	r2, r8
 80020e8:      	b	0x8002134 <core::fmt::Formatter::pad::he5455c2681f601f2+0x178> @ imm = #0x48
 80020ea:      	mov	r0, r8
 80020ec:      	mov	r1, r10
 80020ee:      	bl	0x8002314 <core::str::count::do_count_chars::h5249cb4d427fe10f> @ imm = #0x222
 80020f2:      	b	0x800216a <core::fmt::Formatter::pad::he5455c2681f601f2+0x1ae> @ imm = #0x74
 80020f4:      	movs	r0, #0x0
 80020f6:      	b	0x800216a <core::fmt::Formatter::pad::he5455c2681f601f2+0x1ae> @ imm = #0x70
 80020f8:      	bic	r3, r10, #0x3
 80020fc:      	movs	r0, #0x0
 80020fe:      	mov	r2, r8
 8002100:      	ldrsb.w	r6, [r2, #0x2]
 8002104:      	ldrsb.w	r5, [r2, #0x3]
 8002108:      	ldrsb	r1, [r2], #4
 800210c:      	ldrsb	r4, [r2, #-3]
 8002110:      	cmn.w	r1, #0x41
 8002114:      	it	gt
 8002116:      	addgt	r0, #0x1
 8002118:      	cmn.w	r4, #0x41
 800211c:      	it	gt
 800211e:      	addgt	r0, #0x1
 8002120:      	cmn.w	r6, #0x41
 8002124:      	it	gt
 8002126:      	addgt	r0, #0x1
 8002128:      	cmn.w	r5, #0x41
 800212c:      	it	gt
 800212e:      	addgt	r0, #0x1
 8002130:      	subs	r3, #0x4
 8002132:      	bne	0x8002100 <core::fmt::Formatter::pad::he5455c2681f601f2+0x144> @ imm = #-0x36
 8002134:      	cmp.w	r12, #0x0
 8002138:      	beq	0x800216a <core::fmt::Formatter::pad::he5455c2681f601f2+0x1ae> @ imm = #0x2e
 800213a:      	ldrsb.w	r1, [r2]
 800213e:      	cmn.w	r1, #0x41
 8002142:      	it	gt
 8002144:      	addgt	r0, #0x1
 8002146:      	cmp.w	r12, #0x1
 800214a:      	beq	0x800216a <core::fmt::Formatter::pad::he5455c2681f601f2+0x1ae> @ imm = #0x1c
 800214c:      	ldrsb.w	r1, [r2, #0x1]
 8002150:      	cmn.w	r1, #0x41
 8002154:      	it	gt
 8002156:      	addgt	r0, #0x1
 8002158:      	cmp.w	r12, #0x2
 800215c:      	beq	0x800216a <core::fmt::Formatter::pad::he5455c2681f601f2+0x1ae> @ imm = #0xa
 800215e:      	ldrsb.w	r1, [r2, #0x2]
 8002162:      	cmn.w	r1, #0x41
 8002166:      	it	gt
 8002168:      	addgt	r0, #0x1
 800216a:      	cmp	r11, r0
 800216c:      	bls	0x800218c <core::fmt::Formatter::pad::he5455c2681f601f2+0x1d0> @ imm = #0x1c
 800216e:      	ldrb.w	r1, [r9, #0x20]
 8002172:      	subs	r2, r1, #0x3
 8002174:      	it	ne
 8002176:      	movne	r2, r1
 8002178:      	lsls	r1, r2, #0x1e
 800217a:      	sub.w	r1, r11, r0
 800217e:      	beq	0x80021a6 <core::fmt::Formatter::pad::he5455c2681f601f2+0x1ea> @ imm = #0x24
 8002180:      	cmp	r2, #0x1
 8002182:      	bne	0x80021aa <core::fmt::Formatter::pad::he5455c2681f601f2+0x1ee> @ imm = #0x24
 8002184:      	movs	r0, #0x0
 8002186:      	str	r0, [sp]
 8002188:      	mov	r0, r1
 800218a:      	b	0x80021b2 <core::fmt::Formatter::pad::he5455c2681f601f2+0x1f6> @ imm = #0x24
 800218c:      	ldr.w	r1, [r9, #0x1c]
 8002190:      	mov	r2, r10
 8002192:      	ldr.w	r0, [r9, #0x18]
 8002196:      	ldr	r3, [r1, #0xc]
 8002198:      	mov	r1, r8
 800219a:      	add	sp, #0x4
 800219c:      	pop.w	{r8, r9, r10, r11}
 80021a0:      	pop.w	{r4, r5, r6, r7, lr}
 80021a4:      	bx	r3
 80021a6:      	movs	r0, #0x0
 80021a8:      	b	0x80021b0 <core::fmt::Formatter::pad::he5455c2681f601f2+0x1f4> @ imm = #0x4
 80021aa:      	lsrs	r0, r1, #0x1
 80021ac:      	adds	r1, #0x1
 80021ae:      	lsrs	r1, r1, #0x1
 80021b0:      	str	r1, [sp]
 80021b2:      	ldr.w	r4, [r9, #0x4]
 80021b6:      	adds	r5, r0, #0x1
 80021b8:      	ldrd	r11, r6, [r9, #24]
 80021bc:      	subs	r5, #0x1
 80021be:      	beq	0x80021ce <core::fmt::Formatter::pad::he5455c2681f601f2+0x212> @ imm = #0xc
 80021c0:      	ldr	r2, [r6, #0x10]
 80021c2:      	mov	r0, r11
 80021c4:      	mov	r1, r4
 80021c6:      	blx	r2
 80021c8:      	cmp	r0, #0x0
 80021ca:      	beq	0x80021bc <core::fmt::Formatter::pad::he5455c2681f601f2+0x200> @ imm = #-0x12
 80021cc:      	b	0x80021ea <core::fmt::Formatter::pad::he5455c2681f601f2+0x22e> @ imm = #0x1a
 80021ce:      	subs.w	r9, r4, #0x110000
 80021d2:      	ldr	r0, [sp]
 80021d4:      	it	ne
 80021d6:      	movne	r9, r0
 80021d8:      	cmp.w	r4, #0x110000
 80021dc:      	beq	0x80021ea <core::fmt::Formatter::pad::he5455c2681f601f2+0x22e> @ imm = #0xa
 80021de:      	ldr	r3, [r6, #0xc]
 80021e0:      	mov	r0, r11
 80021e2:      	mov	r1, r8
 80021e4:      	mov	r2, r10
 80021e6:      	blx	r3
 80021e8:      	cbz	r0, 0x80021f4 <core::fmt::Formatter::pad::he5455c2681f601f2+0x238> @ imm = #0x8
 80021ea:      	movs	r0, #0x1
 80021ec:      	add	sp, #0x4
 80021ee:      	pop.w	{r8, r9, r10, r11}
 80021f2:      	pop	{r4, r5, r6, r7, pc}
 80021f4:      	movs	r5, #0x0
 80021f6:      	cmp	r9, r5
 80021f8:      	beq	0x800220c <core::fmt::Formatter::pad::he5455c2681f601f2+0x250> @ imm = #0x10
 80021fa:      	ldr	r2, [r6, #0x10]
 80021fc:      	mov	r0, r11
 80021fe:      	mov	r1, r4
 8002200:      	blx	r2
 8002202:      	adds	r5, #0x1
 8002204:      	cmp	r0, #0x0
 8002206:      	beq	0x80021f6 <core::fmt::Formatter::pad::he5455c2681f601f2+0x23a> @ imm = #-0x14
 8002208:      	subs	r1, r5, #0x1
 800220a:      	b	0x800220e <core::fmt::Formatter::pad::he5455c2681f601f2+0x252> @ imm = #0x0
 800220c:      	mov	r1, r9
 800220e:      	movs	r0, #0x0
 8002210:      	cmp	r1, r9
 8002212:      	it	lo
 8002214:      	movlo	r0, #0x1
 8002216:      	add	sp, #0x4
 8002218:      	pop.w	{r8, r9, r10, r11}
 800221c:      	pop	{r4, r5, r6, r7, pc}

0800221e <core::slice::index::slice_start_index_len_fail::h6ed2ddd4d001bda9>:
 800221e:      	push	{r7, lr}
 8002220:      	mov	r7, sp
 8002222:      	bl	0x8001982 <core::intrinsics::const_eval_select::h622725240bac45cc> @ imm = #-0x8a4
 8002226:      	trap

08002228 <core::slice::index::slice_start_index_len_fail_rt::h4f6d799cdb288644>:
 8002228:      	push	{r7, lr}
 800222a:      	mov	r7, sp
 800222c:      	sub	sp, #0x30
 800222e:      	strd	r0, r1, [sp]
 8002232:      	add	r1, sp, #0x20
 8002234:      	movs	r0, #0x2
 8002236:      	str	r1, [sp, #0x18]
 8002238:      	movs	r1, #0x0
 800223a:      	str	r0, [sp, #0x1c]
 800223c:      	strd	r0, r1, [sp, #12]
 8002240:      	movw	r0, #0x3bbc
 8002244:      	movt	r0, #0x800
 8002248:      	str	r1, [sp, #0x14]
 800224a:      	str	r0, [sp, #0x8]
 800224c:      	movw	r0, #0x291b
 8002250:      	add	r1, sp, #0x4
 8002252:      	movt	r0, #0x800
 8002256:      	str	r0, [sp, #0x2c]
 8002258:      	strd	r0, r1, [sp, #36]
 800225c:      	mov	r0, sp
 800225e:      	movw	r1, #0x3bec
 8002262:      	str	r0, [sp, #0x20]
 8002264:      	add	r0, sp, #0x8
 8002266:      	movt	r1, #0x800
 800226a:      	bl	0x8001acc <core::panicking::panic_fmt::h65fc083b3717f98b> @ imm = #-0x7a2
 800226e:      	trap

08002270 <core::slice::index::slice_end_index_len_fail::hd011143c43b24c30>:
 8002270:      	push	{r7, lr}
 8002272:      	mov	r7, sp
 8002274:      	bl	0x800198c <core::intrinsics::const_eval_select::h8a95194b37dec952> @ imm = #-0x8ec
 8002278:      	trap

0800227a <core::slice::index::slice_end_index_len_fail_rt::h81c5964ce58eeccb>:
 800227a:      	push	{r7, lr}
 800227c:      	mov	r7, sp
 800227e:      	sub	sp, #0x30
 8002280:      	strd	r0, r1, [sp]
 8002284:      	add	r1, sp, #0x20
 8002286:      	movs	r0, #0x2
 8002288:      	str	r1, [sp, #0x18]
 800228a:      	movs	r1, #0x0
 800228c:      	str	r0, [sp, #0x1c]
 800228e:      	strd	r0, r1, [sp, #12]
 8002292:      	movw	r0, #0x3bfc
 8002296:      	movt	r0, #0x800
 800229a:      	str	r1, [sp, #0x14]
 800229c:      	str	r0, [sp, #0x8]
 800229e:      	movw	r0, #0x291b
 80022a2:      	add	r1, sp, #0x4
 80022a4:      	movt	r0, #0x800
 80022a8:      	str	r0, [sp, #0x2c]
 80022aa:      	strd	r0, r1, [sp, #36]
 80022ae:      	mov	r0, sp
 80022b0:      	movw	r1, #0x3c0c
 80022b4:      	str	r0, [sp, #0x20]
 80022b6:      	add	r0, sp, #0x8
 80022b8:      	movt	r1, #0x800
 80022bc:      	bl	0x8001acc <core::panicking::panic_fmt::h65fc083b3717f98b> @ imm = #-0x7f4
 80022c0:      	trap

080022c2 <core::slice::index::slice_index_order_fail::hc1a51d1aea021ef7>:
 80022c2:      	push	{r7, lr}
 80022c4:      	mov	r7, sp
 80022c6:      	bl	0x8001978 <core::intrinsics::const_eval_select::h5043eedffcffa74b> @ imm = #-0x952
 80022ca:      	trap

080022cc <core::slice::index::slice_index_order_fail_rt::h271d7c399f051c19>:
 80022cc:      	push	{r7, lr}
 80022ce:      	mov	r7, sp
 80022d0:      	sub	sp, #0x30
 80022d2:      	strd	r0, r1, [sp]
 80022d6:      	add	r1, sp, #0x20
 80022d8:      	movs	r0, #0x2
 80022da:      	str	r1, [sp, #0x18]
 80022dc:      	movs	r1, #0x0
 80022de:      	str	r0, [sp, #0x1c]
 80022e0:      	strd	r0, r1, [sp, #12]
 80022e4:      	movw	r0, #0x3c40
 80022e8:      	movt	r0, #0x800
 80022ec:      	str	r1, [sp, #0x14]
 80022ee:      	str	r0, [sp, #0x8]
 80022f0:      	movw	r0, #0x291b
 80022f4:      	add	r1, sp, #0x4
 80022f6:      	movt	r0, #0x800
 80022fa:      	str	r0, [sp, #0x2c]
 80022fc:      	strd	r0, r1, [sp, #36]
 8002300:      	mov	r0, sp
 8002302:      	movw	r1, #0x3c50
 8002306:      	str	r0, [sp, #0x20]
 8002308:      	add	r0, sp, #0x8
 800230a:      	movt	r1, #0x800
 800230e:      	bl	0x8001acc <core::panicking::panic_fmt::h65fc083b3717f98b> @ imm = #-0x846
 8002312:      	trap

08002314 <core::str::count::do_count_chars::h5249cb4d427fe10f>:
 8002314:      	push	{r4, r5, r6, r7, lr}
 8002316:      	add	r7, sp, #0xc
 8002318:      	push.w	{r8, r9, r10, r11}
 800231c:      	sub	sp, #0x4
 800231e:      	mov	r2, r0
 8002320:      	adds	r0, #0x3
 8002322:      	bic	r6, r0, #0x3
 8002326:      	subs	r0, r6, r2
 8002328:      	cmp	r0, r1
 800232a:      	it	ls
 800232c:      	cmpls	r0, #0x4
 800232e:      	bls	0x800234a <core::str::count::do_count_chars::h5249cb4d427fe10f+0x36> @ imm = #0x18
 8002330:      	cbz	r1, 0x8002340 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x2c> @ imm = #0xc
 8002332:      	subs	r0, r1, #0x1
 8002334:      	and	r12, r1, #0x3
 8002338:      	cmp	r0, #0x3
 800233a:      	bhs	0x8002370 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x5c> @ imm = #0x32
 800233c:      	movs	r0, #0x0
 800233e:      	b	0x80023aa <core::str::count::do_count_chars::h5249cb4d427fe10f+0x96> @ imm = #0x68
 8002340:      	movs	r0, #0x0
 8002342:      	add	sp, #0x4
 8002344:      	pop.w	{r8, r9, r10, r11}
 8002348:      	pop	{r4, r5, r6, r7, pc}
 800234a:      	sub.w	r8, r1, r0
 800234e:      	cmp.w	r8, #0x4
 8002352:      	blo	0x8002330 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x1c> @ imm = #-0x26
 8002354:      	add.w	r9, r2, r0
 8002358:      	and	lr, r8, #0x3
 800235c:      	cmp	r0, #0x0
 800235e:      	beq	0x80023e8 <core::str::count::do_count_chars::h5249cb4d427fe10f+0xd4> @ imm = #0x86
 8002360:      	mvns	r1, r2
 8002362:      	add	r6, r1
 8002364:      	and	r12, r0, #0x3
 8002368:      	cmp	r6, #0x3
 800236a:      	bhs	0x80023ec <core::str::count::do_count_chars::h5249cb4d427fe10f+0xd8> @ imm = #0x7e
 800236c:      	movs	r0, #0x0
 800236e:      	b	0x8002426 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x112> @ imm = #0xb4
 8002370:      	bic	r1, r1, #0x3
 8002374:      	movs	r0, #0x0
 8002376:      	ldrsb.w	r6, [r2, #0x2]
 800237a:      	ldrsb.w	r5, [r2, #0x3]
 800237e:      	ldrsb	r4, [r2], #4
 8002382:      	ldrsb	r3, [r2, #-3]
 8002386:      	cmn.w	r4, #0x41
 800238a:      	it	gt
 800238c:      	addgt	r0, #0x1
 800238e:      	cmn.w	r3, #0x41
 8002392:      	it	gt
 8002394:      	addgt	r0, #0x1
 8002396:      	cmn.w	r6, #0x41
 800239a:      	it	gt
 800239c:      	addgt	r0, #0x1
 800239e:      	cmn.w	r5, #0x41
 80023a2:      	it	gt
 80023a4:      	addgt	r0, #0x1
 80023a6:      	subs	r1, #0x4
 80023a8:      	bne	0x8002376 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x62> @ imm = #-0x36
 80023aa:      	cmp.w	r12, #0x0
 80023ae:      	beq	0x8002342 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x2e> @ imm = #-0x70
 80023b0:      	ldrsb.w	r1, [r2]
 80023b4:      	cmn.w	r1, #0x41
 80023b8:      	it	gt
 80023ba:      	addgt	r0, #0x1
 80023bc:      	cmp.w	r12, #0x1
 80023c0:      	beq	0x8002342 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x2e> @ imm = #-0x82
 80023c2:      	ldrsb.w	r1, [r2, #0x1]
 80023c6:      	cmn.w	r1, #0x41
 80023ca:      	it	gt
 80023cc:      	addgt	r0, #0x1
 80023ce:      	cmp.w	r12, #0x2
 80023d2:      	beq	0x8002342 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x2e> @ imm = #-0x94
 80023d4:      	ldrsb.w	r1, [r2, #0x2]
 80023d8:      	cmn.w	r1, #0x41
 80023dc:      	it	gt
 80023de:      	addgt	r0, #0x1
 80023e0:      	add	sp, #0x4
 80023e2:      	pop.w	{r8, r9, r10, r11}
 80023e6:      	pop	{r4, r5, r6, r7, pc}
 80023e8:      	movs	r0, #0x0
 80023ea:      	b	0x800245c <core::str::count::do_count_chars::h5249cb4d427fe10f+0x148> @ imm = #0x6e
 80023ec:      	bic	r6, r0, #0x3
 80023f0:      	movs	r0, #0x0
 80023f2:      	ldrsb.w	r1, [r2, #0x2]
 80023f6:      	ldrsb.w	r4, [r2, #0x3]
 80023fa:      	ldrsb	r5, [r2], #4
 80023fe:      	ldrsb	r3, [r2, #-3]
 8002402:      	cmn.w	r5, #0x41
 8002406:      	it	gt
 8002408:      	addgt	r0, #0x1
 800240a:      	cmn.w	r3, #0x41
 800240e:      	it	gt
 8002410:      	addgt	r0, #0x1
 8002412:      	cmn.w	r1, #0x41
 8002416:      	it	gt
 8002418:      	addgt	r0, #0x1
 800241a:      	cmn.w	r4, #0x41
 800241e:      	it	gt
 8002420:      	addgt	r0, #0x1
 8002422:      	subs	r6, #0x4
 8002424:      	bne	0x80023f2 <core::str::count::do_count_chars::h5249cb4d427fe10f+0xde> @ imm = #-0x36
 8002426:      	cmp.w	r12, #0x0
 800242a:      	beq	0x800245c <core::str::count::do_count_chars::h5249cb4d427fe10f+0x148> @ imm = #0x2e
 800242c:      	ldrsb.w	r1, [r2]
 8002430:      	cmn.w	r1, #0x41
 8002434:      	it	gt
 8002436:      	addgt	r0, #0x1
 8002438:      	cmp.w	r12, #0x1
 800243c:      	beq	0x800245c <core::str::count::do_count_chars::h5249cb4d427fe10f+0x148> @ imm = #0x1c
 800243e:      	ldrsb.w	r1, [r2, #0x1]
 8002442:      	cmn.w	r1, #0x41
 8002446:      	it	gt
 8002448:      	addgt	r0, #0x1
 800244a:      	cmp.w	r12, #0x2
 800244e:      	beq	0x800245c <core::str::count::do_count_chars::h5249cb4d427fe10f+0x148> @ imm = #0xa
 8002450:      	ldrsb.w	r1, [r2, #0x2]
 8002454:      	cmn.w	r1, #0x41
 8002458:      	it	gt
 800245a:      	addgt	r0, #0x1
 800245c:      	lsr.w	r11, r8, #0x2
 8002460:      	movs	r2, #0x0
 8002462:      	cmp.w	lr, #0x0
 8002466:      	beq	0x80024a0 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x18c> @ imm = #0x36
 8002468:      	bic	r3, r8, #0x3
 800246c:      	add.w	r6, r9, r3
 8002470:      	ldrsb.w	r3, [r6]
 8002474:      	cmn.w	r3, #0x41
 8002478:      	it	gt
 800247a:      	movgt	r2, #0x1
 800247c:      	cmp.w	lr, #0x1
 8002480:      	beq	0x80024a0 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x18c> @ imm = #0x1c
 8002482:      	ldrsb.w	r3, [r6, #0x1]
 8002486:      	cmn.w	r3, #0x41
 800248a:      	it	gt
 800248c:      	addgt	r2, #0x1
 800248e:      	cmp.w	lr, #0x2
 8002492:      	beq	0x80024a0 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x18c> @ imm = #0xa
 8002494:      	ldrsb.w	r3, [r6, #0x2]
 8002498:      	cmn.w	r3, #0x41
 800249c:      	it	gt
 800249e:      	addgt	r2, #0x1
 80024a0:      	add	r0, r2
 80024a2:      	b	0x80024c6 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x1b2> @ imm = #0x20
 80024a4:      	uxtb16	r1, r12
 80024a8:      	uxtb16	r2, r12, ror #8
 80024ac:      	add	r1, r2
 80024ae:      	sub.w	r11, r11, r10
 80024b2:      	add.w	r9, lr, r10, lsl #2
 80024b6:      	ands	r4, r10, #0x3
 80024ba:      	add.w	r1, r1, r1, lsl #16
 80024be:      	add.w	r0, r0, r1, lsr #16
 80024c2:      	bne.w	0x800276c <core::str::count::do_count_chars::h5249cb4d427fe10f+0x458> @ imm = #0x2a6
 80024c6:      	cmp.w	r11, #0x0
 80024ca:      	beq.w	0x8002342 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x2e> @ imm = #-0x18c
 80024ce:      	mov	r10, r11
 80024d0:      	cmp.w	r11, #0xc0
 80024d4:      	it	hs
 80024d6:      	movhs.w	r10, #0xc0
 80024da:      	lsr.w	r3, r10, #0x2
 80024de:      	mov.w	r12, #0x0
 80024e2:      	mov	lr, r9
 80024e4:      	cmp.w	r12, r3, lsl #4
 80024e8:      	beq	0x80024a4 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x190> @ imm = #-0x48
 80024ea:      	subs	r3, #0x1
 80024ec:      	bic	r3, r3, #0xf0000000
 80024f0:      	adds	r2, r3, #0x1
 80024f2:      	cmp	r3, #0x3
 80024f4:      	bhs	0x8002506 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x1f2> @ imm = #0xe
 80024f6:      	mov.w	r12, #0x0
 80024fa:      	mov	r3, lr
 80024fc:      	ands	r8, r2, #0x3
 8002500:      	bne.w	0x800267a <core::str::count::do_count_chars::h5249cb4d427fe10f+0x366> @ imm = #0x176
 8002504:      	b	0x80024a4 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x190> @ imm = #-0x64
 8002506:      	movw	r1, #0xfffc
 800250a:      	mov.w	r12, #0x0
 800250e:      	movt	r1, #0x1fff
 8002512:      	and.w	r9, r2, r1
 8002516:      	mov	r3, lr
 8002518:      	str	r2, [sp]
 800251a:      	ldrd	r4, r2, [r3]
 800251e:      	subs.w	r9, r9, #0x4
 8002522:      	ldrd	r1, r6, [r3, #8]
 8002526:      	ldr.w	r8, [r3, #0x14]
 800252a:      	mvn.w	r5, r4
 800252e:      	lsr.w	r5, r5, #0x7
 8002532:      	orr.w	r4, r5, r4, lsr #6
 8002536:      	bic	r4, r4, #0xfefefefe
 800253a:      	add.w	r5, r4, r12
 800253e:      	mvn.w	r4, r2
 8002542:      	lsr.w	r4, r4, #0x7
 8002546:      	orr.w	r2, r4, r2, lsr #6
 800254a:      	bic	r4, r2, #0xfefefefe
 800254e:      	ldr.w	r12, [r3, #0x3c]
 8002552:      	add	r5, r4
 8002554:      	mvn.w	r4, r1
 8002558:      	lsr.w	r2, r4, #0x7
 800255c:      	orr.w	r1, r2, r1, lsr #6
 8002560:      	bic	r1, r1, #0xfefefefe
 8002564:      	ldr	r2, [r3, #0x10]
 8002566:      	add	r1, r5
 8002568:      	mvn.w	r5, r6
 800256c:      	lsr.w	r5, r5, #0x7
 8002570:      	ldr	r4, [r3, #0x38]
 8002572:      	orr.w	r5, r5, r6, lsr #6
 8002576:      	ldr	r6, [r3, #0x18]
 8002578:      	bic	r5, r5, #0xfefefefe
 800257c:      	add	r1, r5
 800257e:      	mvn.w	r5, r2
 8002582:      	lsr.w	r5, r5, #0x7
 8002586:      	orr.w	r2, r5, r2, lsr #6
 800258a:      	bic	r2, r2, #0xfefefefe
 800258e:      	ldr	r5, [r3, #0x1c]
 8002590:      	add	r1, r2
 8002592:      	mvn.w	r2, r8
 8002596:      	lsr.w	r2, r2, #0x7
 800259a:      	orr.w	r2, r2, r8, lsr #6
 800259e:      	bic	r2, r2, #0xfefefefe
 80025a2:      	add.w	r8, r2, r1
 80025a6:      	mvn.w	r2, r6
 80025aa:      	lsr.w	r2, r2, #0x7
 80025ae:      	ldr	r1, [r3, #0x20]
 80025b0:      	orr.w	r2, r2, r6, lsr #6
 80025b4:      	mvn.w	r6, r5
 80025b8:      	bic	r2, r2, #0xfefefefe
 80025bc:      	lsr.w	r6, r6, #0x7
 80025c0:      	orr.w	r5, r6, r5, lsr #6
 80025c4:      	add	r8, r2
 80025c6:      	ldr	r2, [r3, #0x24]
 80025c8:      	mvn.w	r6, r1
 80025cc:      	bic	r5, r5, #0xfefefefe
 80025d0:      	lsr.w	r6, r6, #0x7
 80025d4:      	orr.w	r1, r6, r1, lsr #6
 80025d8:      	add	r8, r5
 80025da:      	ldr	r5, [r3, #0x28]
 80025dc:      	mvn.w	r6, r2
 80025e0:      	bic	r1, r1, #0xfefefefe
 80025e4:      	lsr.w	r6, r6, #0x7
 80025e8:      	orr.w	r2, r6, r2, lsr #6
 80025ec:      	add	r8, r1
 80025ee:      	ldr	r1, [r3, #0x2c]
 80025f0:      	mvn.w	r6, r5
 80025f4:      	bic	r2, r2, #0xfefefefe
 80025f8:      	lsr.w	r6, r6, #0x7
 80025fc:      	add	r8, r2
 80025fe:      	ldr	r2, [r3, #0x30]
 8002600:      	orr.w	r5, r6, r5, lsr #6
 8002604:      	mvn.w	r6, r1
 8002608:      	bic	r5, r5, #0xfefefefe
 800260c:      	lsr.w	r6, r6, #0x7
 8002610:      	orr.w	r1, r6, r1, lsr #6
 8002614:      	mvn.w	r6, r2
 8002618:      	add	r8, r5
 800261a:      	ldr	r5, [r3, #0x34]
 800261c:      	bic	r1, r1, #0xfefefefe
 8002620:      	lsr.w	r6, r6, #0x7
 8002624:      	orr.w	r2, r6, r2, lsr #6
 8002628:      	add	r1, r8
 800262a:      	bic	r2, r2, #0xfefefefe
 800262e:      	add.w	r3, r3, #0x40
 8002632:      	add	r1, r2
 8002634:      	mvn.w	r2, r5
 8002638:      	lsr.w	r2, r2, #0x7
 800263c:      	orr.w	r2, r2, r5, lsr #6
 8002640:      	bic	r2, r2, #0xfefefefe
 8002644:      	add	r1, r2
 8002646:      	mvn.w	r2, r4
 800264a:      	lsr.w	r2, r2, #0x7
 800264e:      	orr.w	r2, r2, r4, lsr #6
 8002652:      	bic	r2, r2, #0xfefefefe
 8002656:      	add	r1, r2
 8002658:      	mvn.w	r2, r12
 800265c:      	lsr.w	r2, r2, #0x7
 8002660:      	orr.w	r2, r2, r12, lsr #6
 8002664:      	bic	r2, r2, #0xfefefefe
 8002668:      	add.w	r12, r2, r1
 800266c:      	bne.w	0x800251a <core::str::count::do_count_chars::h5249cb4d427fe10f+0x206> @ imm = #-0x156
 8002670:      	ldr	r2, [sp]
 8002672:      	ands	r8, r2, #0x3
 8002676:      	beq.w	0x80024a4 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x190> @ imm = #-0x1d6
 800267a:      	ldm.w	r3, {r1, r2, r5, r6}
 800267e:      	cmp.w	r8, #0x1
 8002682:      	mvn.w	r4, r1
 8002686:      	lsr.w	r4, r4, #0x7
 800268a:      	orr.w	r1, r4, r1, lsr #6
 800268e:      	mvn.w	r4, r2
 8002692:      	bic	r1, r1, #0xfefefefe
 8002696:      	lsr.w	r4, r4, #0x7
 800269a:      	orr.w	r2, r4, r2, lsr #6
 800269e:      	add	r1, r12
 80026a0:      	bic	r2, r2, #0xfefefefe
 80026a4:      	add	r1, r2
 80026a6:      	mvn.w	r2, r5
 80026aa:      	lsr.w	r2, r2, #0x7
 80026ae:      	orr.w	r2, r2, r5, lsr #6
 80026b2:      	bic	r2, r2, #0xfefefefe
 80026b6:      	add	r1, r2
 80026b8:      	mvn.w	r2, r6
 80026bc:      	lsr.w	r2, r2, #0x7
 80026c0:      	orr.w	r2, r2, r6, lsr #6
 80026c4:      	bic	r2, r2, #0xfefefefe
 80026c8:      	add.w	r12, r2, r1
 80026cc:      	beq.w	0x80024a4 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x190> @ imm = #-0x22c
 80026d0:      	add.w	r5, r3, #0x10
 80026d4:      	cmp.w	r8, #0x2
 80026d8:      	ldm	r5, {r1, r2, r4, r5}
 80026da:      	mvn.w	r6, r1
 80026de:      	lsr.w	r6, r6, #0x7
 80026e2:      	orr.w	r1, r6, r1, lsr #6
 80026e6:      	mvn.w	r6, r2
 80026ea:      	bic	r1, r1, #0xfefefefe
 80026ee:      	lsr.w	r6, r6, #0x7
 80026f2:      	orr.w	r2, r6, r2, lsr #6
 80026f6:      	add	r1, r12
 80026f8:      	bic	r2, r2, #0xfefefefe
 80026fc:      	add	r1, r2
 80026fe:      	mvn.w	r2, r4
 8002702:      	lsr.w	r2, r2, #0x7
 8002706:      	orr.w	r2, r2, r4, lsr #6
 800270a:      	bic	r2, r2, #0xfefefefe
 800270e:      	add	r1, r2
 8002710:      	mvn.w	r2, r5
 8002714:      	lsr.w	r2, r2, #0x7
 8002718:      	orr.w	r2, r2, r5, lsr #6
 800271c:      	bic	r2, r2, #0xfefefefe
 8002720:      	add.w	r12, r2, r1
 8002724:      	beq.w	0x80024a4 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x190> @ imm = #-0x284
 8002728:      	add.w	r4, r3, #0x20
 800272c:      	ldr	r3, [r3, #0x2c]
 800272e:      	ldm	r4, {r1, r2, r4}
 8002730:      	mvns	r6, r2
 8002732:      	lsrs	r6, r6, #0x7
 8002734:      	orr.w	r2, r6, r2, lsr #6
 8002738:      	mvns	r5, r1
 800273a:      	bic	r2, r2, #0xfefefefe
 800273e:      	lsrs	r5, r5, #0x7
 8002740:      	orr.w	r1, r5, r1, lsr #6
 8002744:      	bic	r1, r1, #0xfefefefe
 8002748:      	add	r1, r12
 800274a:      	add	r1, r2
 800274c:      	mvns	r2, r4
 800274e:      	lsrs	r2, r2, #0x7
 8002750:      	orr.w	r2, r2, r4, lsr #6
 8002754:      	bic	r2, r2, #0xfefefefe
 8002758:      	add	r1, r2
 800275a:      	mvns	r2, r3
 800275c:      	lsrs	r2, r2, #0x7
 800275e:      	orr.w	r2, r2, r3, lsr #6
 8002762:      	bic	r2, r2, #0xfefefefe
 8002766:      	add.w	r12, r2, r1
 800276a:      	b	0x80024a4 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x190> @ imm = #-0x2ca
 800276c:      	subs	r2, r4, #0x1
 800276e:      	and	r1, r10, #0xfc
 8002772:      	bic	r6, r2, #0xc0000000
 8002776:      	adds	r3, r6, #0x1
 8002778:      	add.w	r1, lr, r1, lsl #2
 800277c:      	and	r12, r3, #0x3
 8002780:      	cmp	r6, #0x3
 8002782:      	bhs	0x800278a <core::str::count::do_count_chars::h5249cb4d427fe10f+0x476> @ imm = #0x4
 8002784:      	mov.w	lr, #0x0
 8002788:      	b	0x80027f6 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x4e2> @ imm = #0x6a
 800278a:      	movw	r2, #0xfffc
 800278e:      	mov.w	lr, #0x0
 8002792:      	movt	r2, #0x1fff
 8002796:      	add.w	r6, r2, #0x60000000
 800279a:      	ands	r6, r3
 800279c:      	ldrd	r5, r4, [r1]
 80027a0:      	subs	r6, #0x4
 80027a2:      	ldrd	r2, r8, [r1, #8]
 80027a6:      	add.w	r1, r1, #0x10
 80027aa:      	mvn.w	r3, r5
 80027ae:      	lsr.w	r3, r3, #0x7
 80027b2:      	orr.w	r3, r3, r5, lsr #6
 80027b6:      	mvn.w	r5, r4
 80027ba:      	lsr.w	r5, r5, #0x7
 80027be:      	bic	r3, r3, #0xfefefefe
 80027c2:      	orr.w	r5, r5, r4, lsr #6
 80027c6:      	add	r3, lr
 80027c8:      	bic	r5, r5, #0xfefefefe
 80027cc:      	add	r3, r5
 80027ce:      	mvn.w	r5, r2
 80027d2:      	lsr.w	r5, r5, #0x7
 80027d6:      	orr.w	r2, r5, r2, lsr #6
 80027da:      	bic	r2, r2, #0xfefefefe
 80027de:      	add	r2, r3
 80027e0:      	mvn.w	r3, r8
 80027e4:      	lsr.w	r3, r3, #0x7
 80027e8:      	orr.w	r3, r3, r8, lsr #6
 80027ec:      	bic	r3, r3, #0xfefefefe
 80027f0:      	add.w	lr, r3, r2
 80027f4:      	bne	0x800279c <core::str::count::do_count_chars::h5249cb4d427fe10f+0x488> @ imm = #-0x5c
 80027f6:      	cmp.w	r12, #0x0
 80027fa:      	beq	0x8002840 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x52c> @ imm = #0x42
 80027fc:      	ldr	r6, [r1]
 80027fe:      	cmp.w	r12, #0x1
 8002802:      	mvn.w	r5, r6
 8002806:      	lsr.w	r5, r5, #0x7
 800280a:      	orr.w	r6, r5, r6, lsr #6
 800280e:      	bic	r6, r6, #0xfefefefe
 8002812:      	add	lr, r6
 8002814:      	beq	0x8002840 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x52c> @ imm = #0x28
 8002816:      	ldr	r6, [r1, #0x4]
 8002818:      	cmp.w	r12, #0x2
 800281c:      	mvn.w	r5, r6
 8002820:      	lsr.w	r5, r5, #0x7
 8002824:      	orr.w	r6, r5, r6, lsr #6
 8002828:      	bic	r6, r6, #0xfefefefe
 800282c:      	add	lr, r6
 800282e:      	beq	0x8002840 <core::str::count::do_count_chars::h5249cb4d427fe10f+0x52c> @ imm = #0xe
 8002830:      	ldr	r1, [r1, #0x8]
 8002832:      	mvns	r2, r1
 8002834:      	lsrs	r2, r2, #0x7
 8002836:      	orr.w	r1, r2, r1, lsr #6
 800283a:      	bic	r1, r1, #0xfefefefe
 800283e:      	add	lr, r1
 8002840:      	uxtb16	r1, lr
 8002844:      	uxtb16	r2, lr, ror #8
 8002848:      	add	r1, r2
 800284a:      	add.w	r1, r1, r1, lsl #16
 800284e:      	add.w	r0, r0, r1, lsr #16
 8002852:      	add	sp, #0x4
 8002854:      	pop.w	{r8, r9, r10, r11}
 8002858:      	pop	{r4, r5, r6, r7, pc}

0800285a <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h815e0ce4cfda5712>:
 800285a:      	push	{r4, r6, r7, lr}
 800285c:      	add	r7, sp, #0x8
 800285e:      	sub	sp, #0x88
 8002860:      	ldr	r0, [r0]
 8002862:      	add.w	r12, sp, #0x8
 8002866:      	mov.w	lr, #0x81
 800286a:      	and	r3, r0, #0xf
 800286e:      	add.w	r2, r12, lr
 8002872:      	cmp	r3, #0xa
 8002874:      	mov.w	r4, #0x37
 8002878:      	it	lo
 800287a:      	movlo	r4, #0x30
 800287c:      	cmp	r0, #0x10
 800287e:      	add	r3, r4
 8002880:      	strb	r3, [r2, #-2]
 8002884:      	blo	0x80028d2 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h815e0ce4cfda5712+0x78> @ imm = #0x4a
 8002886:      	uxtb	r3, r0
 8002888:      	movs	r4, #0x37
 800288a:      	cmp	r3, #0xa0
 800288c:      	it	lo
 800288e:      	movlo	r4, #0x30
 8002890:      	add.w	r3, r4, r3, lsr #4
 8002894:      	strb	r3, [r2, #-3]
 8002898:      	lsrs	r3, r0, #0x8
 800289a:      	beq	0x80028dc <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h815e0ce4cfda5712+0x82> @ imm = #0x3e
 800289c:      	and	r3, r3, #0xf
 80028a0:      	movs	r4, #0x37
 80028a2:      	cmp	r3, #0xa
 80028a4:      	it	lo
 80028a6:      	movlo	r4, #0x30
 80028a8:      	add	r3, r4
 80028aa:      	strb	r3, [r2, #-4]
 80028ae:      	lsrs	r3, r0, #0xc
 80028b0:      	beq	0x80028e6 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h815e0ce4cfda5712+0x8c> @ imm = #0x32
 80028b2:      	and	r3, r3, #0xf
 80028b6:      	movs	r4, #0x37
 80028b8:      	cmp	r3, #0xa
 80028ba:      	sub.w	lr, lr, #0x4
 80028be:      	it	lo
 80028c0:      	movlo	r4, #0x30
 80028c2:      	lsrs	r0, r0, #0x10
 80028c4:      	add	r3, r4
 80028c6:      	strb	r3, [r2, #-5]
 80028ca:      	bne	0x800286a <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h815e0ce4cfda5712+0x10> @ imm = #-0x64
 80028cc:      	sub.w	r0, lr, #0x1
 80028d0:      	b	0x80028ee <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h815e0ce4cfda5712+0x94> @ imm = #0x1a
 80028d2:      	sub.w	r0, lr, #0x2
 80028d6:      	sub.w	lr, lr, #0x1
 80028da:      	b	0x80028ee <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h815e0ce4cfda5712+0x94> @ imm = #0x10
 80028dc:      	sub.w	r0, lr, #0x3
 80028e0:      	sub.w	lr, lr, #0x2
 80028e4:      	b	0x80028ee <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h815e0ce4cfda5712+0x94> @ imm = #0x6
 80028e6:      	sub.w	r0, lr, #0x4
 80028ea:      	sub.w	lr, lr, #0x3
 80028ee:      	cmp	r0, #0x81
 80028f0:      	bhs	0x8002912 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h815e0ce4cfda5712+0xb8> @ imm = #0x1e
 80028f2:      	rsb.w	r2, lr, #0x81
 80028f6:      	add	r0, r12
 80028f8:      	movs	r3, #0x2
 80028fa:      	strd	r0, r2, [sp]
 80028fe:      	movw	r2, #0x3abc
 8002902:      	mov	r0, r1
 8002904:      	movt	r2, #0x800
 8002908:      	movs	r1, #0x1
 800290a:      	bl	0x8001c76 <core::fmt::Formatter::pad_integral::h56543b18c83975ab> @ imm = #-0xc98
 800290e:      	add	sp, #0x88
 8002910:      	pop	{r4, r6, r7, pc}
 8002912:      	movs	r1, #0x80
 8002914:      	bl	0x800221e <core::slice::index::slice_start_index_len_fail::h6ed2ddd4d001bda9> @ imm = #-0x6fa
 8002918:      	trap

0800291a <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h8581b92a1d8153f5>:
 800291a:      	push	{r4, r5, r6, r7, lr}
 800291c:      	add	r7, sp, #0xc
 800291e:      	push.w	{r8, r9, r10, r11}
 8002922:      	sub	sp, #0x34
 8002924:      	ldr	r4, [r0]
 8002926:      	movw	r0, #0x3abe
 800292a:      	movw	lr, #0x2710
 800292e:      	mov	r5, r1
 8002930:      	cmp	r4, lr
 8002932:      	movt	r0, #0x800
 8002936:      	blo	0x80029b2 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h8581b92a1d8153f5+0x98> @ imm = #0x78
 8002938:      	movw	r8, #0x1759
 800293c:      	movw	r3, #0xe0ff
 8002940:      	add.w	r11, sp, #0xc
 8002944:      	movs	r1, #0x0
 8002946:      	movt	r8, #0xd1b7
 800294a:      	movw	r9, #0x147b
 800294e:      	mov.w	r10, #0x64
 8002952:      	movt	r3, #0x5f5
 8002956:      	str	r5, [sp, #0x8]
 8002958:      	umull	r2, r5, r4, r8
 800295c:      	add.w	r12, r11, r1
 8002960:      	subs	r1, #0x4
 8002962:      	cmp	r4, r3
 8002964:      	lsr.w	r2, r5, #0xd
 8002968:      	mls	r5, r2, lr, r4
 800296c:      	mov	r4, r2
 800296e:      	uxth	r6, r5
 8002970:      	lsr.w	r6, r6, #0x2
 8002974:      	mul	r6, r6, r9
 8002978:      	lsr.w	r6, r6, #0x11
 800297c:      	mls	r5, r6, r10, r5
 8002980:      	ldrh.w	r6, [r0, r6, lsl #1]
 8002984:      	strh.w	r6, [r12, #0x23]
 8002988:      	uxth	r5, r5
 800298a:      	ldrh.w	r5, [r0, r5, lsl #1]
 800298e:      	strh.w	r5, [r12, #0x25]
 8002992:      	bhi	0x8002958 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h8581b92a1d8153f5+0x3e> @ imm = #-0x3e
 8002994:      	ldr	r5, [sp, #0x8]
 8002996:      	add.w	r3, r1, #0x27
 800299a:      	mov	r4, r2
 800299c:      	cmp	r4, #0x63
 800299e:      	bhi	0x80029b8 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h8581b92a1d8153f5+0x9e> @ imm = #0x16
 80029a0:      	mov	r1, r4
 80029a2:      	cmp	r1, #0xa
 80029a4:      	blo	0x80029da <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h8581b92a1d8153f5+0xc0> @ imm = #0x32
 80029a6:      	ldrh.w	r0, [r0, r1, lsl #1]
 80029aa:      	subs	r2, r3, #0x2
 80029ac:      	add	r1, sp, #0xc
 80029ae:      	strh	r0, [r1, r2]
 80029b0:      	b	0x80029e4 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h8581b92a1d8153f5+0xca> @ imm = #0x30
 80029b2:      	movs	r3, #0x27
 80029b4:      	cmp	r4, #0x63
 80029b6:      	bls	0x80029a0 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h8581b92a1d8153f5+0x86> @ imm = #-0x1a
 80029b8:      	uxth	r1, r4
 80029ba:      	movw	r2, #0x147b
 80029be:      	lsrs	r1, r1, #0x2
 80029c0:      	subs	r3, #0x2
 80029c2:      	muls	r1, r2, r1
 80029c4:      	movs	r2, #0x64
 80029c6:      	add	r6, sp, #0xc
 80029c8:      	lsrs	r1, r1, #0x11
 80029ca:      	mls	r2, r1, r2, r4
 80029ce:      	uxth	r2, r2
 80029d0:      	ldrh.w	r2, [r0, r2, lsl #1]
 80029d4:      	strh	r2, [r6, r3]
 80029d6:      	cmp	r1, #0xa
 80029d8:      	bhs	0x80029a6 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h8581b92a1d8153f5+0x8c> @ imm = #-0x36
 80029da:      	subs	r2, r3, #0x1
 80029dc:      	add.w	r0, r1, #0x30
 80029e0:      	add	r1, sp, #0xc
 80029e2:      	strb	r0, [r1, r2]
 80029e4:      	add	r1, sp, #0xc
 80029e6:      	rsb.w	r0, r2, #0x27
 80029ea:      	add	r1, r2
 80029ec:      	movw	r2, #0x3a60
 80029f0:      	strd	r1, r0, [sp]
 80029f4:      	movt	r2, #0x800
 80029f8:      	mov	r0, r5
 80029fa:      	movs	r1, #0x1
 80029fc:      	movs	r3, #0x0
 80029fe:      	bl	0x8001c76 <core::fmt::Formatter::pad_integral::h56543b18c83975ab> @ imm = #-0xd8c
 8002a02:      	add	sp, #0x34
 8002a04:      	pop.w	{r8, r9, r10, r11}
 8002a08:      	pop	{r4, r5, r6, r7, pc}

08002a0a <<&T as core::fmt::Display>::fmt::h1b202564e83fc832>:
 8002a0a:      	mov	r3, r1
 8002a0c:      	ldrd	r1, r2, [r0]
 8002a10:      	mov	r0, r3
 8002a12:      	b.w	0x8001fbc <core::fmt::Formatter::pad::he5455c2681f601f2> @ imm = #-0xa5a

08002a16 <<&T as core::fmt::Display>::fmt::h666df0d592d59c10>:
 8002a16:      	ldr	r0, [r0]
 8002a18:      	mov	r3, r1
 8002a1a:      	ldrd	r1, r2, [r0]
 8002a1e:      	mov	r0, r3
 8002a20:      	b.w	0x8001fbc <core::fmt::Formatter::pad::he5455c2681f601f2> @ imm = #-0xa68

08002a24 <<&T as core::fmt::Display>::fmt::h92537403b3730510>:
 8002a24:      	push	{r4, r5, r6, r7, lr}
 8002a26:      	add	r7, sp, #0xc
 8002a28:      	push.w	{r8, r9, r11}
 8002a2c:      	sub	sp, #0x18
 8002a2e:      	ldr.w	lr, [r0]
 8002a32:      	mov	r2, sp
 8002a34:      	ldrd	r12, r1, [r1, #24]
 8002a38:      	mov	r3, r2
 8002a3a:      	ldm.w	lr, {r0, r4, r5, r6, r8, r9}
 8002a3e:      	stm.w	r3, {r0, r4, r5, r6, r8, r9}
 8002a42:      	mov	r0, r12
 8002a44:      	bl	0x8001af8 <core::fmt::write::h5f65a040c5660086> @ imm = #-0xf50
 8002a48:      	add	sp, #0x18
 8002a4a:      	pop.w	{r8, r9, r11}
 8002a4e:      	pop	{r4, r5, r6, r7, pc}

08002a50 <rust_begin_unwind>:
; fn panic(info: &PanicInfo) -> ! {
 8002a50:      	push	{r7, lr}
 8002a52:      	mov	r7, sp
 8002a54:      	sub	sp, #0x40
 8002a56:      	str	r0, [sp, #0x10]
;     interrupt::disable();
 8002a58:      	bl	0x8002ab4 <cortex_m::interrupt::disable::h8931aec85c2297f4> @ imm = #0x58
 8002a5c:      	b	0x8002a5e <rust_begin_unwind+0xe> @ imm = #-0x2
;     let itm = unsafe { &mut *ITM::ptr() };
 8002a5e:      	b	0x8002a60 <rust_begin_unwind+0x10> @ imm = #-0x2
 8002a60:      	mov.w	r0, #0xe0000000
;     let itm = unsafe { &mut *ITM::ptr() };
 8002a64:      	str	r0, [sp, #0x38]
;     let stim = &mut itm.stim[0];
 8002a66:      	mov	r1, r0
 8002a68:      	str	r1, [sp, #0x4]
 8002a6a:      	str	r0, [sp, #0x3c]
 8002a6c:      	add	r0, sp, #0x10
;     iprintln!(stim, "{}", info);
 8002a6e:      	bl	0x8002ac0 <core::fmt::ArgumentV1::new_display::h5de29b0de586841a> @ imm = #0x4e
 8002a72:      	str	r0, [sp, #0x8]
 8002a74:      	str	r1, [sp, #0xc]
 8002a76:      	b	0x8002a78 <rust_begin_unwind+0x28> @ imm = #-0x2
 8002a78:      	ldr	r0, [sp, #0xc]
 8002a7a:      	ldr	r1, [sp, #0x8]
 8002a7c:      	str	r1, [sp, #0x2c]
 8002a7e:      	str	r0, [sp, #0x30]
 8002a80:      	mov	r1, sp
 8002a82:      	movs	r0, #0x1
 8002a84:      	str	r0, [r1]
 8002a86:      	movw	r1, #0x3c64
 8002a8a:      	movt	r1, #0x800
 8002a8e:      	add	r0, sp, #0x14
 8002a90:      	movs	r2, #0x2
 8002a92:      	add	r3, sp, #0x2c
 8002a94:      	bl	0x8002ba4 <core::fmt::Arguments::new_v1::h5c9d356837e9dbad> @ imm = #0x10c
 8002a98:      	b	0x8002a9a <rust_begin_unwind+0x4a> @ imm = #-0x2
 8002a9a:      	ldr	r0, [sp, #0x4]
 8002a9c:      	add	r1, sp, #0x14
 8002a9e:      	bl	0x8002d8e <cortex_m::itm::write_fmt::h84228eae3b745fc2> @ imm = #0x2ec
 8002aa2:      	b	0x8002aa4 <rust_begin_unwind+0x54> @ imm = #-0x2
 8002aa4:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 8002aa6:      	strb	r0, [r7, #-9]
 8002aaa:      	ldrb	r0, [r7, #-9]
 8002aae:      	bl	0x800364c <core::sync::atomic::compiler_fence::hddf5e3339e39344b> @ imm = #0xb9a
 8002ab2:      	b	0x8002aa4 <rust_begin_unwind+0x54> @ imm = #-0x12

08002ab4 <cortex_m::interrupt::disable::h8931aec85c2297f4>:
; pub fn disable() {
 8002ab4:      	push	{r7, lr}
 8002ab6:      	mov	r7, sp
;     call_asm!(__cpsid());
 8002ab8:      	bl	0x8001944 <__cpsid>     @ imm = #-0x1178
 8002abc:      	b	0x8002abe <cortex_m::interrupt::disable::h8931aec85c2297f4+0xa> @ imm = #-0x2
; }
 8002abe:      	pop	{r7, pc}

08002ac0 <core::fmt::ArgumentV1::new_display::h5de29b0de586841a>:
 8002ac0:      	push	{r7, lr}
 8002ac2:      	mov	r7, sp
 8002ac4:      	sub	sp, #0x10
 8002ac6:      	str	r0, [sp, #0xc]
 8002ac8:      	movw	r1, #0x2c51
 8002acc:      	movt	r1, #0x800
 8002ad0:      	bl	0x8002b26 <core::fmt::ArgumentV1::new::h8aa71541f8288c51> @ imm = #0x52
 8002ad4:      	str	r0, [sp, #0x4]
 8002ad6:      	str	r1, [sp, #0x8]
 8002ad8:      	b	0x8002ada <core::fmt::ArgumentV1::new_display::h5de29b0de586841a+0x1a> @ imm = #-0x2
 8002ada:      	ldr	r1, [sp, #0x8]
 8002adc:      	ldr	r0, [sp, #0x4]
 8002ade:      	add	sp, #0x10
 8002ae0:      	pop	{r7, pc}

08002ae2 <core::fmt::ArgumentV1::new_display::hba2fec88114e52c1>:
 8002ae2:      	push	{r7, lr}
 8002ae4:      	mov	r7, sp
 8002ae6:      	sub	sp, #0x10
 8002ae8:      	str	r0, [sp, #0xc]
 8002aea:      	movw	r1, #0x291b
 8002aee:      	movt	r1, #0x800
 8002af2:      	bl	0x8002b50 <core::fmt::ArgumentV1::new::he07aa605aaadf69c> @ imm = #0x5a
 8002af6:      	str	r0, [sp, #0x4]
 8002af8:      	str	r1, [sp, #0x8]
 8002afa:      	b	0x8002afc <core::fmt::ArgumentV1::new_display::hba2fec88114e52c1+0x1a> @ imm = #-0x2
 8002afc:      	ldr	r1, [sp, #0x8]
 8002afe:      	ldr	r0, [sp, #0x4]
 8002b00:      	add	sp, #0x10
 8002b02:      	pop	{r7, pc}

08002b04 <core::fmt::ArgumentV1::new_upper_hex::h6cf39cb474951701>:
 8002b04:      	push	{r7, lr}
 8002b06:      	mov	r7, sp
 8002b08:      	sub	sp, #0x10
 8002b0a:      	str	r0, [sp, #0xc]
 8002b0c:      	movw	r1, #0x285b
 8002b10:      	movt	r1, #0x800
 8002b14:      	bl	0x8002b7a <core::fmt::ArgumentV1::new::he0c624751de19d5c> @ imm = #0x62
 8002b18:      	str	r0, [sp, #0x4]
 8002b1a:      	str	r1, [sp, #0x8]
 8002b1c:      	b	0x8002b1e <core::fmt::ArgumentV1::new_upper_hex::h6cf39cb474951701+0x1a> @ imm = #-0x2
 8002b1e:      	ldr	r1, [sp, #0x8]
 8002b20:      	ldr	r0, [sp, #0x4]
 8002b22:      	add	sp, #0x10
 8002b24:      	pop	{r7, pc}

08002b26 <core::fmt::ArgumentV1::new::h8aa71541f8288c51>:
 8002b26:      	sub	sp, #0x24
 8002b28:      	str	r0, [sp, #0x4]
 8002b2a:      	str	r0, [sp, #0x14]
 8002b2c:      	str	r1, [sp, #0x18]
 8002b2e:      	str	r1, [sp, #0x1c]
 8002b30:      	ldr	r0, [sp, #0x1c]
 8002b32:      	str	r0, [sp, #0x8]
 8002b34:      	b	0x8002b36 <core::fmt::ArgumentV1::new::h8aa71541f8288c51+0x10> @ imm = #-0x2
 8002b36:      	ldr	r0, [sp, #0x4]
 8002b38:      	str	r0, [sp, #0x20]
 8002b3a:      	ldr	r0, [sp, #0x20]
 8002b3c:      	str	r0, [sp]
 8002b3e:      	b	0x8002b40 <core::fmt::ArgumentV1::new::h8aa71541f8288c51+0x1a> @ imm = #-0x2
 8002b40:      	ldr	r0, [sp, #0x8]
 8002b42:      	ldr	r1, [sp]
 8002b44:      	str	r1, [sp, #0xc]
 8002b46:      	str	r0, [sp, #0x10]
 8002b48:      	ldr	r0, [sp, #0xc]
 8002b4a:      	ldr	r1, [sp, #0x10]
 8002b4c:      	add	sp, #0x24
 8002b4e:      	bx	lr

08002b50 <core::fmt::ArgumentV1::new::he07aa605aaadf69c>:
 8002b50:      	sub	sp, #0x24
 8002b52:      	str	r0, [sp, #0x4]
 8002b54:      	str	r0, [sp, #0x14]
 8002b56:      	str	r1, [sp, #0x18]
 8002b58:      	str	r1, [sp, #0x1c]
 8002b5a:      	ldr	r0, [sp, #0x1c]
 8002b5c:      	str	r0, [sp, #0x8]
 8002b5e:      	b	0x8002b60 <core::fmt::ArgumentV1::new::he07aa605aaadf69c+0x10> @ imm = #-0x2
 8002b60:      	ldr	r0, [sp, #0x4]
 8002b62:      	str	r0, [sp, #0x20]
 8002b64:      	ldr	r0, [sp, #0x20]
 8002b66:      	str	r0, [sp]
 8002b68:      	b	0x8002b6a <core::fmt::ArgumentV1::new::he07aa605aaadf69c+0x1a> @ imm = #-0x2
 8002b6a:      	ldr	r0, [sp, #0x8]
 8002b6c:      	ldr	r1, [sp]
 8002b6e:      	str	r1, [sp, #0xc]
 8002b70:      	str	r0, [sp, #0x10]
 8002b72:      	ldr	r0, [sp, #0xc]
 8002b74:      	ldr	r1, [sp, #0x10]
 8002b76:      	add	sp, #0x24
 8002b78:      	bx	lr

08002b7a <core::fmt::ArgumentV1::new::he0c624751de19d5c>:
 8002b7a:      	sub	sp, #0x24
 8002b7c:      	str	r0, [sp, #0x4]
 8002b7e:      	str	r0, [sp, #0x14]
 8002b80:      	str	r1, [sp, #0x18]
 8002b82:      	str	r1, [sp, #0x1c]
 8002b84:      	ldr	r0, [sp, #0x1c]
 8002b86:      	str	r0, [sp, #0x8]
 8002b88:      	b	0x8002b8a <core::fmt::ArgumentV1::new::he0c624751de19d5c+0x10> @ imm = #-0x2
 8002b8a:      	ldr	r0, [sp, #0x4]
 8002b8c:      	str	r0, [sp, #0x20]
 8002b8e:      	ldr	r0, [sp, #0x20]
 8002b90:      	str	r0, [sp]
 8002b92:      	b	0x8002b94 <core::fmt::ArgumentV1::new::he0c624751de19d5c+0x1a> @ imm = #-0x2
 8002b94:      	ldr	r0, [sp, #0x8]
 8002b96:      	ldr	r1, [sp]
 8002b98:      	str	r1, [sp, #0xc]
 8002b9a:      	str	r0, [sp, #0x10]
 8002b9c:      	ldr	r0, [sp, #0xc]
 8002b9e:      	ldr	r1, [sp, #0x10]
 8002ba0:      	add	sp, #0x24
 8002ba2:      	bx	lr

08002ba4 <core::fmt::Arguments::new_v1::h5c9d356837e9dbad>:
 8002ba4:      	push	{r7, lr}
 8002ba6:      	mov	r7, sp
 8002ba8:      	sub	sp, #0x50
 8002baa:      	str	r3, [sp, #0x8]
 8002bac:      	str	r2, [sp, #0xc]
 8002bae:      	str	r1, [sp, #0x10]
 8002bb0:      	str	r0, [sp, #0x14]
 8002bb2:      	ldr	r0, [r7, #0x8]
 8002bb4:      	str	r0, [sp, #0x18]
 8002bb6:      	str	r1, [sp, #0x40]
 8002bb8:      	str	r2, [sp, #0x44]
 8002bba:      	str	r3, [sp, #0x48]
 8002bbc:      	str	r0, [sp, #0x4c]
 8002bbe:      	cmp	r2, r0
 8002bc0:      	blo	0x8002bd8 <core::fmt::Arguments::new_v1::h5c9d356837e9dbad+0x34> @ imm = #0x14
 8002bc2:      	b	0x8002bc4 <core::fmt::Arguments::new_v1::h5c9d356837e9dbad+0x20> @ imm = #-0x2
 8002bc4:      	ldr	r1, [sp, #0xc]
 8002bc6:      	ldr	r0, [sp, #0x18]
 8002bc8:      	adds	r2, r0, #0x1
 8002bca:      	movs	r0, #0x0
 8002bcc:      	cmp	r1, r2
 8002bce:      	it	hi
 8002bd0:      	movhi	r0, #0x1
 8002bd2:      	strb	r0, [r7, #-49]
 8002bd6:      	b	0x8002be0 <core::fmt::Arguments::new_v1::h5c9d356837e9dbad+0x3c> @ imm = #0x6
 8002bd8:      	movs	r0, #0x1
 8002bda:      	strb	r0, [r7, #-49]
 8002bde:      	b	0x8002be0 <core::fmt::Arguments::new_v1::h5c9d356837e9dbad+0x3c> @ imm = #-0x2
 8002be0:      	ldrb	r0, [r7, #-49]
 8002be4:      	lsls	r0, r0, #0x1f
 8002be6:      	cbnz	r0, 0x8002c20 <core::fmt::Arguments::new_v1::h5c9d356837e9dbad+0x7c> @ imm = #0x36
 8002be8:      	b	0x8002bea <core::fmt::Arguments::new_v1::h5c9d356837e9dbad+0x46> @ imm = #-0x2
 8002bea:      	ldr	r0, [sp, #0x18]
 8002bec:      	ldr	r1, [sp, #0x14]
 8002bee:      	ldr	r2, [sp, #0x8]
 8002bf0:      	ldr	r3, [sp, #0xc]
 8002bf2:      	ldr.w	r12, [sp, #0x10]
 8002bf6:      	mov.w	lr, #0x0
 8002bfa:      	str.w	lr, [sp, #0x3c]
 8002bfe:      	str.w	lr, [sp, #0x38]
 8002c02:      	str.w	lr, [sp, #0x38]
 8002c06:      	str.w	r12, [r1]
 8002c0a:      	str	r3, [r1, #0x4]
 8002c0c:      	ldr.w	r12, [sp, #0x38]
 8002c10:      	ldr	r3, [sp, #0x3c]
 8002c12:      	str.w	r12, [r1, #0x8]
 8002c16:      	str	r3, [r1, #0xc]
 8002c18:      	str	r2, [r1, #0x10]
 8002c1a:      	str	r0, [r1, #0x14]
 8002c1c:      	add	sp, #0x50
 8002c1e:      	pop	{r7, pc}
 8002c20:      	mov	r1, sp
 8002c22:      	movs	r0, #0x0
 8002c24:      	str	r0, [r1]
 8002c26:      	movw	r1, #0x3c80
 8002c2a:      	movt	r1, #0x800
 8002c2e:      	movw	r3, #0x3c88
 8002c32:      	movt	r3, #0x800
 8002c36:      	add	r0, sp, #0x20
 8002c38:      	movs	r2, #0x1
 8002c3a:      	bl	0x8002ba4 <core::fmt::Arguments::new_v1::h5c9d356837e9dbad> @ imm = #-0x9a
 8002c3e:      	b	0x8002c40 <core::fmt::Arguments::new_v1::h5c9d356837e9dbad+0x9c> @ imm = #-0x2
 8002c40:      	movw	r1, #0x3cd4
 8002c44:      	movt	r1, #0x800
 8002c48:      	add	r0, sp, #0x20
 8002c4a:      	bl	0x8001acc <core::panicking::panic_fmt::h65fc083b3717f98b> @ imm = #-0x1182
 8002c4e:      	trap

08002c50 <<&T as core::fmt::Display>::fmt::h03f8bd5b9f9e5092>:
 8002c50:      	push	{r7, lr}
 8002c52:      	mov	r7, sp
 8002c54:      	sub	sp, #0x10
 8002c56:      	str	r0, [sp, #0x8]
 8002c58:      	str	r1, [sp, #0xc]
 8002c5a:      	ldr	r0, [r0]
 8002c5c:      	bl	0x80019a8 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::h588f49c526ded6ea> @ imm = #-0x12b8
 8002c60:      	str	r0, [sp, #0x4]
 8002c62:      	b	0x8002c64 <<&T as core::fmt::Display>::fmt::h03f8bd5b9f9e5092+0x14> @ imm = #-0x2
 8002c64:      	ldr	r0, [sp, #0x4]
 8002c66:      	and	r0, r0, #0x1
 8002c6a:      	add	sp, #0x10
 8002c6c:      	pop	{r7, pc}

08002c6e <core::fmt::Write::write_char::hc5d84f5d4f93911d>:
 8002c6e:      	push	{r7, lr}
 8002c70:      	mov	r7, sp
 8002c72:      	sub	sp, #0x20
 8002c74:      	str	r1, [sp, #0x4]
 8002c76:      	mov	r1, r0
 8002c78:      	ldr	r0, [sp, #0x4]
 8002c7a:      	str	r1, [sp, #0x8]
 8002c7c:      	str	r1, [sp, #0x18]
 8002c7e:      	str	r0, [sp, #0x1c]
 8002c80:      	movs	r1, #0x0
 8002c82:      	str	r1, [sp, #0x14]
 8002c84:      	add	r1, sp, #0x14
 8002c86:      	movs	r2, #0x4
 8002c88:      	bl	0x8002f82 <core::char::methods::<impl char>::encode_utf8::h76381f13a83695b8> @ imm = #0x2f6
 8002c8c:      	str	r0, [sp, #0xc]
 8002c8e:      	str	r1, [sp, #0x10]
 8002c90:      	b	0x8002c92 <core::fmt::Write::write_char::hc5d84f5d4f93911d+0x24> @ imm = #-0x2
 8002c92:      	ldr	r2, [sp, #0x10]
 8002c94:      	ldr	r1, [sp, #0xc]
 8002c96:      	ldr	r0, [sp, #0x8]
 8002c98:      	bl	0x8002d52 <<cortex_m::itm::Port as core::fmt::Write>::write_str::hba11f4d829431b08> @ imm = #0xb6
 8002c9c:      	str	r0, [sp]
 8002c9e:      	b	0x8002ca0 <core::fmt::Write::write_char::hc5d84f5d4f93911d+0x32> @ imm = #-0x2
 8002ca0:      	ldr	r0, [sp]
 8002ca2:      	and	r0, r0, #0x1
 8002ca6:      	add	sp, #0x20
 8002ca8:      	pop	{r7, pc}

08002caa <core::fmt::Write::write_fmt::ha26e064985961ac7>:
 8002caa:      	push	{r4, r5, r6, r7, lr}
 8002cac:      	add	r7, sp, #0xc
 8002cae:      	str	r11, [sp, #-4]!
 8002cb2:      	sub	sp, #0x20
 8002cb4:      	str	r0, [sp, #0x4]
 8002cb6:      	add	r2, sp, #0x8
 8002cb8:      	mov	r0, r2
 8002cba:      	ldm.w	r1, {r3, r4, r5, r6, r12, lr}
 8002cbe:      	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 8002cc2:      	movw	r1, #0x3ce4
 8002cc6:      	movt	r1, #0x800
 8002cca:      	add	r0, sp, #0x4
 8002ccc:      	bl	0x8001af8 <core::fmt::write::h5f65a040c5660086> @ imm = #-0x11d8
 8002cd0:      	str	r0, [sp]
 8002cd2:      	b	0x8002cd4 <core::fmt::Write::write_fmt::ha26e064985961ac7+0x2a> @ imm = #-0x2
 8002cd4:      	ldr	r0, [sp]
 8002cd6:      	and	r0, r0, #0x1
 8002cda:      	add	sp, #0x20
 8002cdc:      	ldr	r11, [sp], #4
 8002ce0:      	pop	{r4, r5, r6, r7, pc}

08002ce2 <<&mut W as core::fmt::Write>::write_char::h0e879c664973df41>:
 8002ce2:      	push	{r7, lr}
 8002ce4:      	mov	r7, sp
 8002ce6:      	sub	sp, #0x10
 8002ce8:      	str	r0, [sp, #0x8]
 8002cea:      	str	r1, [sp, #0xc]
 8002cec:      	ldr	r0, [r0]
 8002cee:      	bl	0x8002c6e <core::fmt::Write::write_char::hc5d84f5d4f93911d> @ imm = #-0x84
 8002cf2:      	str	r0, [sp, #0x4]
 8002cf4:      	b	0x8002cf6 <<&mut W as core::fmt::Write>::write_char::h0e879c664973df41+0x14> @ imm = #-0x2
 8002cf6:      	ldr	r0, [sp, #0x4]
 8002cf8:      	and	r0, r0, #0x1
 8002cfc:      	add	sp, #0x10
 8002cfe:      	pop	{r7, pc}

08002d00 <<&mut W as core::fmt::Write>::write_fmt::hbc246dbea38b43c8>:
 8002d00:      	push	{r4, r5, r6, r7, lr}
 8002d02:      	add	r7, sp, #0xc
 8002d04:      	str	r8, [sp, #-4]!
 8002d08:      	sub	sp, #0x20
 8002d0a:      	mov	r3, r1
 8002d0c:      	str	r0, [sp, #0x1c]
 8002d0e:      	ldr	r0, [r0]
 8002d10:      	add	r1, sp, #0x4
 8002d12:      	mov	r2, r1
 8002d14:      	ldm.w	r3, {r4, r5, r6, r8, r12, lr}
 8002d18:      	stm.w	r2, {r4, r5, r6, r8, r12, lr}
 8002d1c:      	bl	0x8002caa <core::fmt::Write::write_fmt::ha26e064985961ac7> @ imm = #-0x76
 8002d20:      	str	r0, [sp]
 8002d22:      	b	0x8002d24 <<&mut W as core::fmt::Write>::write_fmt::hbc246dbea38b43c8+0x24> @ imm = #-0x2
 8002d24:      	ldr	r0, [sp]
 8002d26:      	and	r0, r0, #0x1
 8002d2a:      	add	sp, #0x20
 8002d2c:      	ldr	r8, [sp], #4
 8002d30:      	pop	{r4, r5, r6, r7, pc}

08002d32 <<&mut W as core::fmt::Write>::write_str::he6e6f4336ea6f237>:
 8002d32:      	push	{r7, lr}
 8002d34:      	mov	r7, sp
 8002d36:      	sub	sp, #0x10
 8002d38:      	str	r0, [sp, #0x4]
 8002d3a:      	str	r1, [sp, #0x8]
 8002d3c:      	str	r2, [sp, #0xc]
 8002d3e:      	ldr	r0, [r0]
 8002d40:      	bl	0x8002d52 <<cortex_m::itm::Port as core::fmt::Write>::write_str::hba11f4d829431b08> @ imm = #0xe
 8002d44:      	str	r0, [sp]
 8002d46:      	b	0x8002d48 <<&mut W as core::fmt::Write>::write_str::he6e6f4336ea6f237+0x16> @ imm = #-0x2
 8002d48:      	ldr	r0, [sp]
 8002d4a:      	and	r0, r0, #0x1
 8002d4e:      	add	sp, #0x10
 8002d50:      	pop	{r7, pc}

08002d52 <<cortex_m::itm::Port as core::fmt::Write>::write_str::hba11f4d829431b08>:
;     fn write_str(&mut self, s: &str) -> fmt::Result {
 8002d52:      	push	{r7, lr}
 8002d54:      	mov	r7, sp
 8002d56:      	sub	sp, #0x30
 8002d58:      	str	r0, [sp, #0x14]
 8002d5a:      	str	r1, [sp, #0x18]
 8002d5c:      	str	r2, [sp, #0x1c]
;         write_all(self.0, s.as_bytes());
 8002d5e:      	ldr	r0, [r0]
 8002d60:      	str	r0, [sp, #0x4]
 8002d62:      	str	r1, [sp, #0x20]
 8002d64:      	str	r2, [sp, #0x24]
 8002d66:      	str	r1, [sp, #0x28]
 8002d68:      	str	r2, [sp, #0x2c]
 8002d6a:      	ldr	r0, [sp, #0x28]
 8002d6c:      	str	r0, [sp, #0x8]
 8002d6e:      	ldr	r0, [sp, #0x2c]
;         write_all(self.0, s.as_bytes());
 8002d70:      	str	r0, [sp, #0xc]
 8002d72:      	b	0x8002d74 <<cortex_m::itm::Port as core::fmt::Write>::write_str::hba11f4d829431b08+0x22> @ imm = #-0x2
 8002d74:      	ldr	r2, [sp, #0xc]
 8002d76:      	ldr	r1, [sp, #0x8]
 8002d78:      	ldr	r0, [sp, #0x4]
 8002d7a:      	bl	0x800331a <cortex_m::itm::write_all::h0c018ccbed20b859> @ imm = #0x59c
 8002d7e:      	b	0x8002d80 <<cortex_m::itm::Port as core::fmt::Write>::write_str::hba11f4d829431b08+0x2e> @ imm = #-0x2
 8002d80:      	movs	r0, #0x0
;         Ok(())
 8002d82:      	strb	r0, [r7, #-29]
;     }
 8002d86:      	ldrb	r0, [r7, #-29]
 8002d8a:      	add	sp, #0x30
 8002d8c:      	pop	{r7, pc}

08002d8e <cortex_m::itm::write_fmt::h84228eae3b745fc2>:
; pub fn write_fmt(port: &mut Stim, args: fmt::Arguments) {
 8002d8e:      	push	{r4, r5, r6, r7, lr}
 8002d90:      	add	r7, sp, #0xc
 8002d92:      	str	r11, [sp, #-4]!
 8002d96:      	sub	sp, #0x28
 8002d98:      	mov	r2, r1
 8002d9a:      	str	r0, [sp, #0x24]
;     Port(port).write_fmt(args).ok();
 8002d9c:      	str	r0, [sp, #0x8]
 8002d9e:      	add	r1, sp, #0xc
 8002da0:      	mov	r0, r1
 8002da2:      	ldm.w	r2, {r3, r4, r5, r6, r12, lr}
 8002da6:      	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 8002daa:      	add	r0, sp, #0x8
 8002dac:      	bl	0x8002caa <core::fmt::Write::write_fmt::ha26e064985961ac7> @ imm = #-0x106
 8002db0:      	str	r0, [sp, #0x4]
 8002db2:      	b	0x8002db4 <cortex_m::itm::write_fmt::h84228eae3b745fc2+0x26> @ imm = #-0x2
 8002db4:      	ldr	r0, [sp, #0x4]
 8002db6:      	and	r0, r0, #0x1
 8002dba:      	bl	0x8003614 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h60f510a23ed719d4E> @ imm = #0x856
 8002dbe:      	b	0x8002dc0 <cortex_m::itm::write_fmt::h84228eae3b745fc2+0x32> @ imm = #-0x2
; }
 8002dc0:      	add	sp, #0x28
 8002dc2:      	ldr	r11, [sp], #4
 8002dc6:      	pop	{r4, r5, r6, r7, pc}

08002dc8 <core::char::methods::encode_utf8_raw::hb8b291bf822000ec>:
 8002dc8:      	push	{r7, lr}
 8002dca:      	mov	r7, sp
 8002dcc:      	sub	sp, #0xb8
 8002dce:      	str	r2, [sp, #0x34]
 8002dd0:      	str	r1, [sp, #0x38]
 8002dd2:      	str	r0, [sp, #0x3c]
 8002dd4:      	str	r1, [sp, #0x88]
 8002dd6:      	str	r2, [sp, #0x8c]
 8002dd8:      	ldr	r0, [sp, #0x3c]
 8002dda:      	bl	0x8002fae <core::char::methods::len_utf8::h41f2a1f8d55156d0> @ imm = #0x1d0
 8002dde:      	str	r0, [sp, #0x40]
 8002de0:      	b	0x8002de2 <core::char::methods::encode_utf8_raw::hb8b291bf822000ec+0x1a> @ imm = #-0x2
 8002de2:      	ldr	r1, [sp, #0x34]
 8002de4:      	ldr	r0, [sp, #0x38]
 8002de6:      	ldr	r2, [sp, #0x40]
 8002de8:      	str	r2, [sp, #0x28]
 8002dea:      	movw	r2, #0x3d4c
 8002dee:      	movt	r2, #0x800
 8002df2:      	bl	0x8002ff0 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h3d98e75cc71c8d66> @ imm = #0x1fa
 8002df6:      	str	r0, [sp, #0x2c]
 8002df8:      	str	r1, [sp, #0x30]
 8002dfa:      	b	0x8002dfc <core::char::methods::encode_utf8_raw::hb8b291bf822000ec+0x34> @ imm = #-0x2
 8002dfc:      	ldr	r0, [sp, #0x30]
 8002dfe:      	ldr	r1, [sp, #0x2c]
 8002e00:      	ldr	r2, [sp, #0x28]
 8002e02:      	str	r2, [sp, #0x44]
 8002e04:      	str	r1, [sp, #0x48]
 8002e06:      	str	r0, [sp, #0x4c]
 8002e08:      	ldr	r0, [sp, #0x44]
 8002e0a:      	subs	r0, #0x1
 8002e0c:      	mov	r1, r0
 8002e0e:      	str	r1, [sp, #0x24]
 8002e10:      	cmp	r0, #0x3
 8002e12:      	bhi	0x8002e1e <$t.2>        @ imm = #0x8
 8002e14:      	ldr	r1, [sp, #0x24]
 8002e16:      	tbb	[pc, r1]

08002e1a <$d.1>:
 8002e1a:	08 0c 10 14	.word	0x14100c08

08002e1e <$t.2>:
 8002e1e:      	add	r0, sp, #0x40
 8002e20:      	bl	0x8002ae2 <core::fmt::ArgumentV1::new_display::hba2fec88114e52c1> @ imm = #-0x342
 8002e24:      	str	r0, [sp, #0x1c]
 8002e26:      	str	r1, [sp, #0x20]
 8002e28:      	b	0x8002f1e <$t.2+0x100>  @ imm = #0xf2
 8002e2a:      	ldr	r0, [sp, #0x4c]
 8002e2c:      	cmp	r0, #0x0
 8002e2e:      	bne	0x8002f0c <$t.2+0xee>   @ imm = #0xda
 8002e30:      	b	0x8002e1e <$t.2>        @ imm = #-0x16
 8002e32:      	ldr	r0, [sp, #0x4c]
 8002e34:      	cmp	r0, #0x1
 8002e36:      	bhi	0x8002ee8 <$t.2+0xca>   @ imm = #0xae
 8002e38:      	b	0x8002e1e <$t.2>        @ imm = #-0x1e
 8002e3a:      	ldr	r0, [sp, #0x4c]
 8002e3c:      	cmp	r0, #0x2
 8002e3e:      	bhi	0x8002eb2 <$t.2+0x94>   @ imm = #0x70
 8002e40:      	b	0x8002e1e <$t.2>        @ imm = #-0x26
 8002e42:      	ldr	r0, [sp, #0x4c]
 8002e44:      	cmp	r0, #0x4
 8002e46:      	blo	0x8002e1e <$t.2>        @ imm = #-0x2c
 8002e48:      	b	0x8002e4a <$t.2+0x2c>   @ imm = #-0x2
 8002e4a:      	ldr	r2, [sp, #0x48]
 8002e4c:      	str	r2, [sp, #0x90]
 8002e4e:      	ldr.w	r12, [sp, #0x48]
 8002e52:      	add.w	r0, r12, #0x1
 8002e56:      	str	r0, [sp, #0x94]
 8002e58:      	ldr	r3, [sp, #0x48]
 8002e5a:      	adds	r0, r3, #0x2
 8002e5c:      	str	r0, [sp, #0x98]
 8002e5e:      	ldr	r1, [sp, #0x48]
 8002e60:      	adds	r0, r1, #0x3
 8002e62:      	str	r0, [sp, #0x9c]
 8002e64:      	ldr	r0, [sp, #0x3c]
 8002e66:      	lsrs	r0, r0, #0x12
 8002e68:      	mov.w	lr, #0x1e
 8002e6c:      	bfi	r0, lr, #3, #29
 8002e70:      	strb	r0, [r2]
 8002e72:      	ldr	r0, [sp, #0x3c]
 8002e74:      	lsrs	r0, r0, #0xc
 8002e76:      	movs	r2, #0x2
 8002e78:      	bfi	r0, r2, #6, #26
 8002e7c:      	strb.w	r0, [r12, #0x1]
 8002e80:      	ldr	r0, [sp, #0x3c]
 8002e82:      	lsrs	r0, r0, #0x6
 8002e84:      	bfi	r0, r2, #6, #26
 8002e88:      	strb	r0, [r3, #0x2]
 8002e8a:      	ldrb.w	r0, [sp, #0x3c]
 8002e8e:      	bfi	r0, r2, #6, #26
 8002e92:      	strb	r0, [r1, #0x3]
 8002e94:      	b	0x8002e96 <$t.2+0x78>   @ imm = #-0x2
 8002e96:      	ldr	r1, [sp, #0x34]
 8002e98:      	ldr	r0, [sp, #0x38]
 8002e9a:      	ldr	r2, [sp, #0x40]
 8002e9c:      	str	r2, [sp, #0x84]
 8002e9e:      	ldr	r2, [sp, #0x84]
 8002ea0:      	movw	r3, #0x3d5c
 8002ea4:      	movt	r3, #0x800
 8002ea8:      	bl	0x800300c <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h3fa1ebda78b88018> @ imm = #0x160
 8002eac:      	str	r0, [sp, #0x14]
 8002eae:      	str	r1, [sp, #0x18]
 8002eb0:      	b	0x8002f16 <$t.2+0xf8>   @ imm = #0x62
 8002eb2:      	ldr	r2, [sp, #0x48]
 8002eb4:      	str	r2, [sp, #0xa0]
 8002eb6:      	ldr	r3, [sp, #0x48]
 8002eb8:      	adds	r0, r3, #0x1
 8002eba:      	str	r0, [sp, #0xa4]
 8002ebc:      	ldr	r1, [sp, #0x48]
 8002ebe:      	adds	r0, r1, #0x2
 8002ec0:      	str	r0, [sp, #0xa8]
 8002ec2:      	ldr	r0, [sp, #0x3c]
 8002ec4:      	lsrs	r0, r0, #0xc
 8002ec6:      	mov.w	r12, #0xe
 8002eca:      	bfi	r0, r12, #4, #28
 8002ece:      	strb	r0, [r2]
 8002ed0:      	ldr	r0, [sp, #0x3c]
 8002ed2:      	lsrs	r0, r0, #0x6
 8002ed4:      	movs	r2, #0x2
 8002ed6:      	bfi	r0, r2, #6, #26
 8002eda:      	strb	r0, [r3, #0x1]
 8002edc:      	ldrb.w	r0, [sp, #0x3c]
 8002ee0:      	bfi	r0, r2, #6, #26
 8002ee4:      	strb	r0, [r1, #0x2]
 8002ee6:      	b	0x8002e96 <$t.2+0x78>   @ imm = #-0x54
 8002ee8:      	ldr	r2, [sp, #0x48]
 8002eea:      	str	r2, [sp, #0xac]
 8002eec:      	ldr	r1, [sp, #0x48]
 8002eee:      	adds	r0, r1, #0x1
 8002ef0:      	str	r0, [sp, #0xb0]
 8002ef2:      	ldr	r0, [sp, #0x3c]
 8002ef4:      	lsrs	r0, r0, #0x6
 8002ef6:      	movs	r3, #0x6
 8002ef8:      	bfi	r0, r3, #5, #27
 8002efc:      	strb	r0, [r2]
 8002efe:      	ldrb.w	r0, [sp, #0x3c]
 8002f02:      	movs	r2, #0x2
 8002f04:      	bfi	r0, r2, #6, #26
 8002f08:      	strb	r0, [r1, #0x1]
 8002f0a:      	b	0x8002e96 <$t.2+0x78>   @ imm = #-0x78
 8002f0c:      	ldr	r1, [sp, #0x48]
 8002f0e:      	str	r1, [sp, #0xb4]
 8002f10:      	ldr	r0, [sp, #0x3c]
 8002f12:      	strb	r0, [r1]
 8002f14:      	b	0x8002e96 <$t.2+0x78>   @ imm = #-0x82
 8002f16:      	ldr	r1, [sp, #0x18]
 8002f18:      	ldr	r0, [sp, #0x14]
 8002f1a:      	add	sp, #0xb8
 8002f1c:      	pop	{r7, pc}
 8002f1e:      	add	r0, sp, #0x3c
 8002f20:      	bl	0x8002b04 <core::fmt::ArgumentV1::new_upper_hex::h6cf39cb474951701> @ imm = #-0x420
 8002f24:      	str	r0, [sp, #0xc]
 8002f26:      	str	r1, [sp, #0x10]
 8002f28:      	b	0x8002f2a <$t.2+0x10c>  @ imm = #-0x2
 8002f2a:      	ldr	r0, [sp, #0x34]
 8002f2c:      	str	r0, [sp, #0x80]
 8002f2e:      	add	r0, sp, #0x80
 8002f30:      	bl	0x8002ae2 <core::fmt::ArgumentV1::new_display::hba2fec88114e52c1> @ imm = #-0x452
 8002f34:      	str	r0, [sp, #0x4]
 8002f36:      	str	r1, [sp, #0x8]
 8002f38:      	b	0x8002f3a <$t.2+0x11c>  @ imm = #-0x2
 8002f3a:      	ldr	r0, [sp, #0x8]
 8002f3c:      	ldr	r1, [sp, #0x4]
 8002f3e:      	ldr	r2, [sp, #0x10]
 8002f40:      	ldr	r3, [sp, #0xc]
 8002f42:      	ldr.w	r12, [sp, #0x20]
 8002f46:      	ldr.w	lr, [sp, #0x1c]
 8002f4a:      	str.w	lr, [sp, #0x68]
 8002f4e:      	str.w	r12, [sp, #0x6c]
 8002f52:      	str	r3, [sp, #0x70]
 8002f54:      	str	r2, [sp, #0x74]
 8002f56:      	str	r1, [sp, #0x78]
 8002f58:      	str	r0, [sp, #0x7c]
 8002f5a:      	mov	r0, sp
 8002f5c:      	movs	r2, #0x3
 8002f5e:      	str	r2, [r0]
 8002f60:      	movw	r1, #0x3da8
 8002f64:      	movt	r1, #0x800
 8002f68:      	add	r0, sp, #0x50
 8002f6a:      	add	r3, sp, #0x68
 8002f6c:      	bl	0x8002ba4 <core::fmt::Arguments::new_v1::h5c9d356837e9dbad> @ imm = #-0x3cc
 8002f70:      	b	0x8002f72 <$t.2+0x154>  @ imm = #-0x2
 8002f72:      	movw	r1, #0x3dc0
 8002f76:      	movt	r1, #0x800
 8002f7a:      	add	r0, sp, #0x50
 8002f7c:      	bl	0x8001acc <core::panicking::panic_fmt::h65fc083b3717f98b> @ imm = #-0x14b4
 8002f80:      	trap

08002f82 <core::char::methods::<impl char>::encode_utf8::h76381f13a83695b8>:
 8002f82:      	push	{r7, lr}
 8002f84:      	mov	r7, sp
 8002f86:      	sub	sp, #0x20
 8002f88:      	str	r0, [sp, #0x14]
 8002f8a:      	str	r1, [sp, #0x18]
 8002f8c:      	str	r2, [sp, #0x1c]
 8002f8e:      	bl	0x8002dc8 <core::char::methods::encode_utf8_raw::hb8b291bf822000ec> @ imm = #-0x1ca
 8002f92:      	str	r0, [sp, #0xc]
 8002f94:      	str	r1, [sp, #0x10]
 8002f96:      	b	0x8002f98 <core::char::methods::<impl char>::encode_utf8::h76381f13a83695b8+0x16> @ imm = #-0x2
 8002f98:      	ldr	r1, [sp, #0x10]
 8002f9a:      	ldr	r0, [sp, #0xc]
 8002f9c:      	bl	0x800315c <core::str::converts::from_utf8_unchecked_mut::hd1273a7566c231f6> @ imm = #0x1bc
 8002fa0:      	str	r0, [sp, #0x4]
 8002fa2:      	str	r1, [sp, #0x8]
 8002fa4:      	b	0x8002fa6 <core::char::methods::<impl char>::encode_utf8::h76381f13a83695b8+0x24> @ imm = #-0x2
 8002fa6:      	ldr	r1, [sp, #0x8]
 8002fa8:      	ldr	r0, [sp, #0x4]
 8002faa:      	add	sp, #0x20
 8002fac:      	pop	{r7, pc}

08002fae <core::char::methods::len_utf8::h41f2a1f8d55156d0>:
 8002fae:      	sub	sp, #0xc
 8002fb0:      	str	r0, [sp]
 8002fb2:      	str	r0, [sp, #0x8]
 8002fb4:      	cmp	r0, #0x80
 8002fb6:      	blo	0x8002fc4 <core::char::methods::len_utf8::h41f2a1f8d55156d0+0x16> @ imm = #0xa
 8002fb8:      	b	0x8002fba <core::char::methods::len_utf8::h41f2a1f8d55156d0+0xc> @ imm = #-0x2
 8002fba:      	ldr	r0, [sp]
 8002fbc:      	cmp.w	r0, #0x800
 8002fc0:      	blo	0x8002fda <core::char::methods::len_utf8::h41f2a1f8d55156d0+0x2c> @ imm = #0x16
 8002fc2:      	b	0x8002fd0 <core::char::methods::len_utf8::h41f2a1f8d55156d0+0x22> @ imm = #0xa
 8002fc4:      	movs	r0, #0x1
 8002fc6:      	str	r0, [sp, #0x4]
 8002fc8:      	b	0x8002fca <core::char::methods::len_utf8::h41f2a1f8d55156d0+0x1c> @ imm = #-0x2
 8002fca:      	ldr	r0, [sp, #0x4]
 8002fcc:      	add	sp, #0xc
 8002fce:      	bx	lr
 8002fd0:      	ldr	r0, [sp]
 8002fd2:      	cmp.w	r0, #0x10000
 8002fd6:      	blo	0x8002fe8 <core::char::methods::len_utf8::h41f2a1f8d55156d0+0x3a> @ imm = #0xe
 8002fd8:      	b	0x8002fe2 <core::char::methods::len_utf8::h41f2a1f8d55156d0+0x34> @ imm = #0x6
 8002fda:      	movs	r0, #0x2
 8002fdc:      	str	r0, [sp, #0x4]
 8002fde:      	b	0x8002fe0 <core::char::methods::len_utf8::h41f2a1f8d55156d0+0x32> @ imm = #-0x2
 8002fe0:      	b	0x8002fca <core::char::methods::len_utf8::h41f2a1f8d55156d0+0x1c> @ imm = #-0x1a
 8002fe2:      	movs	r0, #0x4
 8002fe4:      	str	r0, [sp, #0x4]
 8002fe6:      	b	0x8002fee <core::char::methods::len_utf8::h41f2a1f8d55156d0+0x40> @ imm = #0x4
 8002fe8:      	movs	r0, #0x3
 8002fea:      	str	r0, [sp, #0x4]
 8002fec:      	b	0x8002fee <core::char::methods::len_utf8::h41f2a1f8d55156d0+0x40> @ imm = #-0x2
 8002fee:      	b	0x8002fe0 <core::char::methods::len_utf8::h41f2a1f8d55156d0+0x32> @ imm = #-0x12

08002ff0 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h3d98e75cc71c8d66>:
 8002ff0:      	push	{r7, lr}
 8002ff2:      	mov	r7, sp
 8002ff4:      	sub	sp, #0x18
 8002ff6:      	str	r0, [sp, #0xc]
 8002ff8:      	str	r1, [sp, #0x10]
 8002ffa:      	bl	0x8003110 <<core::ops::range::RangeFull as core::slice::index::SliceIndex<[T]>>::index_mut::h22bda2afce8ff370> @ imm = #0x112
 8002ffe:      	str	r0, [sp, #0x4]
 8003000:      	str	r1, [sp, #0x8]
 8003002:      	b	0x8003004 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h3d98e75cc71c8d66+0x14> @ imm = #-0x2
 8003004:      	ldr	r1, [sp, #0x8]
 8003006:      	ldr	r0, [sp, #0x4]
 8003008:      	add	sp, #0x18
 800300a:      	pop	{r7, pc}

0800300c <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h3fa1ebda78b88018>:
 800300c:      	push	{r7, lr}
 800300e:      	mov	r7, sp
 8003010:      	sub	sp, #0x18
 8003012:      	str	r2, [sp]
 8003014:      	mov	r2, r1
 8003016:      	mov	r1, r0
 8003018:      	ldr	r0, [sp]
 800301a:      	str	r1, [sp, #0xc]
 800301c:      	str	r2, [sp, #0x10]
 800301e:      	str	r0, [sp, #0x14]
 8003020:      	bl	0x80030dc <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h46850ee969b9900d> @ imm = #0xb8
 8003024:      	str	r0, [sp, #0x4]
 8003026:      	str	r1, [sp, #0x8]
 8003028:      	b	0x800302a <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h3fa1ebda78b88018+0x1e> @ imm = #-0x2
 800302a:      	ldr	r1, [sp, #0x8]
 800302c:      	ldr	r0, [sp, #0x4]
 800302e:      	add	sp, #0x18
 8003030:      	pop	{r7, pc}

08003032 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::hc405c75ba93f4452>:
 8003032:      	push	{r7, lr}
 8003034:      	mov	r7, sp
 8003036:      	sub	sp, #0x50
 8003038:      	str	r1, [sp, #0xc]
 800303a:      	str	r0, [sp, #0x10]
 800303c:      	str	r0, [sp, #0x24]
 800303e:      	str	r1, [sp, #0x28]
 8003040:      	str	r2, [sp, #0x2c]
 8003042:      	str	r3, [sp, #0x30]
 8003044:      	str	r2, [sp, #0x48]
 8003046:      	str	r3, [sp, #0x4c]
 8003048:      	str	r2, [sp, #0x14]
 800304a:      	b	0x800304c <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::hc405c75ba93f4452+0x1a> @ imm = #-0x2
 800304c:      	ldr	r0, [sp, #0x14]
 800304e:      	ldr	r1, [sp, #0x10]
 8003050:      	str	r0, [sp, #0x34]
 8003052:      	str	r1, [sp, #0x38]
 8003054:      	str	r0, [sp, #0x3c]
 8003056:      	str	r1, [sp, #0x40]
 8003058:      	add	r0, r1
 800305a:      	str	r0, [sp, #0x44]
 800305c:      	ldr	r0, [sp, #0x44]
 800305e:      	str	r0, [sp, #0x8]
 8003060:      	b	0x8003062 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::hc405c75ba93f4452+0x30> @ imm = #-0x2
 8003062:      	ldr	r0, [sp, #0x8]
 8003064:      	ldr	r1, [sp, #0xc]
 8003066:      	ldr	r2, [sp, #0x10]
 8003068:      	subs	r1, r1, r2
 800306a:      	bl	0x800311a <core::ptr::slice_from_raw_parts_mut::h5f802e0c4ea593cf> @ imm = #0xac
 800306e:      	str	r0, [sp]
 8003070:      	str	r1, [sp, #0x4]
 8003072:      	b	0x8003074 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::hc405c75ba93f4452+0x42> @ imm = #-0x2
 8003074:      	ldr	r1, [sp, #0x4]
 8003076:      	ldr	r0, [sp]
 8003078:      	add	sp, #0x50
 800307a:      	pop	{r7, pc}

0800307c <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::hddaff01c715c7c69>:
 800307c:      	push	{r7, lr}
 800307e:      	mov	r7, sp
 8003080:      	sub	sp, #0x30
 8003082:      	str	r3, [sp, #0xc]
 8003084:      	str	r2, [sp, #0x10]
 8003086:      	str	r1, [sp, #0x14]
 8003088:      	str	r0, [sp, #0x18]
 800308a:      	ldr.w	r12, [r7, #0x8]
 800308e:      	str.w	r12, [sp, #0x1c]
 8003092:      	str	r0, [sp, #0x20]
 8003094:      	str	r1, [sp, #0x24]
 8003096:      	str	r2, [sp, #0x28]
 8003098:      	str	r3, [sp, #0x2c]
 800309a:      	cmp	r0, r1
 800309c:      	bhi	0x80030aa <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::hddaff01c715c7c69+0x2e> @ imm = #0xa
 800309e:      	b	0x80030a0 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::hddaff01c715c7c69+0x24> @ imm = #-0x2
 80030a0:      	ldr	r0, [sp, #0x14]
 80030a2:      	ldr	r1, [sp, #0xc]
 80030a4:      	cmp	r0, r1
 80030a6:      	bhi	0x80030c8 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::hddaff01c715c7c69+0x4c> @ imm = #0x1e
 80030a8:      	b	0x80030b6 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::hddaff01c715c7c69+0x3a> @ imm = #0xa
 80030aa:      	ldr	r2, [sp, #0x1c]
 80030ac:      	ldr	r1, [sp, #0x14]
 80030ae:      	ldr	r0, [sp, #0x18]
 80030b0:      	bl	0x80022c2 <core::slice::index::slice_index_order_fail::hc1a51d1aea021ef7> @ imm = #-0xdf2
 80030b4:      	trap
 80030b6:      	ldr	r3, [sp, #0xc]
 80030b8:      	ldr	r2, [sp, #0x10]
 80030ba:      	ldr	r1, [sp, #0x14]
 80030bc:      	ldr	r0, [sp, #0x18]
 80030be:      	bl	0x8003032 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::hc405c75ba93f4452> @ imm = #-0x90
 80030c2:      	str	r0, [sp, #0x4]
 80030c4:      	str	r1, [sp, #0x8]
 80030c6:      	b	0x80030d4 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::hddaff01c715c7c69+0x58> @ imm = #0xa
 80030c8:      	ldr	r2, [sp, #0x1c]
 80030ca:      	ldr	r1, [sp, #0xc]
 80030cc:      	ldr	r0, [sp, #0x14]
 80030ce:      	bl	0x8002270 <core::slice::index::slice_end_index_len_fail::hd011143c43b24c30> @ imm = #-0xe62
 80030d2:      	trap
 80030d4:      	ldr	r1, [sp, #0x8]
 80030d6:      	ldr	r0, [sp, #0x4]
 80030d8:      	add	sp, #0x30
 80030da:      	pop	{r7, pc}

080030dc <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h46850ee969b9900d>:
 80030dc:      	push	{r7, lr}
 80030de:      	mov	r7, sp
 80030e0:      	sub	sp, #0x20
 80030e2:      	mov	r12, r3
 80030e4:      	mov	r3, r2
 80030e6:      	mov	r2, r1
 80030e8:      	str	r0, [sp, #0x14]
 80030ea:      	str	r2, [sp, #0x18]
 80030ec:      	str	r3, [sp, #0x1c]
 80030ee:      	movs	r1, #0x0
 80030f0:      	str	r1, [sp, #0xc]
 80030f2:      	str	r0, [sp, #0x10]
 80030f4:      	ldr	r0, [sp, #0xc]
 80030f6:      	ldr	r1, [sp, #0x10]
 80030f8:      	mov	lr, sp
 80030fa:      	str.w	r12, [lr]
 80030fe:      	bl	0x800307c <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::hddaff01c715c7c69> @ imm = #-0x86
 8003102:      	str	r0, [sp, #0x4]
 8003104:      	str	r1, [sp, #0x8]
 8003106:      	b	0x8003108 <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h46850ee969b9900d+0x2c> @ imm = #-0x2
 8003108:      	ldr	r1, [sp, #0x8]
 800310a:      	ldr	r0, [sp, #0x4]
 800310c:      	add	sp, #0x20
 800310e:      	pop	{r7, pc}

08003110 <<core::ops::range::RangeFull as core::slice::index::SliceIndex<[T]>>::index_mut::h22bda2afce8ff370>:
 8003110:      	sub	sp, #0xc
 8003112:      	str	r0, [sp, #0x4]
 8003114:      	str	r1, [sp, #0x8]
 8003116:      	add	sp, #0xc
 8003118:      	bx	lr

0800311a <core::ptr::slice_from_raw_parts_mut::h5f802e0c4ea593cf>:
 800311a:      	push	{r7, lr}
 800311c:      	mov	r7, sp
 800311e:      	sub	sp, #0x20
 8003120:      	str	r1, [sp, #0xc]
 8003122:      	str	r0, [sp, #0x14]
 8003124:      	str	r1, [sp, #0x18]
 8003126:      	str	r0, [sp, #0x1c]
 8003128:      	str	r0, [sp, #0x10]
 800312a:      	b	0x800312c <core::ptr::slice_from_raw_parts_mut::h5f802e0c4ea593cf+0x12> @ imm = #-0x2
 800312c:      	ldr	r1, [sp, #0xc]
 800312e:      	ldr	r0, [sp, #0x10]
 8003130:      	bl	0x8003142 <core::ptr::metadata::from_raw_parts_mut::h0bc6ebba1d19853f> @ imm = #0xe
 8003134:      	str	r0, [sp, #0x4]
 8003136:      	str	r1, [sp, #0x8]
 8003138:      	b	0x800313a <core::ptr::slice_from_raw_parts_mut::h5f802e0c4ea593cf+0x20> @ imm = #-0x2
 800313a:      	ldr	r1, [sp, #0x8]
 800313c:      	ldr	r0, [sp, #0x4]
 800313e:      	add	sp, #0x20
 8003140:      	pop	{r7, pc}

08003142 <core::ptr::metadata::from_raw_parts_mut::h0bc6ebba1d19853f>:
 8003142:      	sub	sp, #0x18
 8003144:      	str	r0, [sp, #0x10]
 8003146:      	str	r1, [sp, #0x14]
 8003148:      	str	r0, [sp, #0x8]
 800314a:      	str	r1, [sp, #0xc]
 800314c:      	ldr	r1, [sp, #0x8]
 800314e:      	ldr	r0, [sp, #0xc]
 8003150:      	str	r1, [sp]
 8003152:      	str	r0, [sp, #0x4]
 8003154:      	ldr	r0, [sp]
 8003156:      	ldr	r1, [sp, #0x4]
 8003158:      	add	sp, #0x18
 800315a:      	bx	lr

0800315c <core::str::converts::from_utf8_unchecked_mut::hd1273a7566c231f6>:
 800315c:      	sub	sp, #0x8
 800315e:      	str	r0, [sp]
 8003160:      	str	r1, [sp, #0x4]
 8003162:      	add	sp, #0x8
 8003164:      	bx	lr

08003166 <cortex_m::itm::write_words::h7664515e8821ccd2>:
; unsafe fn write_words(stim: &mut Stim, bytes: &[u32]) {
 8003166:      	push	{r7, lr}
 8003168:      	mov	r7, sp
 800316a:      	sub	sp, #0x58
 800316c:      	str	r2, [sp, #0x18]
 800316e:      	mov	r2, r1
 8003170:      	ldr	r1, [sp, #0x18]
 8003172:      	str	r2, [sp, #0x1c]
 8003174:      	mov	r2, r0
 8003176:      	ldr	r0, [sp, #0x1c]
 8003178:      	str	r2, [sp, #0x20]
 800317a:      	str	r2, [sp, #0x40]
 800317c:      	str	r0, [sp, #0x44]
 800317e:      	str	r1, [sp, #0x48]
;     let mut p = bytes.as_ptr();
 8003180:      	bl	0x8003496 <core::slice::<impl [T]>::as_ptr::h6f927cf8952ea367> @ imm = #0x312
 8003184:      	str	r0, [sp, #0x24]
 8003186:      	b	0x8003188 <cortex_m::itm::write_words::h7664515e8821ccd2+0x22> @ imm = #-0x2
 8003188:      	ldr	r0, [sp, #0x18]
 800318a:      	movs	r1, #0x0
;     for _ in 0..bytes.len() {
 800318c:      	str	r1, [sp, #0x28]
 800318e:      	str	r0, [sp, #0x2c]
 8003190:      	ldr	r0, [sp, #0x28]
 8003192:      	ldr	r1, [sp, #0x2c]
 8003194:      	bl	0x80034ba <<I as core::iter::traits::collect::IntoIterator>::into_iter::h04a089a7b2fb480e> @ imm = #0x322
 8003198:      	str	r0, [sp, #0x10]
 800319a:      	str	r1, [sp, #0x14]
 800319c:      	b	0x800319e <cortex_m::itm::write_words::h7664515e8821ccd2+0x38> @ imm = #-0x2
 800319e:      	ldr	r0, [sp, #0x14]
 80031a0:      	ldr	r1, [sp, #0x10]
 80031a2:      	str	r1, [sp, #0x30]
 80031a4:      	str	r0, [sp, #0x34]
 80031a6:      	b	0x80031a8 <cortex_m::itm::write_words::h7664515e8821ccd2+0x42> @ imm = #-0x2
 80031a8:      	add	r0, sp, #0x30
;     for _ in 0..bytes.len() {
 80031aa:      	bl	0x80034a0 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h0129e80551e25e41> @ imm = #0x2f2
 80031ae:      	str	r1, [sp, #0x3c]
 80031b0:      	str	r0, [sp, #0x38]
 80031b2:      	b	0x80031b4 <cortex_m::itm::write_words::h7664515e8821ccd2+0x4e> @ imm = #-0x2
 80031b4:      	ldr	r0, [sp, #0x38]
 80031b6:      	cbz	r0, 0x80031be <cortex_m::itm::write_words::h7664515e8821ccd2+0x58> @ imm = #0x4
 80031b8:      	b	0x80031ba <cortex_m::itm::write_words::h7664515e8821ccd2+0x54> @ imm = #-0x2
 80031ba:      	b	0x80031c2 <cortex_m::itm::write_words::h7664515e8821ccd2+0x5c> @ imm = #0x4
 80031bc:      	trap
; }
 80031be:      	add	sp, #0x58
 80031c0:      	pop	{r7, pc}
;         while !stim.is_fifo_ready() {}
 80031c2:      	ldr	r0, [sp, #0x20]
 80031c4:      	bl	0x80035b0 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h47baea9774d7a09f> @ imm = #0x3e8
 80031c8:      	str	r0, [sp, #0xc]
 80031ca:      	b	0x80031cc <cortex_m::itm::write_words::h7664515e8821ccd2+0x66> @ imm = #-0x2
 80031cc:      	ldr	r0, [sp, #0xc]
 80031ce:      	lsls	r0, r0, #0x1f
 80031d0:      	cmp	r0, #0x0
 80031d2:      	beq	0x80031c2 <cortex_m::itm::write_words::h7664515e8821ccd2+0x5c> @ imm = #-0x14
 80031d4:      	b	0x80031d6 <cortex_m::itm::write_words::h7664515e8821ccd2+0x70> @ imm = #-0x2
;         stim.write_u32(ptr::read(p));
 80031d6:      	ldr	r0, [sp, #0x24]
 80031d8:      	bl	0x8001872 <core::ptr::read::hd00696b5c2f0fc83> @ imm = #-0x196a
 80031dc:      	str	r0, [sp, #0x8]
 80031de:      	b	0x80031e0 <cortex_m::itm::write_words::h7664515e8821ccd2+0x7a> @ imm = #-0x2
 80031e0:      	ldr	r1, [sp, #0x8]
 80031e2:      	ldr	r0, [sp, #0x20]
 80031e4:      	bl	0x8003590 <cortex_m::peripheral::itm::Stim::write_u32::hef30b162e21c42d4> @ imm = #0x3a8
 80031e8:      	b	0x80031ea <cortex_m::itm::write_words::h7664515e8821ccd2+0x84> @ imm = #-0x2
;         p = p.offset(1);
 80031ea:      	ldr	r0, [sp, #0x24]
 80031ec:      	str	r0, [sp, #0x4c]
 80031ee:      	movs	r1, #0x1
 80031f0:      	str	r1, [sp, #0x50]
 80031f2:      	adds	r0, #0x4
 80031f4:      	str	r0, [sp, #0x54]
 80031f6:      	ldr	r0, [sp, #0x54]
;         p = p.offset(1);
 80031f8:      	str	r0, [sp, #0x4]
 80031fa:      	b	0x80031fc <cortex_m::itm::write_words::h7664515e8821ccd2+0x96> @ imm = #-0x2
 80031fc:      	ldr	r0, [sp, #0x4]
 80031fe:      	str	r0, [sp, #0x24]
;     for _ in 0..bytes.len() {
 8003200:      	b	0x80031a8 <cortex_m::itm::write_words::h7664515e8821ccd2+0x42> @ imm = #-0x5c

08003202 <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2>:
; unsafe fn write_aligned_impl(port: &mut Stim, buffer: &[u8]) {
 8003202:      	push	{r7, lr}
 8003204:      	mov	r7, sp
 8003206:      	sub	sp, #0x78
 8003208:      	str	r2, [sp, #0x30]
 800320a:      	str	r1, [sp, #0x34]
 800320c:      	str	r0, [sp, #0x38]
 800320e:      	str	r0, [sp, #0x44]
 8003210:      	str	r1, [sp, #0x48]
 8003212:      	str	r2, [sp, #0x4c]
;     let len = buffer.len();
 8003214:      	str	r2, [sp, #0x50]
;     if len == 0 {
 8003216:      	cbnz	r2, 0x800321e <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x1c> @ imm = #0x4
 8003218:      	b	0x800321a <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x18> @ imm = #-0x2
; }
 800321a:      	add	sp, #0x78
 800321c:      	pop	{r7, pc}
;     let split = len & !0b11;
 800321e:      	ldr	r1, [sp, #0x30]
 8003220:      	ldr	r0, [sp, #0x34]
 8003222:      	bic	r2, r1, #0x3
 8003226:      	mov	r3, r2
 8003228:      	str	r3, [sp, #0x28]
 800322a:      	str	r2, [sp, #0x54]
;         slice::from_raw_parts(buffer.as_ptr() as *const u32, split >> 2),
 800322c:      	bl	0x80035d2 <core::slice::<impl [T]>::as_ptr::hd9e2c870465e7095> @ imm = #0x3a2
 8003230:      	str	r0, [sp, #0x2c]
 8003232:      	b	0x8003234 <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x32> @ imm = #-0x2
 8003234:      	ldr	r0, [sp, #0x28]
 8003236:      	ldr	r1, [sp, #0x2c]
 8003238:      	str	r1, [sp, #0x20]
 800323a:      	lsrs	r0, r0, #0x2
 800323c:      	str	r0, [sp, #0x24]
 800323e:      	b	0x8003240 <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x3e> @ imm = #-0x2
 8003240:      	ldr	r1, [sp, #0x24]
 8003242:      	ldr	r0, [sp, #0x20]
 8003244:      	bl	0x80035f8 <core::slice::raw::from_raw_parts::he81d4d0297b559b0> @ imm = #0x3b0
 8003248:      	str	r0, [sp, #0x18]
 800324a:      	str	r1, [sp, #0x1c]
 800324c:      	b	0x800324e <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x4c> @ imm = #-0x2
;     write_words(
 800324e:      	ldr	r2, [sp, #0x1c]
 8003250:      	ldr	r1, [sp, #0x18]
 8003252:      	ldr	r0, [sp, #0x38]
 8003254:      	bl	0x8003166 <cortex_m::itm::write_words::h7664515e8821ccd2> @ imm = #-0xf2
 8003258:      	b	0x800325a <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x58> @ imm = #-0x2
;     let mut left = len & 0b11;
 800325a:      	ldr	r1, [sp, #0x30]
 800325c:      	ldr	r0, [sp, #0x34]
 800325e:      	and	r2, r1, #0x3
 8003262:      	str	r2, [sp, #0x3c]
;     let mut ptr = buffer.as_ptr().add(split);
 8003264:      	bl	0x80035d2 <core::slice::<impl [T]>::as_ptr::hd9e2c870465e7095> @ imm = #0x36a
 8003268:      	str	r0, [sp, #0x14]
 800326a:      	b	0x800326c <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x6a> @ imm = #-0x2
 800326c:      	ldr	r0, [sp, #0x14]
 800326e:      	ldr	r1, [sp, #0x28]
 8003270:      	str	r0, [sp, #0x58]
 8003272:      	str	r1, [sp, #0x5c]
 8003274:      	str	r0, [sp, #0x60]
 8003276:      	str	r1, [sp, #0x64]
 8003278:      	add	r0, r1
 800327a:      	str	r0, [sp, #0x68]
 800327c:      	ldr	r0, [sp, #0x68]
;     let mut ptr = buffer.as_ptr().add(split);
 800327e:      	str	r0, [sp, #0x40]
 8003280:      	b	0x8003282 <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x80> @ imm = #-0x2
;     if left > 1 {
 8003282:      	ldr	r0, [sp, #0x3c]
 8003284:      	cmp	r0, #0x1
 8003286:      	bhi	0x8003292 <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x90> @ imm = #0x8
 8003288:      	b	0x800328a <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x88> @ imm = #-0x2
;     if left == 1 {
 800328a:      	ldr	r0, [sp, #0x3c]
 800328c:      	cmp	r0, #0x1
 800328e:      	beq	0x80032fa <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0xf8> @ imm = #0x68
 8003290:      	b	0x800321a <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x18> @ imm = #-0x7a
;         while !port.is_fifo_ready() {}
 8003292:      	ldr	r0, [sp, #0x38]
 8003294:      	bl	0x80035b0 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h47baea9774d7a09f> @ imm = #0x318
 8003298:      	str	r0, [sp, #0x10]
 800329a:      	b	0x800329c <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x9a> @ imm = #-0x2
 800329c:      	ldr	r0, [sp, #0x10]
 800329e:      	lsls	r0, r0, #0x1f
 80032a0:      	cmp	r0, #0x0
 80032a2:      	beq	0x8003292 <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x90> @ imm = #-0x14
 80032a4:      	b	0x80032a6 <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0xa4> @ imm = #-0x2
;         port.write_u16(ptr::read(ptr as *const u16));
 80032a6:      	ldr	r0, [sp, #0x40]
 80032a8:      	bl	0x800189a <core::ptr::read::hd82ba8f9205cc74b> @ imm = #-0x1a12
 80032ac:      	str	r0, [sp, #0xc]
 80032ae:      	b	0x80032b0 <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0xae> @ imm = #-0x2
 80032b0:      	ldr	r1, [sp, #0xc]
 80032b2:      	ldr	r0, [sp, #0x38]
 80032b4:      	bl	0x800356c <cortex_m::peripheral::itm::Stim::write_u16::hdc9bf6f26eabadf0> @ imm = #0x2b4
 80032b8:      	b	0x80032ba <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0xb8> @ imm = #-0x2
;         ptr = ptr.offset(2);
 80032ba:      	ldr	r0, [sp, #0x40]
 80032bc:      	str	r0, [sp, #0x6c]
 80032be:      	movs	r1, #0x2
 80032c0:      	str	r1, [sp, #0x70]
 80032c2:      	adds	r0, #0x2
 80032c4:      	str	r0, [sp, #0x74]
 80032c6:      	ldr	r0, [sp, #0x74]
;         ptr = ptr.offset(2);
 80032c8:      	str	r0, [sp, #0x8]
 80032ca:      	b	0x80032cc <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0xca> @ imm = #-0x2
 80032cc:      	ldr	r0, [sp, #0x8]
 80032ce:      	str	r0, [sp, #0x40]
;         left -= 2;
 80032d0:      	ldr	r0, [sp, #0x3c]
 80032d2:      	subs	r1, r0, #0x2
 80032d4:      	str	r1, [sp, #0x4]
 80032d6:      	cmp	r0, #0x2
 80032d8:      	blo	0x80032e2 <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0xe0> @ imm = #0x6
 80032da:      	b	0x80032dc <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0xda> @ imm = #-0x2
 80032dc:      	ldr	r0, [sp, #0x4]
 80032de:      	str	r0, [sp, #0x3c]
;     if left > 1 {
 80032e0:      	b	0x800328a <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x88> @ imm = #-0x5a
;         left -= 2;
 80032e2:      	movw	r0, #0x3e40
 80032e6:      	movt	r0, #0x800
 80032ea:      	movw	r2, #0x3e28
 80032ee:      	movt	r2, #0x800
 80032f2:      	movs	r1, #0x21
 80032f4:      	bl	0x8001a9c <core::panicking::panic::h3d259cefe3983ab7> @ imm = #-0x185c
 80032f8:      	trap
;         while !port.is_fifo_ready() {}
 80032fa:      	ldr	r0, [sp, #0x38]
 80032fc:      	bl	0x80035b0 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h47baea9774d7a09f> @ imm = #0x2b0
 8003300:      	str	r0, [sp]
 8003302:      	b	0x8003304 <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x102> @ imm = #-0x2
 8003304:      	ldr	r0, [sp]
 8003306:      	lsls	r0, r0, #0x1f
 8003308:      	cmp	r0, #0x0
 800330a:      	beq	0x80032fa <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0xf8> @ imm = #-0x14
 800330c:      	b	0x800330e <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x10c> @ imm = #-0x2
;         port.write_u8(*ptr);
 800330e:      	ldr	r0, [sp, #0x38]
 8003310:      	ldr	r1, [sp, #0x40]
 8003312:      	ldrb	r1, [r1]
 8003314:      	bl	0x8003548 <cortex_m::peripheral::itm::Stim::write_u8::ha305cee9a26dba8a> @ imm = #0x230
 8003318:      	b	0x800321a <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2+0x18> @ imm = #-0x102

0800331a <cortex_m::itm::write_all::h0c018ccbed20b859>:
; pub fn write_all(port: &mut Stim, buffer: &[u8]) {
 800331a:      	push	{r7, lr}
 800331c:      	mov	r7, sp
 800331e:      	sub	sp, #0x60
 8003320:      	str	r2, [sp, #0x28]
 8003322:      	mov	r2, r1
 8003324:      	ldr	r1, [sp, #0x28]
 8003326:      	str	r2, [sp, #0x2c]
 8003328:      	mov	r2, r0
 800332a:      	ldr	r0, [sp, #0x2c]
 800332c:      	str	r2, [sp, #0x30]
 800332e:      	str	r2, [sp, #0x3c]
 8003330:      	str	r0, [sp, #0x40]
 8003332:      	str	r1, [sp, #0x44]
;         let mut len = buffer.len();
 8003334:      	str	r1, [sp, #0x34]
;         let mut ptr = buffer.as_ptr();
 8003336:      	bl	0x80035d2 <core::slice::<impl [T]>::as_ptr::hd9e2c870465e7095> @ imm = #0x298
 800333a:      	str	r0, [sp, #0x38]
 800333c:      	b	0x800333e <cortex_m::itm::write_all::h0c018ccbed20b859+0x24> @ imm = #-0x2
;         if len == 0 {
 800333e:      	ldr	r0, [sp, #0x34]
 8003340:      	cbnz	r0, 0x8003348 <cortex_m::itm::write_all::h0c018ccbed20b859+0x2e> @ imm = #0x4
 8003342:      	b	0x8003344 <cortex_m::itm::write_all::h0c018ccbed20b859+0x2a> @ imm = #-0x2
; }
 8003344:      	add	sp, #0x60
 8003346:      	pop	{r7, pc}
;         if ptr as usize % 2 == 1 {
 8003348:      	ldrb.w	r0, [sp, #0x38]
 800334c:      	lsls	r0, r0, #0x1f
 800334e:      	cbz	r0, 0x800335c <cortex_m::itm::write_all::h0c018ccbed20b859+0x42> @ imm = #0xa
 8003350:      	b	0x8003352 <cortex_m::itm::write_all::h0c018ccbed20b859+0x38> @ imm = #-0x2
;             while !port.is_fifo_ready() {}
 8003352:      	ldr	r0, [sp, #0x30]
 8003354:      	bl	0x80035b0 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h47baea9774d7a09f> @ imm = #0x258
 8003358:      	str	r0, [sp, #0x24]
 800335a:      	b	0x8003368 <cortex_m::itm::write_all::h0c018ccbed20b859+0x4e> @ imm = #0xa
;         if ptr as usize % 4 == 2 {
 800335c:      	ldr	r0, [sp, #0x38]
 800335e:      	and	r0, r0, #0x3
 8003362:      	cmp	r0, #0x2
 8003364:      	beq	0x80033be <cortex_m::itm::write_all::h0c018ccbed20b859+0xa4> @ imm = #0x56
 8003366:      	b	0x80033c6 <cortex_m::itm::write_all::h0c018ccbed20b859+0xac> @ imm = #0x5c
;             while !port.is_fifo_ready() {}
 8003368:      	ldr	r0, [sp, #0x24]
 800336a:      	lsls	r0, r0, #0x1f
 800336c:      	cmp	r0, #0x0
 800336e:      	beq	0x8003352 <cortex_m::itm::write_all::h0c018ccbed20b859+0x38> @ imm = #-0x20
 8003370:      	b	0x8003372 <cortex_m::itm::write_all::h0c018ccbed20b859+0x58> @ imm = #-0x2
;             port.write_u8(*ptr);
 8003372:      	ldr	r0, [sp, #0x30]
 8003374:      	ldr	r1, [sp, #0x38]
 8003376:      	ldrb	r1, [r1]
 8003378:      	bl	0x8003548 <cortex_m::peripheral::itm::Stim::write_u8::ha305cee9a26dba8a> @ imm = #0x1cc
 800337c:      	b	0x800337e <cortex_m::itm::write_all::h0c018ccbed20b859+0x64> @ imm = #-0x2
;             ptr = ptr.offset(1);
 800337e:      	ldr	r0, [sp, #0x38]
 8003380:      	str	r0, [sp, #0x54]
 8003382:      	movs	r1, #0x1
 8003384:      	str	r1, [sp, #0x58]
 8003386:      	adds	r0, #0x1
 8003388:      	str	r0, [sp, #0x5c]
 800338a:      	ldr	r0, [sp, #0x5c]
;             ptr = ptr.offset(1);
 800338c:      	str	r0, [sp, #0x20]
 800338e:      	b	0x8003390 <cortex_m::itm::write_all::h0c018ccbed20b859+0x76> @ imm = #-0x2
 8003390:      	ldr	r0, [sp, #0x20]
 8003392:      	str	r0, [sp, #0x38]
;             len -= 1;
 8003394:      	ldr	r0, [sp, #0x34]
 8003396:      	subs	r1, r0, #0x1
 8003398:      	str	r1, [sp, #0x1c]
 800339a:      	cmp	r0, #0x1
 800339c:      	blo	0x80033a6 <cortex_m::itm::write_all::h0c018ccbed20b859+0x8c> @ imm = #0x6
 800339e:      	b	0x80033a0 <cortex_m::itm::write_all::h0c018ccbed20b859+0x86> @ imm = #-0x2
 80033a0:      	ldr	r0, [sp, #0x1c]
 80033a2:      	str	r0, [sp, #0x34]
;         if ptr as usize % 2 == 1 {
 80033a4:      	b	0x800335c <cortex_m::itm::write_all::h0c018ccbed20b859+0x42> @ imm = #-0x4c
;             len -= 1;
 80033a6:      	movw	r0, #0x3e40
 80033aa:      	movt	r0, #0x800
 80033ae:      	movw	r2, #0x3e64
 80033b2:      	movt	r2, #0x800
 80033b6:      	movs	r1, #0x21
 80033b8:      	bl	0x8001a9c <core::panicking::panic::h3d259cefe3983ab7> @ imm = #-0x1920
 80033bc:      	trap
;             if len > 1 {
 80033be:      	ldr	r0, [sp, #0x34]
 80033c0:      	cmp	r0, #0x1
 80033c2:      	bhi	0x80033dc <cortex_m::itm::write_all::h0c018ccbed20b859+0xc2> @ imm = #0x16
 80033c4:      	b	0x80033d4 <cortex_m::itm::write_all::h0c018ccbed20b859+0xba> @ imm = #0xc
;         write_aligned_impl(port, slice::from_raw_parts(ptr, len));
 80033c6:      	ldr	r0, [sp, #0x38]
 80033c8:      	ldr	r1, [sp, #0x34]
 80033ca:      	bl	0x80035dc <core::slice::raw::from_raw_parts::h4c86d2c47c5533cc> @ imm = #0x20e
 80033ce:      	str	r0, [sp, #0x14]
 80033d0:      	str	r1, [sp, #0x18]
 80033d2:      	b	0x8003444 <cortex_m::itm::write_all::h0c018ccbed20b859+0x12a> @ imm = #0x6e
;                 if len == 1 {
 80033d4:      	ldr	r0, [sp, #0x34]
 80033d6:      	cmp	r0, #0x1
 80033d8:      	beq	0x8003450 <cortex_m::itm::write_all::h0c018ccbed20b859+0x136> @ imm = #0x74
 80033da:      	b	0x8003344 <cortex_m::itm::write_all::h0c018ccbed20b859+0x2a> @ imm = #-0x9a
;                 while !port.is_fifo_ready() {}
 80033dc:      	ldr	r0, [sp, #0x30]
 80033de:      	bl	0x80035b0 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h47baea9774d7a09f> @ imm = #0x1ce
 80033e2:      	str	r0, [sp, #0x10]
 80033e4:      	b	0x80033e6 <cortex_m::itm::write_all::h0c018ccbed20b859+0xcc> @ imm = #-0x2
 80033e6:      	ldr	r0, [sp, #0x10]
 80033e8:      	lsls	r0, r0, #0x1f
 80033ea:      	cmp	r0, #0x0
 80033ec:      	beq	0x80033dc <cortex_m::itm::write_all::h0c018ccbed20b859+0xc2> @ imm = #-0x14
 80033ee:      	b	0x80033f0 <cortex_m::itm::write_all::h0c018ccbed20b859+0xd6> @ imm = #-0x2
;                 port.write_u16(ptr::read(ptr as *const u16));
 80033f0:      	ldr	r0, [sp, #0x38]
 80033f2:      	bl	0x800189a <core::ptr::read::hd82ba8f9205cc74b> @ imm = #-0x1b5c
 80033f6:      	str	r0, [sp, #0xc]
 80033f8:      	b	0x80033fa <cortex_m::itm::write_all::h0c018ccbed20b859+0xe0> @ imm = #-0x2
 80033fa:      	ldr	r1, [sp, #0xc]
 80033fc:      	ldr	r0, [sp, #0x30]
 80033fe:      	bl	0x800356c <cortex_m::peripheral::itm::Stim::write_u16::hdc9bf6f26eabadf0> @ imm = #0x16a
 8003402:      	b	0x8003404 <cortex_m::itm::write_all::h0c018ccbed20b859+0xea> @ imm = #-0x2
;                 ptr = ptr.offset(2);
 8003404:      	ldr	r0, [sp, #0x38]
 8003406:      	str	r0, [sp, #0x48]
 8003408:      	movs	r1, #0x2
 800340a:      	str	r1, [sp, #0x4c]
 800340c:      	adds	r0, #0x2
 800340e:      	str	r0, [sp, #0x50]
 8003410:      	ldr	r0, [sp, #0x50]
;                 ptr = ptr.offset(2);
 8003412:      	str	r0, [sp, #0x8]
 8003414:      	b	0x8003416 <cortex_m::itm::write_all::h0c018ccbed20b859+0xfc> @ imm = #-0x2
 8003416:      	ldr	r0, [sp, #0x8]
 8003418:      	str	r0, [sp, #0x38]
;                 len -= 2;
 800341a:      	ldr	r0, [sp, #0x34]
 800341c:      	subs	r1, r0, #0x2
 800341e:      	str	r1, [sp, #0x4]
 8003420:      	cmp	r0, #0x2
 8003422:      	blo	0x800342c <cortex_m::itm::write_all::h0c018ccbed20b859+0x112> @ imm = #0x6
 8003424:      	b	0x8003426 <cortex_m::itm::write_all::h0c018ccbed20b859+0x10c> @ imm = #-0x2
 8003426:      	ldr	r0, [sp, #0x4]
 8003428:      	str	r0, [sp, #0x34]
;         if ptr as usize % 4 == 2 {
 800342a:      	b	0x80033c6 <cortex_m::itm::write_all::h0c018ccbed20b859+0xac> @ imm = #-0x68
;                 len -= 2;
 800342c:      	movw	r0, #0x3e40
 8003430:      	movt	r0, #0x800
 8003434:      	movw	r2, #0x3e74
 8003438:      	movt	r2, #0x800
 800343c:      	movs	r1, #0x21
 800343e:      	bl	0x8001a9c <core::panicking::panic::h3d259cefe3983ab7> @ imm = #-0x19a6
 8003442:      	trap
;         write_aligned_impl(port, slice::from_raw_parts(ptr, len));
 8003444:      	ldr	r2, [sp, #0x18]
 8003446:      	ldr	r1, [sp, #0x14]
 8003448:      	ldr	r0, [sp, #0x30]
 800344a:      	bl	0x8003202 <cortex_m::itm::write_aligned_impl::h0d12d6fc1add5ce2> @ imm = #-0x24c
 800344e:      	b	0x8003344 <cortex_m::itm::write_all::h0c018ccbed20b859+0x2a> @ imm = #-0x10e
;                     while !port.is_fifo_ready() {}
 8003450:      	ldr	r0, [sp, #0x30]
 8003452:      	bl	0x80035b0 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h47baea9774d7a09f> @ imm = #0x15a
 8003456:      	str	r0, [sp]
 8003458:      	b	0x800345a <cortex_m::itm::write_all::h0c018ccbed20b859+0x140> @ imm = #-0x2
 800345a:      	ldr	r0, [sp]
 800345c:      	lsls	r0, r0, #0x1f
 800345e:      	cmp	r0, #0x0
 8003460:      	beq	0x8003450 <cortex_m::itm::write_all::h0c018ccbed20b859+0x136> @ imm = #-0x14
 8003462:      	b	0x8003464 <cortex_m::itm::write_all::h0c018ccbed20b859+0x14a> @ imm = #-0x2
;                     port.write_u8(*ptr);
 8003464:      	ldr	r0, [sp, #0x30]
 8003466:      	ldr	r1, [sp, #0x38]
 8003468:      	ldrb	r1, [r1]
 800346a:      	bl	0x8003548 <cortex_m::peripheral::itm::Stim::write_u8::ha305cee9a26dba8a> @ imm = #0xda
 800346e:      	b	0x8003344 <cortex_m::itm::write_all::h0c018ccbed20b859+0x2a> @ imm = #-0x12e

08003470 <core::cmp::impls::<impl core::cmp::PartialOrd for usize>::lt::h85ec4e97c9521972>:
 8003470:      	sub	sp, #0xc
 8003472:      	str	r1, [sp]
 8003474:      	mov	r1, r0
 8003476:      	ldr	r0, [sp]
 8003478:      	str	r1, [sp, #0x4]
 800347a:      	str	r0, [sp, #0x8]
 800347c:      	ldr	r1, [r1]
 800347e:      	ldr	r2, [r0]
 8003480:      	movs	r0, #0x0
 8003482:      	cmp	r1, r2
 8003484:      	it	lo
 8003486:      	movlo	r0, #0x1
 8003488:      	add	sp, #0xc
 800348a:      	bx	lr

0800348c <core::clone::impls::<impl core::clone::Clone for usize>::clone::haca0471879331d4f>:
 800348c:      	sub	sp, #0x4
 800348e:      	str	r0, [sp]
 8003490:      	ldr	r0, [r0]
 8003492:      	add	sp, #0x4
 8003494:      	bx	lr

08003496 <core::slice::<impl [T]>::as_ptr::h6f927cf8952ea367>:
 8003496:      	sub	sp, #0x8
 8003498:      	str	r0, [sp]
 800349a:      	str	r1, [sp, #0x4]
 800349c:      	add	sp, #0x8
 800349e:      	bx	lr

080034a0 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h0129e80551e25e41>:
 80034a0:      	push	{r7, lr}
 80034a2:      	mov	r7, sp
 80034a4:      	sub	sp, #0x10
 80034a6:      	str	r0, [sp, #0xc]
 80034a8:      	bl	0x80034c4 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::ha0ea85c79faf81e6> @ imm = #0x18
 80034ac:      	str	r0, [sp, #0x4]
 80034ae:      	str	r1, [sp, #0x8]
 80034b0:      	b	0x80034b2 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::h0129e80551e25e41+0x12> @ imm = #-0x2
 80034b2:      	ldr	r1, [sp, #0x8]
 80034b4:      	ldr	r0, [sp, #0x4]
 80034b6:      	add	sp, #0x10
 80034b8:      	pop	{r7, pc}

080034ba <<I as core::iter::traits::collect::IntoIterator>::into_iter::h04a089a7b2fb480e>:
 80034ba:      	sub	sp, #0x8
 80034bc:      	str	r0, [sp]
 80034be:      	str	r1, [sp, #0x4]
 80034c0:      	add	sp, #0x8
 80034c2:      	bx	lr

080034c4 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::ha0ea85c79faf81e6>:
 80034c4:      	push	{r7, lr}
 80034c6:      	mov	r7, sp
 80034c8:      	sub	sp, #0x28
 80034ca:      	str	r0, [sp, #0x10]
 80034cc:      	str	r0, [sp, #0x20]
 80034ce:      	adds	r1, r0, #0x4
 80034d0:      	bl	0x8003470 <core::cmp::impls::<impl core::cmp::PartialOrd for usize>::lt::h85ec4e97c9521972> @ imm = #-0x64
 80034d4:      	str	r0, [sp, #0x14]
 80034d6:      	b	0x80034d8 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::ha0ea85c79faf81e6+0x14> @ imm = #-0x2
 80034d8:      	ldr	r0, [sp, #0x14]
 80034da:      	lsls	r0, r0, #0x1f
 80034dc:      	cbnz	r0, 0x80034e6 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::ha0ea85c79faf81e6+0x22> @ imm = #0x6
 80034de:      	b	0x80034e0 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::ha0ea85c79faf81e6+0x1c> @ imm = #-0x2
 80034e0:      	movs	r0, #0x0
 80034e2:      	str	r0, [sp, #0x18]
 80034e4:      	b	0x8003516 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::ha0ea85c79faf81e6+0x52> @ imm = #0x2e
 80034e6:      	ldr	r0, [sp, #0x10]
 80034e8:      	bl	0x800348c <core::clone::impls::<impl core::clone::Clone for usize>::clone::haca0471879331d4f> @ imm = #-0x60
 80034ec:      	str	r0, [sp, #0xc]
 80034ee:      	b	0x80034f0 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::ha0ea85c79faf81e6+0x2c> @ imm = #-0x2
 80034f0:      	ldr	r0, [sp, #0xc]
 80034f2:      	movs	r1, #0x1
 80034f4:      	bl	0x80018f6 <<usize as core::iter::range::Step>::forward_unchecked::he179377cf6e10896> @ imm = #-0x1c02
 80034f8:      	mov	r1, r0
 80034fa:      	str	r1, [sp, #0x8]
 80034fc:      	str	r0, [sp, #0x24]
 80034fe:      	b	0x8003500 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::ha0ea85c79faf81e6+0x3c> @ imm = #-0x2
 8003500:      	ldr	r1, [sp, #0x8]
 8003502:      	ldr	r0, [sp, #0x10]
 8003504:      	bl	0x800351e <core::mem::replace::h6bad5a1a66268477> @ imm = #0x16
 8003508:      	str	r0, [sp, #0x4]
 800350a:      	b	0x800350c <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::ha0ea85c79faf81e6+0x48> @ imm = #-0x2
 800350c:      	ldr	r0, [sp, #0x4]
 800350e:      	str	r0, [sp, #0x1c]
 8003510:      	movs	r0, #0x1
 8003512:      	str	r0, [sp, #0x18]
 8003514:      	b	0x8003516 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::ha0ea85c79faf81e6+0x52> @ imm = #-0x2
 8003516:      	ldr	r0, [sp, #0x18]
 8003518:      	ldr	r1, [sp, #0x1c]
 800351a:      	add	sp, #0x28
 800351c:      	pop	{r7, pc}

0800351e <core::mem::replace::h6bad5a1a66268477>:
 800351e:      	push	{r7, lr}
 8003520:      	mov	r7, sp
 8003522:      	sub	sp, #0x18
 8003524:      	str	r1, [sp]
 8003526:      	str	r0, [sp, #0x4]
 8003528:      	str	r0, [sp, #0xc]
 800352a:      	str	r1, [sp, #0x10]
 800352c:      	bl	0x800184a <core::ptr::read::ha01afccd5ea504ef> @ imm = #-0x1ce6
 8003530:      	mov	r1, r0
 8003532:      	str	r1, [sp, #0x8]
 8003534:      	str	r0, [sp, #0x14]
 8003536:      	b	0x8003538 <core::mem::replace::h6bad5a1a66268477+0x1a> @ imm = #-0x2
 8003538:      	ldr	r1, [sp]
 800353a:      	ldr	r0, [sp, #0x4]
 800353c:      	bl	0x80018d2 <core::ptr::write::hbed7a82ba2c921e1> @ imm = #-0x1c6e
 8003540:      	b	0x8003542 <core::mem::replace::h6bad5a1a66268477+0x24> @ imm = #-0x2
 8003542:      	ldr	r0, [sp, #0x8]
 8003544:      	add	sp, #0x18
 8003546:      	pop	{r7, pc}

08003548 <cortex_m::peripheral::itm::Stim::write_u8::ha305cee9a26dba8a>:
;     pub fn write_u8(&mut self, value: u8) {
 8003548:      	push	{r7, lr}
 800354a:      	mov	r7, sp
 800354c:      	sub	sp, #0x18
 800354e:      	str	r0, [sp, #0x4]
 8003550:      	mov	r2, r1
 8003552:      	str	r2, [sp, #0x8]
 8003554:      	str	r0, [sp, #0xc]
 8003556:      	strb	r1, [r7, #-5]
 800355a:      	str	r0, [sp, #0x14]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u8, value) }
 800355c:      	b	0x800355e <cortex_m::peripheral::itm::Stim::write_u8::ha305cee9a26dba8a+0x16> @ imm = #-0x2
 800355e:      	ldr	r1, [sp, #0x8]
 8003560:      	ldr	r0, [sp, #0x4]
 8003562:      	bl	0x80017e6 <core::ptr::write_volatile::h9f5e46fc36285550> @ imm = #-0x1d80
 8003566:      	b	0x8003568 <cortex_m::peripheral::itm::Stim::write_u8::ha305cee9a26dba8a+0x20> @ imm = #-0x2
;     }
 8003568:      	add	sp, #0x18
 800356a:      	pop	{r7, pc}

0800356c <cortex_m::peripheral::itm::Stim::write_u16::hdc9bf6f26eabadf0>:
;     pub fn write_u16(&mut self, value: u16) {
 800356c:      	push	{r7, lr}
 800356e:      	mov	r7, sp
 8003570:      	sub	sp, #0x18
 8003572:      	str	r0, [sp, #0x4]
 8003574:      	mov	r2, r1
 8003576:      	str	r2, [sp, #0x8]
 8003578:      	str	r0, [sp, #0xc]
 800357a:      	strh	r1, [r7, #-6]
 800357e:      	str	r0, [sp, #0x14]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u16, value) }
 8003580:      	b	0x8003582 <cortex_m::peripheral::itm::Stim::write_u16::hdc9bf6f26eabadf0+0x16> @ imm = #-0x2
 8003582:      	ldr	r1, [sp, #0x8]
 8003584:      	ldr	r0, [sp, #0x4]
 8003586:      	bl	0x80017c8 <core::ptr::write_volatile::h12e0d4654b92aae2> @ imm = #-0x1dc2
 800358a:      	b	0x800358c <cortex_m::peripheral::itm::Stim::write_u16::hdc9bf6f26eabadf0+0x20> @ imm = #-0x2
;     }
 800358c:      	add	sp, #0x18
 800358e:      	pop	{r7, pc}

08003590 <cortex_m::peripheral::itm::Stim::write_u32::hef30b162e21c42d4>:
;     pub fn write_u32(&mut self, value: u32) {
 8003590:      	push	{r7, lr}
 8003592:      	mov	r7, sp
 8003594:      	sub	sp, #0x18
 8003596:      	str	r1, [sp, #0x4]
 8003598:      	str	r0, [sp, #0x8]
 800359a:      	str	r0, [sp, #0xc]
 800359c:      	str	r1, [sp, #0x10]
 800359e:      	str	r0, [sp, #0x14]
;         unsafe { ptr::write_volatile(self.register.get(), value) }
 80035a0:      	b	0x80035a2 <cortex_m::peripheral::itm::Stim::write_u32::hef30b162e21c42d4+0x12> @ imm = #-0x2
 80035a2:      	ldr	r1, [sp, #0x4]
 80035a4:      	ldr	r0, [sp, #0x8]
 80035a6:      	bl	0x80017d8 <core::ptr::write_volatile::h71e845d74288a06b> @ imm = #-0x1dd2
 80035aa:      	b	0x80035ac <cortex_m::peripheral::itm::Stim::write_u32::hef30b162e21c42d4+0x1c> @ imm = #-0x2
;     }
 80035ac:      	add	sp, #0x18
 80035ae:      	pop	{r7, pc}

080035b0 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h47baea9774d7a09f>:
;     pub fn is_fifo_ready(&self) -> bool {
 80035b0:      	push	{r7, lr}
 80035b2:      	mov	r7, sp
 80035b4:      	sub	sp, #0x10
 80035b6:      	str	r0, [sp, #0x4]
 80035b8:      	str	r0, [sp, #0x8]
 80035ba:      	str	r0, [sp, #0xc]
;         unsafe { ptr::read_volatile(self.register.get()) & 0b1 == 1 }
 80035bc:      	b	0x80035be <cortex_m::peripheral::itm::Stim::is_fifo_ready::h47baea9774d7a09f+0xe> @ imm = #-0x2
 80035be:      	ldr	r0, [sp, #0x4]
 80035c0:      	bl	0x80017b4 <core::ptr::read_volatile::h635dd44508193a2a> @ imm = #-0x1e10
 80035c4:      	str	r0, [sp]
 80035c6:      	b	0x80035c8 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h47baea9774d7a09f+0x18> @ imm = #-0x2
;     }
 80035c8:      	ldr	r0, [sp]
 80035ca:      	and	r0, r0, #0x1
 80035ce:      	add	sp, #0x10
 80035d0:      	pop	{r7, pc}

080035d2 <core::slice::<impl [T]>::as_ptr::hd9e2c870465e7095>:
 80035d2:      	sub	sp, #0x8
 80035d4:      	str	r0, [sp]
 80035d6:      	str	r1, [sp, #0x4]
 80035d8:      	add	sp, #0x8
 80035da:      	bx	lr

080035dc <core::slice::raw::from_raw_parts::h4c86d2c47c5533cc>:
 80035dc:      	push	{r7, lr}
 80035de:      	mov	r7, sp
 80035e0:      	sub	sp, #0x10
 80035e2:      	str	r0, [sp, #0x8]
 80035e4:      	str	r1, [sp, #0xc]
 80035e6:      	bl	0x8001820 <core::ptr::slice_from_raw_parts::hcea3699432801c22> @ imm = #-0x1dca
 80035ea:      	str	r0, [sp]
 80035ec:      	str	r1, [sp, #0x4]
 80035ee:      	b	0x80035f0 <core::slice::raw::from_raw_parts::h4c86d2c47c5533cc+0x14> @ imm = #-0x2
 80035f0:      	ldr	r1, [sp, #0x4]
 80035f2:      	ldr	r0, [sp]
 80035f4:      	add	sp, #0x10
 80035f6:      	pop	{r7, pc}

080035f8 <core::slice::raw::from_raw_parts::he81d4d0297b559b0>:
 80035f8:      	push	{r7, lr}
 80035fa:      	mov	r7, sp
 80035fc:      	sub	sp, #0x10
 80035fe:      	str	r0, [sp, #0x8]
 8003600:      	str	r1, [sp, #0xc]
 8003602:      	bl	0x80017f6 <core::ptr::slice_from_raw_parts::hb8091b445d5ca592> @ imm = #-0x1e10
 8003606:      	str	r0, [sp]
 8003608:      	str	r1, [sp, #0x4]
 800360a:      	b	0x800360c <core::slice::raw::from_raw_parts::he81d4d0297b559b0+0x14> @ imm = #-0x2
 800360c:      	ldr	r1, [sp, #0x4]
 800360e:      	ldr	r0, [sp]
 8003610:      	add	sp, #0x10
 8003612:      	pop	{r7, pc}

08003614 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h60f510a23ed719d4E>:
 8003614:      	sub	sp, #0xc
 8003616:      	strb.w	r0, [sp, #0x2]
 800361a:      	ldrb.w	r1, [sp, #0x2]
 800361e:      	lsls	r0, r1, #0x1f
 8003620:      	cbz	r0, 0x8003628 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h60f510a23ed719d4E+0x14> @ imm = #0x4
 8003622:      	b	0x8003624 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h60f510a23ed719d4E+0x10> @ imm = #-0x2
 8003624:      	b	0x8003630 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h60f510a23ed719d4E+0x1c> @ imm = #0x8
 8003626:      	trap
 8003628:      	movs	r0, #0x1
 800362a:      	strb.w	r0, [sp, #0x3]
 800362e:      	b	0x800363a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h60f510a23ed719d4E+0x26> @ imm = #0x8
 8003630:      	movs	r0, #0x0
 8003632:      	strb.w	r0, [sp, #0x3]
 8003636:      	b	0x8003638 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h60f510a23ed719d4E+0x24> @ imm = #-0x2
 8003638:      	b	0x800363a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h60f510a23ed719d4E+0x26> @ imm = #-0x2
 800363a:      	ldrb.w	r0, [sp, #0x3]
 800363e:      	add	sp, #0xc
 8003640:      	bx	lr

08003642 <core::ptr::drop_in_place<&mut cortex_m::itm::Port>::h5cc7bf677be5bd7a>:
 8003642:      	sub	sp, #0x4
 8003644:      	str	r0, [sp]
 8003646:      	add	sp, #0x4
 8003648:      	bx	lr
 800364a:      	bmi	0x80035f6 <core::slice::raw::from_raw_parts::h4c86d2c47c5533cc+0x1a> @ imm = #-0x58

0800364c <core::sync::atomic::compiler_fence::hddf5e3339e39344b>:
 800364c:      	push	{r7, lr}
 800364e:      	mov	r7, sp
 8003650:      	sub	sp, #0x28
 8003652:      	strb	r0, [r7, #-25]
 8003656:      	ldrb	r0, [r7, #-25]
 800365a:      	str	r0, [sp, #0x8]
 800365c:      	ldr	r1, [sp, #0x8]
 800365e:      	tbb	[pc, r1]

08003662 <$d.1>:
 8003662:	04 14 15 16	.word	0x16151404
 8003666:	17 00		.short	0x0017

08003668 <$t.2>:
 8003668:      	trap
 800366a:      	mov	r1, sp
 800366c:      	movs	r0, #0x0
 800366e:      	str	r0, [r1]
 8003670:      	movw	r1, #0x3eb8
 8003674:      	movt	r1, #0x800
 8003678:      	movw	r3, #0x3ec0
 800367c:      	movt	r3, #0x800
 8003680:      	add	r0, sp, #0x10
 8003682:      	movs	r2, #0x1
 8003684:      	bl	0x8002ba4 <core::fmt::Arguments::new_v1::h5c9d356837e9dbad> @ imm = #-0xae4
 8003688:      	b	0x8003696 <$t.2+0x2e>   @ imm = #0xa
 800368a:      	b	0x8003692 <$t.2+0x2a>   @ imm = #0x4
 800368c:      	b	0x8003692 <$t.2+0x2a>   @ imm = #0x2
 800368e:      	b	0x8003692 <$t.2+0x2a>   @ imm = #0x0
 8003690:      	b	0x8003692 <$t.2+0x2a>   @ imm = #-0x2
 8003692:      	add	sp, #0x28
 8003694:      	pop	{r7, pc}
 8003696:      	movw	r1, #0x3f10
 800369a:      	movt	r1, #0x800
 800369e:      	add	r0, sp, #0x10
 80036a0:      	bl	0x8001acc <core::panicking::panic_fmt::h65fc083b3717f98b> @ imm = #-0x1bd8
 80036a4:      	trap

080036a6 <__aeabi_memset4>:
 80036a6:      	b.w	0x8003752 <compiler_builtins::arm::__aeabi_memset4::h3fa22a7cfe19a0f9> @ imm = #0xa8

080036aa <compiler_builtins::mem::memset::hc0abf2ae7b29a060>:
 80036aa:      	push	{r4, r6, r7, lr}
 80036ac:      	add	r7, sp, #0x8
 80036ae:      	cmp	r2, #0xf
 80036b0:      	bls	0x8003720 <compiler_builtins::mem::memset::hc0abf2ae7b29a060+0x76> @ imm = #0x6c
 80036b2:      	rsbs	r3, r0, #0
 80036b4:      	ands	lr, r3, #0x3
 80036b8:      	add.w	r12, r0, lr
 80036bc:      	beq	0x80036e0 <compiler_builtins::mem::memset::hc0abf2ae7b29a060+0x36> @ imm = #0x20
 80036be:      	mov	r3, r0
 80036c0:      	strb	r1, [r3], #1
 80036c4:      	cmp	r3, r12
 80036c6:      	bhs	0x80036e0 <compiler_builtins::mem::memset::hc0abf2ae7b29a060+0x36> @ imm = #0x16
 80036c8:      	strb	r1, [r3], #1
 80036cc:      	cmp	r3, r12
 80036ce:      	itt	lo
 80036d0:      	strblo	r1, [r3], #1
 80036d4:      	cmplo	r3, r12
 80036d6:      	bhs	0x80036e0 <compiler_builtins::mem::memset::hc0abf2ae7b29a060+0x36> @ imm = #0x6
 80036d8:      	strb	r1, [r3], #1
 80036dc:      	cmp	r3, r12
 80036de:      	blo	0x80036c0 <compiler_builtins::mem::memset::hc0abf2ae7b29a060+0x16> @ imm = #-0x22
 80036e0:      	sub.w	lr, r2, lr
 80036e4:      	bic	r2, lr, #0x3
 80036e8:      	add.w	r3, r12, r2
 80036ec:      	cmp	r2, #0x1
 80036ee:      	blt	0x8003718 <compiler_builtins::mem::memset::hc0abf2ae7b29a060+0x6e> @ imm = #0x26
 80036f0:      	uxtb	r2, r1
 80036f2:      	mov.w	r4, #0x1010101
 80036f6:      	muls	r2, r4, r2
 80036f8:      	str	r2, [r12], #4
 80036fc:      	cmp	r12, r3
 80036fe:      	bhs	0x8003718 <compiler_builtins::mem::memset::hc0abf2ae7b29a060+0x6e> @ imm = #0x16
 8003700:      	str	r2, [r12], #4
 8003704:      	cmp	r12, r3
 8003706:      	itt	lo
 8003708:      	strlo	r2, [r12], #4
 800370c:      	cmplo	r12, r3
 800370e:      	bhs	0x8003718 <compiler_builtins::mem::memset::hc0abf2ae7b29a060+0x6e> @ imm = #0x6
 8003710:      	str	r2, [r12], #4
 8003714:      	cmp	r12, r3
 8003716:      	blo	0x80036f8 <compiler_builtins::mem::memset::hc0abf2ae7b29a060+0x4e> @ imm = #-0x22
 8003718:      	and	r2, lr, #0x3
 800371c:      	cbnz	r2, 0x8003724 <compiler_builtins::mem::memset::hc0abf2ae7b29a060+0x7a> @ imm = #0x4
 800371e:      	b	0x8003746 <compiler_builtins::mem::memset::hc0abf2ae7b29a060+0x9c> @ imm = #0x24
 8003720:      	mov	r3, r0
 8003722:      	cbz	r2, 0x8003746 <compiler_builtins::mem::memset::hc0abf2ae7b29a060+0x9c> @ imm = #0x20
 8003724:      	add	r2, r3
 8003726:      	strb	r1, [r3], #1
 800372a:      	cmp	r3, r2
 800372c:      	bhs	0x8003746 <compiler_builtins::mem::memset::hc0abf2ae7b29a060+0x9c> @ imm = #0x16
 800372e:      	strb	r1, [r3], #1
 8003732:      	cmp	r3, r2
 8003734:      	itt	lo
 8003736:      	strblo	r1, [r3], #1
 800373a:      	cmplo	r3, r2
 800373c:      	bhs	0x8003746 <compiler_builtins::mem::memset::hc0abf2ae7b29a060+0x9c> @ imm = #0x6
 800373e:      	strb	r1, [r3], #1
 8003742:      	cmp	r3, r2
 8003744:      	blo	0x8003726 <compiler_builtins::mem::memset::hc0abf2ae7b29a060+0x7c> @ imm = #-0x22
 8003746:      	pop	{r4, r6, r7, pc}

08003748 <compiler_builtins::arm::__aeabi_memset::h42a657d9304b5892>:
 8003748:      	mov	r3, r1
 800374a:      	mov	r1, r2
 800374c:      	mov	r2, r3
 800374e:      	b.w	0x80036aa <compiler_builtins::mem::memset::hc0abf2ae7b29a060> @ imm = #-0xa8

08003752 <compiler_builtins::arm::__aeabi_memset4::h3fa22a7cfe19a0f9>:
 8003752:      	push	{r4, r6, r7, lr}
 8003754:      	add	r7, sp, #0x8
 8003756:      	mov	r3, r2
 8003758:      	uxtb	r2, r2
 800375a:      	cmp	r1, #0x4
 800375c:      	blo	0x80037d2 <compiler_builtins::arm::__aeabi_memset4::h3fa22a7cfe19a0f9+0x80> @ imm = #0x72
 800375e:      	lsls	r4, r2, #0x10
 8003760:      	sub.w	lr, r1, #0x4
 8003764:      	orr.w	r3, r4, r3, lsl #24
 8003768:      	movs	r4, #0x1
 800376a:      	orr.w	r3, r3, r2, lsl #8
 800376e:      	add.w	r4, r4, lr, lsr #2
 8003772:      	add	r3, r2
 8003774:      	ands	r4, r4, #0x3
 8003778:      	beq	0x8003790 <compiler_builtins::arm::__aeabi_memset4::h3fa22a7cfe19a0f9+0x3e> @ imm = #0x14
 800377a:      	mov	r12, r0
 800377c:      	cmp	r4, #0x1
 800377e:      	str	r3, [r12], #4
 8003782:      	bne	0x80037a0 <compiler_builtins::arm::__aeabi_memset4::h3fa22a7cfe19a0f9+0x4e> @ imm = #0x1a
 8003784:      	mov	r0, r12
 8003786:      	mov	r1, lr
 8003788:      	cmp.w	lr, #0xc
 800378c:      	bhs	0x80037c2 <compiler_builtins::arm::__aeabi_memset4::h3fa22a7cfe19a0f9+0x70> @ imm = #0x32
 800378e:      	b	0x8003796 <compiler_builtins::arm::__aeabi_memset4::h3fa22a7cfe19a0f9+0x44> @ imm = #0x4
 8003790:      	cmp.w	lr, #0xc
 8003794:      	bhs	0x80037c2 <compiler_builtins::arm::__aeabi_memset4::h3fa22a7cfe19a0f9+0x70> @ imm = #0x2a
 8003796:      	mov	r0, r12
 8003798:      	pop.w	{r4, r6, r7, lr}
 800379c:      	b.w	0x8003748 <compiler_builtins::arm::__aeabi_memset::h42a657d9304b5892> @ imm = #-0x58
 80037a0:      	cmp	r4, #0x2
 80037a2:      	str	r3, [r0, #0x4]
 80037a4:      	bne	0x80037b4 <compiler_builtins::arm::__aeabi_memset4::h3fa22a7cfe19a0f9+0x62> @ imm = #0xc
 80037a6:      	subs	r1, #0x8
 80037a8:      	adds	r0, #0x8
 80037aa:      	mov	r12, r0
 80037ac:      	cmp.w	lr, #0xc
 80037b0:      	bhs	0x80037c2 <compiler_builtins::arm::__aeabi_memset4::h3fa22a7cfe19a0f9+0x70> @ imm = #0xe
 80037b2:      	b	0x8003796 <compiler_builtins::arm::__aeabi_memset4::h3fa22a7cfe19a0f9+0x44> @ imm = #-0x20
 80037b4:      	str	r3, [r0, #0x8]
 80037b6:      	subs	r1, #0xc
 80037b8:      	adds	r0, #0xc
 80037ba:      	mov	r12, r0
 80037bc:      	cmp.w	lr, #0xc
 80037c0:      	blo	0x8003796 <compiler_builtins::arm::__aeabi_memset4::h3fa22a7cfe19a0f9+0x44> @ imm = #-0x2e
 80037c2:      	subs	r1, #0x10
 80037c4:      	strd	r3, r3, [r0]
 80037c8:      	strd	r3, r3, [r0, #8]
 80037cc:      	adds	r0, #0x10
 80037ce:      	cmp	r1, #0x3
 80037d0:      	bhi	0x80037c2 <compiler_builtins::arm::__aeabi_memset4::h3fa22a7cfe19a0f9+0x70> @ imm = #-0x12
 80037d2:      	mov	r12, r0
 80037d4:      	mov	r0, r12
 80037d6:      	pop.w	{r4, r6, r7, lr}
 80037da:      	b.w	0x8003748 <compiler_builtins::arm::__aeabi_memset::h42a657d9304b5892> @ imm = #-0x96

080037de <HardFaultTrampoline>:
 80037de:      	mov	r0, lr
 80037e0:      	movs	r1, #0x4
 80037e2:      	tst	r0, r1
 80037e4:      	bne	0x80037ec <HardFaultTrampoline+0xe> @ imm = #0x4
 80037e6:      	mrs	r0, msp
 80037ea:      	b	0x80037f2 <HardFault_>  @ imm = #0x4
 80037ec:      	mrs	r0, psp
 80037f0:      	b	0x80037f2 <HardFault_>  @ imm = #-0x2

080037f2 <HardFault_>:
; pub unsafe extern "C" fn HardFault_(ef: &ExceptionFrame) -> ! {
 80037f2:      	push	{r7, lr}
 80037f4:      	mov	r7, sp
 80037f6:      	sub	sp, #0x8
 80037f8:      	str	r0, [sp, #0x4]
;     loop {
 80037fa:      	b	0x80037fc <HardFault_+0xa> @ imm = #-0x2
 80037fc:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 80037fe:      	strb	r0, [r7, #-5]
 8003802:      	ldrb	r0, [r7, #-5]
 8003806:      	bl	0x8001658 <core::sync::atomic::compiler_fence::h645110bcd707773b> @ imm = #-0x21b2
 800380a:      	b	0x80037fc <HardFault_+0xa> @ imm = #-0x12
